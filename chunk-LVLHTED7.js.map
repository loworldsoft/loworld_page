{
  "version": 3,
  "sources": ["Modules/core/guards/authguard.service.ts", "Modules/core/guards/authguard.guard.ts", "Modules/core/guards/roleguard.service.ts", "Modules/core/guards/roleguard.guard.ts"],
  "sourcesContent": ["import { Injectable } from \"@angular/core\";\nimport { GlobalService } from \"../services/global.service\";\nimport { Router } from \"@angular/router\";\nimport { MembershipService } from \"../../pages/membership/membership.service\";\n\n@Injectable({providedIn: 'root'})\nexport class AuthGuardService {\n\n    constructor(\n        private router: Router,\n        private membershipService: MembershipService\n    ) {}\n\n    public isLogin() {\n        if (!this.membershipService.isLoggedIn) {\n            this.router.navigate(['/membership/login']); // 사용자가 인증되지 않은 경우, 로그인 페이지로 리디렉션\n            return false;\n        }\n        return true;\n    }\n\n    // 로그인 상태에서 로그인 페이지 접근을 방지하는 메서드\n    public isLoggedOut() {\n        // if (this.globalService.currentUser.isLogin()) {\n        //     this.router.navigate(['/chatbot']); // 로그인 상태인 경우, 홈페이지로 리디렉션\n        //     return false;\n        // }\n        return true;\n    }\n    \n}", "import { inject } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivateFn, RouterStateSnapshot } from \"@angular/router\";\nimport { AuthGuardService } from \"./authguard.service\";\n\nexport const canActivate: CanActivateFn = (\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n) => {\n    return inject(AuthGuardService).isLogin();\n};\n\nexport const canActivateLogin: CanActivateFn = (\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n) => {\n    return inject(AuthGuardService).isLoggedOut();\n};", "import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, Router } from \"@angular/router\";\nimport { GlobalService } from \"../services/global.service\";\n\n@Injectable({ providedIn: 'root' })\nexport class RoleGuardService {\n    constructor(\n        private router: Router,\n        private globalService: GlobalService\n    ){}\n\n    public canActivate(route: ActivatedRouteSnapshot, url: string){\n        const requiredRoles = route.data['requiredRoles'];\n\n        if (this.isAuthorized(requiredRoles)) {\n            return true;\n        }\n        this.router.navigate(['/chatbot']);\n        return false;\n    }\n\n    private isAuthorized(requiredRoles: string[]): boolean {\n        return requiredRoles.includes(this.globalService.currentUser.userData.role.roleName);\n    }\n\n}", "import { inject } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivateFn, RouterStateSnapshot } from \"@angular/router\";\nimport { RoleGuardService } from \"./roleguard.service\";\n\nexport const roleGuard: CanActivateFn = \n    (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\n        return inject(RoleGuardService).canActivate(route, state.url);\n    }"],
  "mappings": ";;;;;;;;;;;;;;AAMM,IAAO,oBAAP,MAAO,kBAAgB;EAEzB,YACY,QACA,mBAAoC;AADpC,SAAA,SAAA;AACA,SAAA,oBAAA;EACT;EAEI,UAAO;AACV,QAAI,CAAC,KAAK,kBAAkB,YAAY;AACpC,WAAK,OAAO,SAAS,CAAC,mBAAmB,CAAC;AAC1C,aAAO;;AAEX,WAAO;EACX;;EAGO,cAAW;AAKd,WAAO;EACX;;;mBAtBS,mBAAgB,mBAAA,MAAA,GAAA,mBAAA,iBAAA,CAAA;AAAA;qFAAhB,mBAAgB,SAAhB,kBAAgB,WAAA,YADJ,OAAM,CAAA;AACzB,IAAO,mBAAP;;;ACFC,IAAM,cAA6B,CACtC,OACA,UACA;AACA,SAAO,OAAO,gBAAgB,EAAE,QAAO;AAC3C;AAEO,IAAM,mBAAkC,CAC3C,OACA,UACA;AACA,SAAO,OAAO,gBAAgB,EAAE,YAAW;AAC/C;;;ACXM,IAAO,oBAAP,MAAO,kBAAgB;EACzB,YACY,QACA,eAA4B;AAD5B,SAAA,SAAA;AACA,SAAA,gBAAA;EACV;EAEK,YAAY,OAA+B,KAAW;AACzD,UAAM,gBAAgB,MAAM,KAAK,eAAe;AAEhD,QAAI,KAAK,aAAa,aAAa,GAAG;AAClC,aAAO;;AAEX,SAAK,OAAO,SAAS,CAAC,UAAU,CAAC;AACjC,WAAO;EACX;EAEQ,aAAa,eAAuB;AACxC,WAAO,cAAc,SAAS,KAAK,cAAc,YAAY,SAAS,KAAK,QAAQ;EACvF;;;mBAlBS,mBAAgB,mBAAA,MAAA,GAAA,mBAAA,aAAA,CAAA;AAAA;qFAAhB,mBAAgB,SAAhB,kBAAgB,WAAA,YADH,OAAM,CAAA;AAC1B,IAAO,mBAAP;;;ACDC,IAAM,YACT,CAAC,OAA+B,UAA8B;AAC1D,SAAO,OAAO,gBAAgB,EAAE,YAAY,OAAO,MAAM,GAAG;AAChE;",
  "names": []
}
