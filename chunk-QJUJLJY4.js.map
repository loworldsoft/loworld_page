{
  "version": 3,
  "sources": ["Modules/pages/chatbot/components/chat/chat.component.ts", "Modules/pages/chatbot/components/chat/chat.component.html", "Modules/pages/chatbot/components/chat-history/chat-history.component.ts", "Modules/pages/chatbot/components/chat-history/chat-history.component.html", "Modules/pages/chatbot/chatbot.component.ts", "Modules/pages/chatbot/chatbot.component.html", "Modules/pages/chatbot/chatbot-routing.module.ts", "Modules/pages/chatbot/chatbot.module.ts"],
  "sourcesContent": ["import { Component, OnDestroy, ViewChild, ViewContainerRef, OnInit, Input } from '@angular/core';\r\nimport { GlobalService } from '../../../../core/services/global.service';\r\n\r\n@Component({\r\n  selector: 'app-chat',\r\n  templateUrl: './chat.component.html',\r\n  styleUrl: './chat.component.scss'\r\n})\r\nexport class ChatComponent implements OnInit, OnDestroy {\r\n\r\n  @ViewChild('container', { read: ViewContainerRef, static: true }) container!: ViewContainerRef;\r\n\r\n  @Input() pageId: string | null = null;\r\n\r\n  constructor(public globalService: GlobalService) {}\r\n\r\n  ngOnInit(): void {\r\n    if (this.pageId == null) {\r\n      this.pageId = this.globalService.logicService.getGUID();\r\n      this.globalService.historyService.currentChatPageId = this.pageId;\r\n      \r\n      this.globalService.liskovChatflow.layoutManager.find('chatpage')?.prepare(this.container);\r\n      this.globalService.chatflow.scenario('chatbot');\r\n    }\r\n    else { // history 페이지\r\n      this.globalService.historyService.currentChatPageId = this.pageId;\r\n      \r\n      this.globalService.dalService.chatHistoryHttp.get(this.globalService.currentUser.userData.userIdx).subscribe(response => {\r\n        this.globalService.historyService.allhistoryList = JSON.parse(response.data);\r\n        this.globalService.historyService.pageHistoryList = this.globalService.historyService.allhistoryList.find((page: any) => page.key === this.globalService.historyService.currentChatPageId);\r\n  \r\n        this.globalService.liskovChatflow.layoutManager.find('chatpage')?.prepare(this.container);\r\n        this.globalService.chatflow.scenario('history');\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    //console.log('chatpage onDestroy');\r\n    this.globalService.liskovChatflow.layoutManager.find('chatpage').clear();\r\n  }\r\n\r\n}\r\n\r\n// constructor(public globalService: GlobalService) {\r\n  // this.globalService.httpService.GetJson('./assets/json/chatbot.json').subscribe(d => {\r\n  //   this.globalService.liskov = new LiskovModel(d, globalService);\r\n  //   this.globalService.behavior = new LiskovBehavior(this.globalService.liskov);\r\n    \r\n  //   this.globalService.liskov.service.chatContainer = this.container;\r\n  //   this.globalService.liskov.service.chatScrollBody = this.scrollBody;\r\n  //   this.globalService.behavior.scenario('chatbot');\r\n  // });\r\n// }\r\n// public selectBehavior(event: any) {\r\n//   if (!event.selected) {\r\n//     this.globalService.logicType = 'default';\r\n//     this.globalService.prompt = '';\r\n//     return;\r\n//   }\r\n//   this.globalService.logicType = event.source._value;\r\n//   this.globalService.prompt = '';\r\n// }\r\n\r\n// public getQuestion(event: KeyboardEvent | any, question: string) {\r\n//   if (this.globalService.socketService.isConnected) {\r\n//     this.globalService.httpService.Get('/grpc/llm-cancel', { 'clientid': this.globalService.socketService.id })\r\n//       .subscribe(d => {\r\n//         if (!d.message.includes('정상 종료')) return;\r\n//         this.globalService.socketService.isConnected = false;\r\n//         this.globalService.liskov.behaviorManager.find('chat')?.clear();\r\n//       })\r\n//     return;\r\n//   }\r\n\r\n//   if (event.isComposing) return;\r\n//   if (!question) return;\r\n//   event.preventDefault();\r\n\r\n//   this.globalService.liskov.behaviorManager.find('chat')?.prepare({\r\n//     message: question,\r\n//     component: QuestionBalloonComponent\r\n//   });\r\n//   this.globalService.liskov.behaviorManager.find('chat')?.clear();\r\n\r\n//   this.inputText.nativeElement.value = '';\r\n//   this.settingSimulator();\r\n//   this.getAnswer(question);\r\n// }\r\n\r\n// public getAnswer(question: string) {\r\n//   this.globalService.liskov.clear();\r\n//   this.globalService.liskov.behaviorWords.push(this.globalService.logicType);\r\n//   this.globalService.liskov.questionWords.push(question);\r\n//   this.globalService.behavior.create(); // 모든 발화는 beforhand 행동부터 시작한다.\r\n// }\r\n\r\n// public settingSimulator() {\r\n//   this.globalService.chatContainers[0] = this.container;\r\n//   this.globalService.chatScrollBody = this.scrollBody.nativeElement;\r\n// }", "<!-- <div\r\n  #scrollBody\r\n  class=\"full-balloon\"\r\n  style=\"background-color: white;\"\r\n  [style.height]=\"height\"\r\n>\r\n  <ng-container #container></ng-container>\r\n</div>\r\n<div class=\"form-full-bottom\">\r\n  <div class=\"form-property\">\r\n    <button mat-icon-button class=\"form-prompt-button\" matTooltip=\"프롬프트 라이브러리\"\r\n      (click)=\"this.globalService.openBottomSheet()\">\r\n      <mat-icon>border_color</mat-icon>\r\n    </button>\r\n    <mat-chip-listbox style=\"margin: 0 0.5rem 0 auto;\" class=\"form-ai-select-chips\">\r\n      <mat-chip-option (selectionChange)=\"selectBehavior($event)\" value=\"mrc\" matTooltip=\"mrc\">MRC</mat-chip-option>\r\n      <mat-chip-option (selectionChange)=\"selectBehavior($event)\" value=\"summary\" matTooltip=\"요약\"\r\n        color=\"warn\">요약</mat-chip-option>\r\n    </mat-chip-listbox>\r\n  </div>\r\n  <div class=\"form-input-bottom\">\r\n    <mat-form-field class=\"form-field\">\r\n      <mat-label>Question</mat-label>\r\n      <textarea [disabled]=\"this.globalService.socketService.isConnected\" #inputText matInput\r\n        placeholder=\"여기에 무엇이든 물어보세요.\" (keydown.enter)=\"getQuestion($event, inputText.value)\"></textarea>\r\n    </mat-form-field>\r\n    <button mat-icon-button class=\"form-submit-button\"\r\n      [matTooltip]=\"this.globalService.socketService.isConnected ? '정지' : '보내기'\"\r\n      (click)=\"getQuestion($event, inputText.value)\">\r\n      <mat-icon>{{ this.globalService.socketService.isConnected ? 'stop_circle' : 'send' }}</mat-icon>\r\n    </button>\r\n  </div>\r\n</div> -->\r\n<div style=\"width: 870px; margin: 0 auto;\">\r\n  <ng-container #container></ng-container>\r\n</div>\r\n", "import { Component, ElementRef, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { StoreAbstract } from '../../../../core/classes/store.abstract';\r\nimport { ListComponent } from '../../../chatflow/components/atom/list/list.component';\r\n\r\n@Component({\r\n  selector: 'app-chat-history',\r\n  templateUrl: './chat-history.component.html',\r\n  styleUrl: './chat-history.component.scss'\r\n})\r\nexport class ChatHistoryComponent extends StoreAbstract implements OnInit, OnDestroy {\r\n\r\n  @ViewChild('container', { read: ViewContainerRef, static: true })\r\n  public container!: ViewContainerRef;\r\n  @ViewChild('scrollBody', { read: ElementRef, static: true })\r\n  scrollBody!: ElementRef;\r\n\r\n  ngOnInit() {\r\n    this.globalService.liskovChatflow.layoutManager.find('chathistorypage')?.prepare(this.container);\r\n    //this.globalService.chatflow.scenario('history');\r\n    \r\n    this.dalService.chatHistoryHttp.get(this.currentUser.userData.userIdx).subscribe(response => {\r\n      if (response == null) return;\r\n      \r\n      this.historyService.allhistoryList = JSON.parse(response.data);\r\n      const groupHistoryList = this.historyService.groupHistoryList();\r\n      this.dynamicLayoutService.historyListContainer = this.factoryService.createComponent(\r\n        ListComponent,\r\n        this.container,\r\n        groupHistoryList\r\n      );\r\n      //this.dynamicLayoutService.historyListContainer.instance.scrollBody.nativeElement.scrollTop = this.dynamicLayoutService.historyListContainer.instance.scrollBody.nativeElement.scrollHeight;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.globalService.liskovChatflow.layoutManager.find('chathistorypage').clear();\r\n  }\r\n\r\n}\r\n", "<!-- <div>\r\n  <mat-accordion>\r\n    <ng-container #container></ng-container>\r\n  </mat-accordion>\r\n</div> -->\r\n<div style=\"margin: 10px;\">\r\n  <ng-container #scrollBody #container></ng-container>\r\n</div>", "import { Component, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { StoreAbstract } from '../../core/classes/store.abstract';\r\n\r\n@Component({\r\n  selector: 'app-chatbot',\r\n  templateUrl: './chatbot.component.html',\r\n  styleUrl: './chatbot.component.scss'\r\n})\r\nexport class ChatbotComponent extends StoreAbstract implements OnInit {\r\n\r\n  public chatPageId: string | null = null;\r\n\r\n  private route = inject(ActivatedRoute);\r\n\r\n  ngOnInit() {\r\n    this.OnResizeRedux();\r\n    this.historyService.currentChatPageId = '';\r\n    this.historyService.allhistoryList = null;\r\n    this.historyService.pageHistoryList = null;\r\n    this.historyService.historyMetadata = [];\r\n\r\n    this.route.paramMap.subscribe(params => {\r\n      this.chatPageId = params.get('chatPageId');\r\n    });\r\n  }\r\n\r\n  protected override OnResizeRedux(): void {\r\n    this.resize$.subscribe(d => {\r\n      this.layoutService.leftWidh = d.leftWidth;\r\n      this.layoutService.rightWidth = d.rightWidth;\r\n    })\r\n    this.resize({ leftWidth: 15, rightWidth: 85 });\r\n  }\r\n\r\n}\r\n", "<div class=\"full-layout\" [style.height]=\"layoutService.getBodyHeight()\">\r\n    <app-chat-history\r\n        class=\"history-scroll back-color\"\r\n        [style.width.%]=\"layoutService.leftWidh\"\r\n    >\r\n    </app-chat-history>\r\n    <button class=\"splitter\" [style.height]=\"layoutService.getBodyHeight()\" appSplitter></button>\r\n    <button\r\n        style=\"align-self: center; transform: translate(-15px, 0);\"\r\n        (click)=\"resizeButton($event)\"\r\n        (mouseenter)=\"layoutService.isButtonHover = true\"\r\n        (mouseleave)=\"layoutService.isButtonHover = false\"\r\n    >\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 50 50\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            @if (layoutService.isOpen) {\r\n                @if (layoutService.isButtonHover) {\r\n                    <path d=\"M 20,25 L 28,10 M 20,25 L 28,40\" stroke=\"#9b9b9b\" stroke-width=\"7\" fill=\"none\" stroke-linecap=\"round\" />\r\n                } @else {\r\n                <line id=\"line\" x1=\"25\" y1=\"15\" x2=\"25\" y2=\"45\" fill=\"none\" stroke=\"#9b9b9b\" stroke-width=\"7\" stroke-linecap=\"round\" />\r\n                }\r\n            } @else {\r\n                <path d=\"M 30,25 L 22,10 M 30,25 L 22,40\" stroke=\"#9b9b9b\" stroke-width=\"7\" fill=\"none\" stroke-linecap=\"round\" />\r\n            }\r\n        </svg>\r\n    </button>\r\n    <app-chat\r\n        [pageId]=\"chatPageId\"\r\n        [style.height]=\"layoutService.getBodyHeight()\"\r\n        [style.width.%]=\"layoutService.rightWidth\">\r\n    </app-chat>\r\n</div>\r\n", "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ChatbotComponent } from './chatbot.component';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ChatbotComponent\r\n  },\r\n  {\r\n    path: ':chatPageId',\r\n    component: ChatbotComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ChatbotRoutingModule { }\r\n", "import { NgModule } from '@angular/core';\r\nimport { ChatbotComponent } from './chatbot.component';\r\nimport { ChatbotRoutingModule } from './chatbot-routing.module';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { ChatComponent } from './components/chat/chat.component';\r\nimport { BottomSheetComponent } from './components/bottom-sheet/bottom-sheet.component';\r\nimport { ChatHistoryComponent } from './components/chat-history/chat-history.component';\r\nimport { FileDialogComponent } from './components/file-dialog/file-dialog.component';\r\nimport { ChatHistoryRest } from './components/classes/chat-history.rest';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ChatbotComponent,\r\n    ChatComponent,\r\n    BottomSheetComponent,\r\n    ChatHistoryComponent,\r\n    FileDialogComponent\r\n  ],\r\n  imports: [\r\n    SharedModule,\r\n    ChatbotRoutingModule,\r\n  ],\r\n  providers: [ChatHistoryRest]\r\n})\r\nexport class ChatbotModule { }\r\n"],
  "mappings": "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",
  "names": []
}
