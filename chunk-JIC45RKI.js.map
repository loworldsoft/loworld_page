{
  "version": 3,
  "sources": ["Modules/pages/chatbot/components/classes/chat-history.rest.ts", "Modules/pages/chatbot/components/classes/chat-history.menu.ts", "Modules/pages/chatflow/components/atom/list/list.component.ts", "Modules/pages/chatflow/components/atom/list/list.component.html"],
  "sourcesContent": ["import { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { IChatHistoryRequest } from \"../../../../core/http/chat-history.http\";\r\nimport { ConfirmDialogComponent } from \"../../../../shared/components/molecules/confirm-dialog/confirm-dialog.component\";\r\nimport { Router } from \"@angular/router\";\r\nimport { inject } from \"@angular/core\";\r\nimport { DalService } from \"../../../../core/services/dal.service\";\r\nimport { DynamicLayoutService } from './../../../../core/services/dynamic-layout.service';\r\nimport { HistoryService } from \"../../../../core/services/history.service\";\r\n\r\nexport class ChatHistoryRest {\r\n\r\n  private readonly router = inject(Router);\r\n  private readonly dialog = inject(MatDialog);\r\n  private readonly _snackBar = inject(MatSnackBar);\r\n  private readonly dalService = inject(DalService);\r\n  private readonly dynamicLayoutService = inject(DynamicLayoutService);\r\n  private readonly historyService = inject(HistoryService);\r\n\r\n  public delete(request: IChatHistoryRequest) {\r\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\r\n      data: {\r\n        title: '히스토리 삭제',\r\n        content: `히스토리를 삭제하시겠습니까?`,\r\n        btnYes: '예',\r\n        btnNo: '아니요'\r\n      }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((d: boolean) => {\r\n      if (!d) return;\r\n\r\n      this.dalService.chatHistoryHttp.delete(request).subscribe(response => {\r\n        this._snackBar.open('히스토리가 삭제되었습니다.', '확인', {\r\n          duration: 2000,\r\n          horizontalPosition: 'center',\r\n          verticalPosition: 'top'\r\n        });\r\n\r\n        if (request.chatPageId === this.historyService.currentChatPageId) {\r\n          this.router.navigateByUrl('/chatbot');\r\n          return;\r\n        }\r\n        \r\n        this.historyService.allhistoryList = JSON.parse(response.data);\r\n        const groupHistoryList = this.historyService.groupHistoryList();\r\n        this.dynamicLayoutService.historyListContainer.instance.historyList = groupHistoryList;\r\n      });\r\n    });\r\n  }\r\n \r\n}", "import { inject } from \"@angular/core\";\r\nimport { IMenu, IMenuData } from \"../../../../components/menu-item/menu/menu.interface\";\r\nimport { ChatHistoryRest } from \"./chat-history.rest\";\r\n\r\nexport class ChatHistoryMenuData implements IMenu {\r\n\r\n  private readonly restApi = inject(ChatHistoryRest);\r\n\r\n  menuData: IMenuData[] = [\r\n    {\r\n      itemName: '삭제',\r\n      icon: 'delete',\r\n      itemFunc: this.restApi.delete.bind(this.restApi),\r\n      checkDisabled() {\r\n        return false;\r\n      }\r\n    }\r\n  ]\r\n\r\n}", "import { Component, ViewChild, inject } from '@angular/core';\r\nimport { DataAbstract } from '../../../../../core/classes/data.abstract';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { IChatHistoryRequest } from '../../../../../core/http/chat-history.http';\r\nimport { ChatHistoryMenuData } from '../../../../chatbot/components/classes/chat-history.menu';\r\nimport { MenuComponent } from '../../../../../components/menu-item/menu/menu.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ConfirmDialogComponent } from '../../../../../shared/components/molecules/confirm-dialog/confirm-dialog.component';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\ninterface IHistory {\r\n  header: string;\r\n  items: {\r\n    id: string;\r\n    message: string;\r\n    type: string;\r\n  }[]\r\n}\r\n\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrl: './list.component.scss'\r\n})\r\nexport class ListComponent extends DataAbstract {\r\n\r\n  @ViewChild('menu', { static: false }) menuComponent!: MenuComponent;\r\n\r\n  public historyList: IHistory[] = [];\r\n\r\n  public override dataInit(): void {\r\n    this.historyList = this.data;\r\n  }\r\n\r\n  public isChecked: boolean = false;\r\n  public isClicked: boolean = false;\r\n\r\n  public historyDeleteData: IChatHistoryRequest = {\r\n    userIdx: this.currentUser.userData.userIdx,\r\n    chatPageId: ''\r\n  };\r\n\r\n  private readonly dialog = inject(MatDialog);\r\n  private readonly router = inject(Router);\r\n  private readonly route = inject(ActivatedRoute);\r\n  private readonly _snackBar = inject(MatSnackBar);\r\n  \r\n  public historyMenu = new ChatHistoryMenuData();\r\n  \r\n  public onClickListItem(pageId: string) {\r\n    this.historyService.currentChatPageId = pageId;\r\n\r\n    this.historyService.allhistoryList = null;\r\n    this.historyService.pageHistoryList = null;\r\n    this.historyService.historyMetadata = [];\r\n\r\n    this.dalService.chatHistoryHttp.get(this.currentUser.userData.userIdx).subscribe(response => {\r\n      this.historyService.allhistoryList = JSON.parse(response.data);\r\n      this.historyService.pageHistoryList = this.historyService.allhistoryList.find((page: any) => page.key === this.historyService.currentChatPageId);\r\n\r\n      this.router.navigateByUrl(`/chatbot/${pageId}`);\r\n      this.globalService.chatflow.scenario('history');\r\n    });\r\n  }\r\n\r\n  public deleteHistory(event: MouseEvent, id: string) {\r\n    event.stopPropagation();\r\n    this.historyDeleteData = {\r\n      userIdx: this.currentUser.userData.userIdx,\r\n      chatPageId: id\r\n    };\r\n\r\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\r\n      data: {\r\n        title: '히스토리 삭제',\r\n        content: '히스토리를 삭제하시겠습니까?',\r\n        btnYes: '예',\r\n        btnNo: '아니요'\r\n      }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((d: boolean) => {\r\n      if (!d) return;\r\n\r\n      this.dalService.chatHistoryHttp.delete(this.historyDeleteData).subscribe(response => {\r\n        this._snackBar.open(\"히스토리가 삭제되었습니다\", '확인', {\r\n          duration: 2000,\r\n          horizontalPosition: 'center',\r\n          verticalPosition: 'top'\r\n        });\r\n\r\n        if (this.historyDeleteData.chatPageId === this.historyService.currentChatPageId) {\r\n          this.router.navigateByUrl('/chatbot');\r\n          return;\r\n        }\r\n\r\n        this.historyService.allhistoryList = JSON.parse(response.data);\r\n        const groupHistoryList = this.historyService.groupHistoryList();\r\n        this.dynamicLayoutService.historyListContainer.instance.historyList = groupHistoryList;\r\n      })\r\n    });\r\n  }\r\n\r\n  // TODO: DOM에서 호출하기 떄문에 개선 필요 (중요이슈)\r\n  public getClicked(id: string) {\r\n    return id === (this.route.params as any).value.chatPageId;\r\n  }\r\n\r\n}\r\n", "<mat-list class=\"text-ellipsis\">\r\n  @for (element of historyList; track $index) {\r\n    <div mat-subheader style=\"font-weight: 600;\">{{ element.header | todayFormat }}</div>\r\n    @for (item of element.items; track item) {\r\n      <mat-list-item \r\n        [id]=\"item.id\"\r\n        matRipple  \r\n        (click)=\"onClickListItem(item.id)\"\r\n      >\r\n        <div style=\"display: flex;\">\r\n          <div matListItemTitle [ngClass]=\"{'checked': isChecked, 'base' : !isChecked, 'clicked' : getClicked(item.id)}\">\r\n            {{ item.type === 'complain' ? '민원 처리' :  item.message }}\r\n          </div>\r\n          <span class=\"example-spacer\"></span>\r\n          <button mat-icon-button style=\"transform: translate(0px, -6.8px);\" (click)=\"deleteHistory($event, item.id)\">\r\n            <mat-icon>close</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-list-item>\r\n    }\r\n  }\r\n</mat-list>\r\n"],
  "mappings": "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",
  "names": []
}
