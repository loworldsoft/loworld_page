{
  "version": 3,
  "sources": ["Modules/pages/category-manage/components/organisms/dialog/category-dialog/category-dialog.component.ts", "Modules/pages/category-manage/components/organisms/dialog/category-dialog/category-dialog.component.html", "Modules/pages/category-manage/classes/menu/category.menu.ts", "Modules/pages/category-manage/classes/rest/category.rest.ts"],
  "sourcesContent": ["import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\nexport interface ICategoryDialog {\n  defaultValue: string;\n}\n@Component({\n  selector: 'app-category-dialog',\n  templateUrl: './category-dialog.component.html',\n  styleUrl: './category-dialog.component.scss'\n})\nexport class CategoryDialogComponent {\n  inputData:string = \"\";\n  isInputEmpty: boolean = false;\n\n  constructor(public dialogRef: MatDialogRef<CategoryDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: ICategoryDialog){\n    this.inputData = data.defaultValue;\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  onYesClick(): void{\n    if(!this.inputData.trim()){\n      this.isInputEmpty = true;\n    }else{\n      this.dialogRef.close(this.inputData);\n    }\n    \n  }\n  // inputData:string = \"\";\n  // isInputEmpty: boolean = false;\n  // constructor(public dialogRef: MatDialogRef<InputDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: IInputDialog){\n  //   console.log('data', data);\n  // }\n\n  // onNoClick(): void {\n  //   this.dialogRef.close();\n  // }\n\n  // onYesClick(): void{\n  //   if(!this.inputData.trim()){\n  //     this.isInputEmpty = true;\n  //   }else{\n  //     this.dialogRef.close(this.inputData);\n  //   }\n    \n  // }\n}\n", "<h1 mat-dialog-title>스토리 등록/수정</h1>\n<div mat-dialog-content>\n    <mat-form-field>\n        <mat-label>스토리 플로우</mat-label>\n        <input matInput placeholder=\"스토리명을 입력해주세요\" [(ngModel)]=\"inputData\">\n    </mat-form-field>\n</div>\n@if(isInputEmpty){\n    <div>스토리명은 필수입니다.</div>\n}\n<div mat-dialog-actions>\n    <button mat-button (click)=\"onYesClick()\">저장</button>\n    <button mat-button (click)=\"onNoClick()\">취소</button>\n</div>\n<!-- <h1 mat-dialog-title></h1>\n<div mat-dialog-content>\n    <mat-form-field>\n        <mat-label></mat-label>\n        <input matInput  [(ngModel)]=\"inputData\">\n    </mat-form-field>\n</div>\n@if(isInputEmpty){\n    \n}\n<div mat-dialog-actions>\n    <button mat-button (click)=\"onYesClick()\">예</button>\n    <button mat-button (click)=\"onNoClick()\">아니오</button>\n</div> -->", "import { IMenu, IMenuData } from \"../../../../components/menu-item/menu/menu.interface\";\nimport { TreerowComponent } from \"../../../../components/treeview/treerow/treerow/treerow.component\";\nimport { ICategoryInfo } from \"../../interfaces/category/category.interface\";\nimport { CategoryRest } from \"../rest/category.rest\";\n\nexport class CategoryMenuData implements IMenu{\n\n    constructor(private restApi: CategoryRest) {}\n    \n    menuData: Array<IMenuData> = [\n        {\n            itemName: '추가',\n            icon: 'add',\n            itemFunc: this.restApi.createCategory.bind(this.restApi),\n            checkDisabled(context: TreerowComponent<ICategoryInfo>){\n                return context.data.depth! < 2   ? false : true;\n            }\n        },\n        {\n            itemName: '삭제',\n            icon: 'delete',\n            itemFunc: this.restApi.deleteCategory.bind(this.restApi),\n            checkDisabled(context: TreerowComponent<ICategoryInfo>){\n                return context.data.depth! > 0 && context.data.children.length ===0  ? false : true;\n            }\n        },\n        {\n            itemName: '이름 변경',\n            icon: 'edit',\n            itemFunc: this.restApi.patchCategoryName.bind(this.restApi),\n            checkDisabled(context: TreerowComponent<ICategoryInfo>){\n                return false;\n            }\n        },\n    ];\n\n}", "import { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { GlobalService } from \"../../../../core/services/global.service\";\nimport { ICategoryGetRequest, ICategoryMoveRequest } from \"../../interfaces/category/category.dto\";\nimport { TreerowComponent } from \"../../../../components/treeview/treerow/treerow/treerow.component\";\nimport { ICategoryInfo } from \"../../interfaces/category/category.interface\";\nimport { CategoryDialogComponent } from \"../../components/organisms/dialog/category-dialog/category-dialog.component\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { ConfirmDialogComponent } from \"../../../../shared/components/molecules/confirm-dialog/confirm-dialog.component\";\nimport { moveItemInArray } from \"@angular/cdk/drag-drop\";\nimport { IMoveData } from \"../../../../components/treeview/tree.store\";\nimport { TreeviewComponent } from \"../../../../components/treeview/treeview/treeview.component\";\nimport { map } from \"rxjs\";\n\n//TODO 이름도 바꾸기!\nexport class CategoryRest {\n\n    constructor(\n        private dialog: MatDialog,\n        private _snackBar: MatSnackBar,\n        private globalService: GlobalService,\n    ) {}\n    \n    getCategories(request: ICategoryGetRequest) {\n        return this.globalService.dalService.categoryHttp!.get(request).pipe(map(d => {\n            return d.data.map(d => {\n                const { children, ...rest } = d;\n                return {\n                    ...rest,\n                    children: JSON.parse(d.children)\n                }\n            });\n        }));\n    }\n\n\n\n    createCategory(context: TreerowComponent<ICategoryInfo>): void {\n        const dialogRef = this.dialog.open(CategoryDialogComponent, {\n            data: {\n                defaultValue: '',\n            }\n        });\n        dialogRef.afterClosed().subscribe(categoryName => {\n            if (!categoryName) return;\n            const parent = context.data;\n            const treeService = context.treeService;\n            const path = treeService.findPath(parent.id);\n            const id = this.globalService.currentCategoryService.getNextId();\n\n            const childData = {\n              id: id,\n              name: categoryName,\n              rootId: parent.id,\n              depth: parent.depth + 1,\n              steps : 0,\n              type: 'local',\n              children: [],\n            };\n\n            const found = treeService.findMe(parent.id);\n            found!.children.push(id);  //자식에 받아온 데이터 추가해주기\n\n            const { steps, children, ...rest } = childData\n            treeService.datasource.push({ ...rest, children: children });//이거 대신 그냥 get 해도 되긴 하는데...!\n            this.globalService.currentCategoryService.setCategories()\n\n            // this.globalService.dalService.categoryHttp!.create({\n            //     parentId: parent.id,\n            //     parentDepth: parent.depth!,\n            //     categoryName: categoryName,\n            //     insertName: this.globalService.currentUser.userData.name!,//카테고리 생성자\n            //     type: parent.type,\n            //     insertId: this.globalService.currentUser.userData.id,\n            //     companyCode: '',\n            //     path: path,\n            // }).subscribe(d => {\n            //     if (!d.isSuccess) {\n            //         this._snackBar.open(d.message, '확인', {\n            //             horizontalPosition: 'center',\n            //             verticalPosition: 'top',\n            //         });\n            //         return;\n            //     }\n            //     console.log(d, d.data);\n            //     const found = treeService.findMe(parent.id);\n            //     found!.children.push(d.data.id);  //자식에 받아온 데이터 추가해주기\n            //     console.log('found', found);\n            //     const { steps, children, ...rest } = d.data\n            //     treeService.datasource.push({ ...rest, children: JSON.parse(children) });//이거 대신 그냥 get 해도 되긴 하는데...!\n            //     this._snackBar.open('카테고리가 생성되었습니다.', '확인', {\n            //         horizontalPosition: 'center',\n            //         verticalPosition: 'top',\n            //     });\n            // });\n        });\n    }\n\n    deleteCategory(context: TreerowComponent<ICategoryInfo>): void {\n        const data = context.data;\n        const treeService = context.treeService;\n\n        const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n            data: {\n                title: '카테고리 삭제',\n                content: `${data.name}을 삭제하겠습니까? 카테고리 내부의 파일도 함께 삭제됩니다.`,\n                btnYes: '예',\n                btnNo: '아니요',\n            }\n        });\n        dialogRef.afterClosed().subscribe((d: boolean) => {\n            if (!d) return;\n            const parent = treeService.findParent(data.id);\n            const path = treeService.findPath(data.id);\n\n            treeService.datasource = treeService.datasource.filter((d: any) => d.id !== data.id);\n            const index = parent!.children.indexOf(data.id);\n            parent?.children.splice(index, 1);\n            this.globalService.currentCategoryService.categories = treeService.datasource;\n            this.globalService.currentCategoryService.setCategories();\n\n            // this.globalService.dalService.categoryHttp.delete({ categoryId: data.id, parentId: parent!.id, path: path }).subscribe(d => {\n            //     if (!d.isSuccess) {\n            //         this._snackBar.open(d.message, '확인', {\n            //             horizontalPosition: 'center',\n            //             verticalPosition: 'top',\n            //         });\n            //         return;\n            //     }\n            //     console.log('delete id', data.id);\n            //     // console.log('안뇽 나는 deleteCategory', data);\n            //     // //카테고리 삭제\n            //     treeService.datasource = treeService.datasource.filter((d: any) => d.id !== data.id);\n            //     console.log('wow', treeService.datasource);\n            //     const parent = treeService.findParent(data.id);\n            //     const index = parent!.children.indexOf(data.id);\n            //     parent?.children.splice(index, 1);\n            //     //this.resetData(treeService);\n            //     this._snackBar.open('카테고리가 삭제되었습니다.', '확인', {\n            //         horizontalPosition: 'center',\n            //         verticalPosition: 'top',\n            //     });\n            // });\n        });\n    }\n\n \n\n    patchCategoryName(context: TreerowComponent<ICategoryInfo>): void {\n        const dialogRef = this.dialog.open(CategoryDialogComponent, {\n            data: {\n                defaultValue: context.data.name,\n            }\n        });\n        dialogRef.afterClosed().subscribe(categoryName => {\n            if (!categoryName) return\n            const data = context.data;\n            const treeService = context.treeService;\n            const me = treeService.findMe(data.id);\n            me!.name = categoryName;\n            this.globalService.currentCategoryService.categories = treeService.datasource;\n            this.globalService.currentCategoryService.setCategories();\n           \n            // this.globalService.dalService.categoryHttp!.rename({\n            //     categoryId: data.id,\n            //     categoryName: categoryName,\n            // }).subscribe(d => {\n            //     if (!d.isSuccess) {\n            //         this._snackBar.open(d.message, '확인', {\n            //             horizontalPosition: 'center',\n            //             verticalPosition: 'top',\n            //         });\n            //         return;\n            //     }\n            //     const me = treeService.findMe(data.id);\n            //     me!.name = categoryName;\n            //     this._snackBar.open('카테고리 이름이 변경되었습니다.', '확인', {\n            //         horizontalPosition: 'center',\n            //         verticalPosition: 'top',\n            //     });\n            // })\n        });\n        //console.log('안뇽 나는 patchCategoryName', data);\n    }\n\n    patchCategoryMove(categoryInfo: ICategoryInfo, treeView?: TreeviewComponent<ICategoryInfo>) {\n        // const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n        //     data: {\n        //         title: '카테고리 이동 1',\n        //         content: `${categoryInfo.name}을 이동하겠습니까?`,\n        //         btnYes: '예',\n        //         btnNo: '아니요',\n        //     }\n        // });\n        // dialogRef.afterClosed().subscribe((d: boolean) => {\n        //     if (!d) return;\n        //     const request: ICategoryMoveRequest = {\n        //         parentId: categoryInfo.id,\n        //         children: JSON.stringify(categoryInfo.children)\n        //     };\n\n            this.globalService.currentCategoryService.setCategories();\n\n            // this.globalService.dalService.categoryHttp!.move(request).subscribe(d => {\n            //     if (!d.isSuccess) {\n            //         this._snackBar.open(d.message, '확인', {\n            //             horizontalPosition: 'center',\n            //             verticalPosition: 'top',\n            //         });\n            //         return;\n            //     }\n            //     this._snackBar.open('카테고리가 이동됐습니다.', '확인', {\n            //         horizontalPosition: 'center',\n            //         verticalPosition: 'top',\n            //     });\n            // });//실패하면 request 넣어서 전에 데이터 가져오기\n       // });\n    }\n\n    move(event: IMoveData, treeView: TreeviewComponent<ICategoryInfo>) {\n        const parent = treeView.treeService.findMe(event.movedParentId)!;\n        // const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n        //     data: {\n        //         title: '카테고리 이동 2',\n        //         content: `${parent.name}을 이동하겠습니까?`,\n        //         btnYes: '예',\n        //         btnNo: '아니요',\n        //     }\n        // });\n        // dialogRef.afterClosed().subscribe((d: boolean) => {\n        //     if (!d) {\n        //         moveItemInArray(parent.children, event.movedData.previousIndex, event.movedData.currentIndex);\n        //         return;\n        //     }\n            this.globalService.currentCategoryService.setCategories();\n\n            const request: ICategoryMoveRequest = {\n                parentId: parent.id,\n                children: JSON.stringify(parent.children)\n            };\n\n            // this.globalService.dalService.categoryHttp!.move(request).subscribe(d => {\n            //     if (!d.isSuccess) {\n            //         this._snackBar.open(d.message, '확인', {\n            //             horizontalPosition: 'center',\n            //             verticalPosition: 'top',\n            //         });\n            //         return;\n            //     }\n            //     this._snackBar.open('카테고리가 이동됐습니다.', '확인', {\n            //         horizontalPosition: 'center',\n            //         verticalPosition: 'top',\n            //     });\n            // });//실패하면 request 넣어서 전에 데이터 가져오기\n       // });\n    }\n}"],
  "mappings": "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",
  "names": ["d"]
}
