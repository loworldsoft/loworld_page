{
  "version": 3,
  "sources": ["Modules/core/guards/authguard.service.ts", "Modules/core/guards/authguard.guard.ts", "Modules/core/guards/roleguard.service.ts", "Modules/core/guards/roleguard.guard.ts"],
  "sourcesContent": ["import { Injectable } from \"@angular/core\";\r\nimport { GlobalService } from \"../services/global.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { MembershipService } from \"../../pages/membership/membership.service\";\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AuthGuardService {\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private membershipService: MembershipService\r\n    ) {}\r\n\r\n    public isLogin() {\r\n        if (!this.membershipService.isLoggedIn) {\r\n            this.router.navigate(['/membership/login']); // 사용자가 인증되지 않은 경우, 로그인 페이지로 리디렉션\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // 로그인 상태에서 로그인 페이지 접근을 방지하는 메서드\r\n    public isLoggedOut() {\r\n        // if (this.globalService.currentUser.isLogin()) {\r\n        //     this.router.navigate(['/chatbot']); // 로그인 상태인 경우, 홈페이지로 리디렉션\r\n        //     return false;\r\n        // }\r\n        return true;\r\n    }\r\n    \r\n}", "import { inject } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, CanActivateFn, RouterStateSnapshot } from \"@angular/router\";\r\nimport { AuthGuardService } from \"./authguard.service\";\r\n\r\nexport const canActivate: CanActivateFn = (\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n) => {\r\n    return inject(AuthGuardService).isLogin();\r\n};\r\n\r\nexport const canActivateLogin: CanActivateFn = (\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n) => {\r\n    return inject(AuthGuardService).isLoggedOut();\r\n};", "import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, Router } from \"@angular/router\";\r\nimport { GlobalService } from \"../services/global.service\";\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RoleGuardService {\r\n    constructor(\r\n        private router: Router,\r\n        private globalService: GlobalService\r\n    ){}\r\n\r\n    public canActivate(route: ActivatedRouteSnapshot, url: string){\r\n        const requiredRoles = route.data['requiredRoles'];\r\n\r\n        if (this.isAuthorized(requiredRoles)) {\r\n            return true;\r\n        }\r\n        this.router.navigate(['/chatbot']);\r\n        return false;\r\n    }\r\n\r\n    private isAuthorized(requiredRoles: string[]): boolean {\r\n        return requiredRoles.includes(this.globalService.currentUser.userData.role.roleName);\r\n    }\r\n\r\n}", "import { inject } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, CanActivateFn, RouterStateSnapshot } from \"@angular/router\";\r\nimport { RoleGuardService } from \"./roleguard.service\";\r\n\r\nexport const roleGuard: CanActivateFn = \r\n    (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\r\n        return inject(RoleGuardService).canActivate(route, state.url);\r\n    }"],
  "mappings": ";;;;;;;;;;;;;;AAMM,IAAO,oBAAP,MAAO,kBAAgB;EAEzB,YACY,QACA,mBAAoC;AADpC,SAAA,SAAA;AACA,SAAA,oBAAA;EACT;EAEI,UAAO;AACV,QAAI,CAAC,KAAK,kBAAkB,YAAY;AACpC,WAAK,OAAO,SAAS,CAAC,mBAAmB,CAAC;AAC1C,aAAO;;AAEX,WAAO;EACX;;EAGO,cAAW;AAKd,WAAO;EACX;;;mBAtBS,mBAAgB,mBAAA,MAAA,GAAA,mBAAA,iBAAA,CAAA;AAAA;qFAAhB,mBAAgB,SAAhB,kBAAgB,WAAA,YADJ,OAAM,CAAA;AACzB,IAAO,mBAAP;;;ACFC,IAAM,cAA6B,CACtC,OACA,UACA;AACA,SAAO,OAAO,gBAAgB,EAAE,QAAO;AAC3C;AAEO,IAAM,mBAAkC,CAC3C,OACA,UACA;AACA,SAAO,OAAO,gBAAgB,EAAE,YAAW;AAC/C;;;ACXM,IAAO,oBAAP,MAAO,kBAAgB;EACzB,YACY,QACA,eAA4B;AAD5B,SAAA,SAAA;AACA,SAAA,gBAAA;EACV;EAEK,YAAY,OAA+B,KAAW;AACzD,UAAM,gBAAgB,MAAM,KAAK,eAAe;AAEhD,QAAI,KAAK,aAAa,aAAa,GAAG;AAClC,aAAO;;AAEX,SAAK,OAAO,SAAS,CAAC,UAAU,CAAC;AACjC,WAAO;EACX;EAEQ,aAAa,eAAuB;AACxC,WAAO,cAAc,SAAS,KAAK,cAAc,YAAY,SAAS,KAAK,QAAQ;EACvF;;;mBAlBS,mBAAgB,mBAAA,MAAA,GAAA,mBAAA,aAAA,CAAA;AAAA;qFAAhB,mBAAgB,SAAhB,kBAAgB,WAAA,YADH,OAAM,CAAA;AAC1B,IAAO,mBAAP;;;ACDC,IAAM,YACT,CAAC,OAA+B,UAA8B;AAC1D,SAAO,OAAO,gBAAgB,EAAE,YAAY,OAAO,MAAM,GAAG;AAChE;",
  "names": []
}
