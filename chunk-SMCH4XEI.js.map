{
  "version": 3,
  "sources": ["Modules/pages/slots/service/select-calculate.service.ts", "Modules/pages/slots/svg/event.abstract.ts", "Modules/pages/slots/svg/svg.enum.ts", "Modules/pages/slots/svg/svg.abstract.ts", "Modules/pages/slots/slot.abstract.ts", "Modules/pages/slots/components/default/default.component.ts", "Modules/pages/slots/components/zone-body/zone-body.component.ts", "Modules/pages/slots/components/zone-body/zone-body.component.html", "Modules/pages/slots/components/bar-navigation/navigation-bar.component.ts", "Modules/pages/slots/components/bar-navigation/navigation-bar.component.html", "Modules/pages/slots/components/bar-menu/menu-bar.component.ts", "Modules/pages/slots/components/bar-menu/menu-bar.component.html", "Modules/pages/slots/components/bar-content-list/content-list-bar.component.ts", "Modules/pages/slots/components/bar-content-list/content-list-bar.component.html", "Modules/pages/slots/components/bar-content-view/content-view-bar.component.ts", "Modules/pages/slots/components/bar-content-view/content-view-bar.component.html", "Modules/pages/slots/components/mat-menu/menu-mat.component.ts", "Modules/pages/slots/components/mat-menu/menu-mat.component.html", "Modules/pages/slots/components/app-chatbot/app-chatbot.component.ts", "Modules/pages/slots/components/app-chatbot/app-chatbot.component.html", "Modules/pages/slots/components/character-mp/character-mp.component.ts", "Modules/pages/slots/components/character-mp/character-mp.component.html", "Modules/pages/slots/components/character-hp/character-hp.component.ts", "Modules/pages/slots/components/character-hp/character-hp.component.html", "Modules/pages/slots/components/character-profile/character-profile.component.ts", "Modules/pages/slots/components/character-profile/character-profile.component.html", "Modules/pages/slots/components/flow-list/flow-list.component.ts", "Modules/pages/slots/components/flow-list/flow-list.component.html", "Modules/pages/slots/components/flow-item/flow-item.component.ts", "Modules/pages/slots/components/flow-item/flow-item.component.html", "Modules/pages/slots/components/flow-view/flow-view.component.ts", "Modules/pages/slots/components/flow-view/flow-view.component.html", "Modules/pages/slots/components/zone-body-line/zone-body-line.component.ts", "Modules/pages/slots/components/zone-body-line/zone-body-line.component.html", "Modules/pages/slots/items/slot-story-item/slot-story-item.component.ts", "Modules/pages/slots/items/slot-story-item/slot-story-item.component.html", "Modules/pages/slots/items/slot-story-swiper-card/slot-story-swiper-card.component.ts", "Modules/pages/slots/items/slot-story-swiper-card/slot-story-swiper-card.component.html", "Modules/pages/slots/items/slot-story-swiper-fighting/slot-story-swiper-fighting.component.ts", "Modules/pages/slots/items/slot-story-swiper-fighting/slot-story-swiper-fighting.component.html", "Modules/pages/slots/components/simulator/simulator.component.ts", "Modules/pages/slots/components/simulator/simulator.component.html", "Modules/pages/slots/items/slot-list-drag/slot-list-drag.component.ts", "Modules/pages/slots/items/slot-list-drag/slot-list-drag.component.html", "Modules/pages/slots/items/slot-item-add/slot-item-add.component.ts", "Modules/pages/slots/items/slot-item-add/slot-item-add.component.html", "Modules/pages/slots/items/slot-item-play/slot-item-play.component.ts", "Modules/pages/slots/items/slot-item-play/slot-item-play.component.html", "Modules/pages/slots/items/slot-item-pin-line/slot-item-pin-line.component.ts", "Modules/pages/slots/items/slot-item-pin-line/slot-item-pin-line.component.html", "Modules/pages/slots/items/slot-item-input/slot-item-input.component.ts", "Modules/pages/slots/items/slot-item-input/slot-item-input.component.html", "Modules/pages/slots/items/slot-item-sender/slot-item-sender.component.ts", "Modules/pages/slots/items/slot-item-sender/slot-item-sender.component.html", "Modules/pages/slots/items/slot-item-conversation/slot-item-conversation.component.ts", "Modules/pages/slots/items/slot-item-conversation/slot-item-conversation.component.html", "Modules/pages/slots/items/slot-item-prompt/slot-item-prompt.component.ts", "Modules/pages/slots/items/slot-item-prompt/slot-item-prompt.component.html", "Modules/pages/slots/items/slot-item-category/slot-item-category.component.ts", "Modules/pages/slots/items/slot-item-category/slot-item-category.component.html", "Modules/pages/slots/items/slot-story-input/slot-story-input.component.ts", "Modules/pages/slots/items/slot-story-input/slot-story-input.component.html", "Modules/pages/slots/items/slot-story-viewer/slot-story-viewer.component.ts", "Modules/pages/slots/items/slot-story-viewer/slot-story-viewer.component.html", "Modules/pages/slots/items/forms/slot-form-input/slot-form-input.component.ts", "Modules/pages/slots/items/forms/slot-form-input/slot-form-input.component.html", "Modules/pages/slots/items/forms/slot-form-textarea/slot-form-textarea.component.ts", "Modules/pages/slots/items/forms/slot-form-textarea/slot-form-textarea.component.html", "Modules/pages/slots/items/slot-story-ai-sender/slot-story-ai-sender.component.ts", "Modules/pages/slots/items/slot-story-ai-sender/slot-story-ai-sender.component.html", "Modules/pages/slots/items/slot-story-save-sender/slot-story-save-sender.component.ts", "Modules/pages/slots/items/slot-story-save-sender/slot-story-save-sender.component.html", "Modules/pages/slots/items/slot-item-character/slot-item-character.component.ts", "Modules/pages/slots/items/slot-item-character/slot-item-character.component.html", "Modules/pages/slots/items/slot-character-input/slot-character-input.component.ts", "Modules/pages/slots/items/slot-character-input/slot-character-input.component.html", "Modules/pages/slots/items/forms/slot-gemini-input/slot-gemini-input.component.ts", "Modules/pages/slots/items/forms/slot-gemini-input/slot-gemini-input.component.html", "Modules/pages/slots/components/babylon-vector-game/babylon-vector-game.component.ts", "Modules/pages/slots/components/babylon-vector-game/babylon-vector-game.component.html", "Modules/pages/slots/service/docking.service.ts", "Modules/pages/slots/service/move.service.ts", "Modules/pages/slots/service/link.service.ts", "Modules/pages/slots/slot/slot.component.ts", "Modules/pages/slots/slot/slot.component.html", "Modules/pages/slots/slot-routing.module.ts", "Modules/pages/slots/square/square.component.ts", "Modules/pages/slots/square/square.component.html", "Modules/pages/slots/components/linear-algebra/linear-algebra.component.ts", "Modules/pages/slots/components/linear-algebra/linear-algebra.component.html", "Modules/pages/slots/components/fighter/fighter.component.ts", "Modules/pages/slots/components/fighter/fighter.component.html", "Modules/pages/slots/form/dynamic-form/custom-validator.ts", "Modules/pages/slots/form/dynamic-form/dynamic-form.component.ts", "Modules/pages/slots/form/dynamic-form/dynamic-form.component.html", "Modules/pages/slots/form/form.abstract.ts", "Modules/pages/slots/form/textarea/textarea.component.ts", "Modules/pages/slots/form/textarea/textarea.component.html", "Modules/pages/slots/form/input/input.component.ts", "Modules/pages/slots/form/input/input.component.html", "Modules/pages/slots/form/password/password.component.ts", "Modules/pages/slots/form/password/password.component.html", "Modules/pages/slots/form/select/select.component.ts", "Modules/pages/slots/form/select/select.component.html", "Modules/pages/slots/form/radio-button/radio-button.component.ts", "Modules/pages/slots/form/radio-button/radio-button.component.html", "Modules/pages/slots/form/date-picker/date-picker.component.ts", "Modules/pages/slots/form/date-picker/date-picker.component.html", "Modules/pages/slots/components/babylon-vector/babylon-vector.component.ts", "Modules/pages/slots/components/babylon-vector/babylon-vector.component.html", "Modules/pages/slots/items/slot-item-sketch-sender/slot-item-sketch-sender.component.ts", "Modules/pages/slots/items/slot-item-sketch-sender/slot-item-sketch-sender.component.html", "Modules/pages/slots/items/slot-story-swiper/slot-story-swiper.component.ts", "Modules/pages/slots/items/slot-story-swiper/slot-story-swiper.component.html", "Modules/pages/slots/items/slot-story-swiper-cube/slot-story-swiper-cube.component.ts", "Modules/pages/slots/items/slot-story-swiper-cube/slot-story-swiper-cube.component.html", "Modules/pages/slots/items/slot-story-swiper-fighting/clan-battle-visual/clan-battle-visual.component.ts", "Modules/pages/slots/items/slot-story-swiper-fighting/clan-battle-visual/clan-battle-visual.component.html", "Modules/pages/slots/slot.module.ts"],
  "sourcesContent": ["import { Injectable } from \"@angular/core\";\n\nexport  interface Square {\n    index: number;\n    isSelected: boolean;\n    size: any;\n    character?: any;\n    matched: boolean;\n    instance?: any;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class SelectCalculateService {\n    totalSquares!: number; // 총 사각형 개수를 동적으로 계산\n\n    squares: Square[] = [];\n    squareSize: number = 50; // 사각형의 기본 크기\n    startHeight: number = 64+40+10; // 상단 눈금자의 높이\n    startWidth: number = 0; // 좌측 눈금자의 너비\n\n    calcurateHeight = 50;\n\n    borderSize: number = 0.1; // 테두리 크기\n    mouseX: number = 0;\n    mouseY: number = 0;\n    horizontalTicks: number[] = [];\n    verticalTicks: number[] = [];\n\n    squareWidth!: number;\n    squareHeight!: number;\n\n    currentSquareIndex: number | null = null;\n    zoomLevel: number = 1; // 줌 수준 초기값\n\n    fontSize: number = 14; // 숫자의 폰트 크기를 조절하기 위한 새 입력 프로퍼티\n\n    isDragging: boolean = false;\n    dragStartIndex: any;\n\n    dragStart: { x: number; y: number } | null = null;\n    dragEnd: { x: number; y: number } | null = null;\n    dragging: boolean = false;\n\n    draggedColumns = 0;\n    draggedRows = 0;\n    numColumns = 21;\n    containerWidth = this.numColumns * this.squareSize;\n    numRows = 15;\n    sizeInfo: any = {};\n    \n      // 마우스 위치를 기반으로 현재 사각형의 인덱스를 계산하는 함수\n  calculateCurrentSquareIndex(x: number, y: number) {\n\n    // 마우스 위치에서 눈금자의 영역을 제외\n    const effectiveX = x - this.startWidth;\n    const effectiveY = y - this.startHeight;\n\n    console.log('calculateCurrentSquareIndex', this.startWidth)\n\n    if (effectiveX < 0 || effectiveY < 0) {\n      this.currentSquareIndex = null;\n      return;\n    }\n\n    // 줌 수준을 고려하여 마우스 위치에 해당하는 열과 행 계산\n    const column = Math.floor(effectiveX / this.squareSize);\n    const row = Math.floor(effectiveY / this.squareSize);\n\n    // 화면에 표시되는 열의 총 개수를 기반으로 현재 인덱스 계산\n    //this.numColumns = Math.floor((window.innerWidth - this.startWidth) / this.squareSize);\n    this.currentSquareIndex = (row * this.numColumns) + column;\n  }\n\n  // 줌 수준에 따라 사각형의 크기와 화면에 표시될 사각형의 총 개수를 조정하는 함수\n  calculateSquares() {\n    const baseSquareSize = 50; // 사각형의 기본 크기\n    // 줌 수준에 따라 사각형의 실제 크기를 조정\n    this.squareSize = baseSquareSize / this.zoomLevel;\n    this.fontSize = this.squareSize / 3;\n\n    // 총 사각형의 개수\n    const totalSquares = this.numColumns * this.numRows;\n    // 사각형 배열 생성\n    this.squares = Array.from({ length: totalSquares }, (_, index): Square => {\n      return {\n        index: index,\n        isSelected: false,\n        matched : false,\n        size : { width : this.squareSize, height: this.squareSize, position : this.getSquareSize(index)}\n      };\n    });\n  }\n\n  calculateDragBoxStyle() {\n\n    let dragStartX = 0;\n    let dragStartY = 0;\n    let dragEndX = 0;\n    let dragEndY = 0;\n    \n    if (this.dragStart) {\n      dragStartX = this.dragStart.x - this.startWidth; \n      dragStartY = this.dragStart.y;\n    }\n    if (this.dragEnd) {\n      dragEndX = this.dragEnd.x - this.startWidth; \n      dragEndY = this.dragEnd.y - this.calcurateHeight;\n    }\n    \n    const position = {\n      left: Math.min(dragStartX, dragEndX) + 'px',\n      top: Math.min(dragStartY, dragEndY) + 'px',\n    };\n    const size = {\n      width: Math.abs(dragEndX - dragStartX) + 'px',\n      height: Math.abs(dragEndY - dragStartY) + 'px',\n    };\n\n    return { ...position, ...size };\n  }\n\n  getSquareSize(index:number) {\n      const squareX = (index % this.numColumns) * this.squareSize + this.startWidth;\n      const squareY = Math.floor(index / this.numColumns) * this.squareSize + this.startHeight;\n      return {x : squareX, y: squareY }\n  }\n\n  // 드래그한 영역의 컬럼 수를 계산하는 메서드\n  calculateDraggedColumns(dragStartX: number, dragEndX: number): number {\n    const startColumn = Math.floor((dragStartX - this.startWidth) / this.squareSize);\n    const endColumn = Math.floor((dragEndX - this.startWidth) / this.squareSize);\n    return Math.abs(endColumn - startColumn) + 1;\n  }\n\n  // 드래그한 영역의 행 수를 계산하는 메서드\n  calculateDraggedRows(dragStartY: number, dragEndY: number): number {\n    const startY = dragStartY - this.startHeight;\n    const endY = dragEndY - this.startHeight;\n    const startRow = Math.floor(startY / this.squareSize);\n    const endRow = Math.floor(endY / this.squareSize);\n    return Math.abs(endRow - startRow) + 1;\n  }\n\n  showSelectedSquareIndices(): void {\n    const selectedIndices = this.squares\n      .filter(square => square.isSelected) // 선택된 사각형 필터링\n      .map(square => square.index); // 인덱스 추출\n\n    this.sizeInfo.selectedIndices = selectedIndices;\n    // console.log('Selected Squares Indices:', selectedIndices);\n  }\n\n  calculateSelectedAreaDimensions(): { width: number, height: number } {\n    // 선택된 사각형이 없는 경우\n    if (this.squares.every(square => !square.isSelected)) {\n      return { width: 0, height: 0 };\n    }\n\n    // 선택된 사각형의 인덱스를 이용하여 해당 사각형의 행과 열을 계산\n    const selectedSquares = this.squares.filter(square => square.isSelected).map(square => {\n      return {\n        row: Math.floor(square.index / this.numColumns),\n        column: square.index % this.numColumns\n      };\n    });\n\n    // 가장 왼쪽, 오른쪽, 위쪽, 아래쪽에 위치한 사각형의 행과 열을 찾음\n    const minColumn = Math.min(...selectedSquares.map(square => square.column));\n    const maxColumn = Math.max(...selectedSquares.map(square => square.column));\n    const minRow = Math.min(...selectedSquares.map(square => square.row));\n    const maxRow = Math.max(...selectedSquares.map(square => square.row));\n\n    // 선택된 영역의 총 너비와 높이 계산\n    const width = (maxColumn - minColumn + 1) * this.squareSize;\n    const height = (maxRow - minRow + 1) * this.squareSize;\n\n    return { width, height };\n  }\n\n  showSelectedAreaDimensions() {\n    const { width, height } = this.calculateSelectedAreaDimensions();\n    this.sizeInfo.size  = {width: width, height: height};\n\n    // console.log(`Selected Area Width: ${width}px, Height: ${height}px`);\n  }\n\n  calculateSelectedAreaCorners(): { topLeft: { x: number, y: number }, topRight: { x: number, y: number }, bottomLeft: { x: number, y: number }, bottomRight: { x: number, y: number } } {\n    // 선택된 사각형들의 위치를 계산\n    const selectedSquares = this.squares.filter(square => square.isSelected).map(square => {\n      return {\n        row: Math.floor(square.index / this.numColumns),\n        column: square.index % this.numColumns\n      };\n    });\n  \n    // 선택된 사각형이 없는 경우\n    if (selectedSquares.length === 0) {\n      return { topLeft: {x: 0, y: 0}, topRight: {x: 0, y: 0}, bottomLeft: {x: 0, y: 0}, bottomRight: {x: 0, y: 0} };\n    }\n  \n    // 모서리 사각형의 위치를 찾음\n    const minColumn = Math.min(...selectedSquares.map(square => square.column));\n    const maxColumn = Math.max(...selectedSquares.map(square => square.column));\n    const minRow = Math.min(...selectedSquares.map(square => square.row));\n    const maxRow = Math.max(...selectedSquares.map(square => square.row));\n  \n    // 각 모서리의 좌표 계산\n    const topLeft = { x: minColumn * this.squareSize, y: minRow * this.squareSize };\n    const topRight = { x: (maxColumn + 1) * this.squareSize , y: minRow * this.squareSize };\n    const bottomLeft = { x: minColumn * this.squareSize, y: (maxRow + 1) * this.squareSize };\n    const bottomRight = { x: (maxColumn + 1) * this.squareSize, y: (maxRow + 1) * this.squareSize };\n  \n    return { topLeft, topRight, bottomLeft, bottomRight };\n  }\n\n  showSelectedAreaCorners() {\n    const corners = this.calculateSelectedAreaCorners();\n    // console.log(`Top Left Corner: (${corners.topLeft.x}, ${corners.topLeft.y})`);\n    // console.log(`Top Right Corner: (${corners.topRight.x}, ${corners.topRight.y})`);\n    // console.log(`Bottom Left Corner: (${corners.bottomLeft.x}, ${corners.bottomLeft.y})`);\n    // console.log(`Bottom Right Corner: (${corners.bottomRight.x}, ${corners.bottomRight.y})`);\n    this.sizeInfo.corners = corners;\n    this.sizeInfo.size.position =  { x : corners.topLeft.x, y: corners.topLeft.y }\n  }\n\n  public selection() {\n    if (!this.dragStart || !this.dragEnd) return;\n    // const dragStartX = Math.min(this.dragStart.x, this.dragEnd.x);\n    // const dragEndX = Math.max(this.dragStart.x, this.dragEnd.x);\n    // const dragStartY = Math.min(this.dragStart.y, this.dragEnd.y);\n    // const dragEndY = Math.max(this.dragStart.y, this.dragEnd.y) - this.calcurateHeight;\n\n    const dragStartX = Math.min(this.dragStart.x - this.startWidth, this.dragEnd.x - this.startWidth);\n    const dragEndX = Math.max(this.dragStart.x - this.startWidth, this.dragEnd.x - this.startWidth);\n    const dragStartY = Math.min(this.dragStart.y, this.dragEnd.y);\n    const dragEndY = Math.max(this.dragStart.y, this.dragEnd.y) - this.calcurateHeight;\n    \n    // 드래그한 영역의 컬럼과 행 개수 계산\n    this.draggedColumns = this.calculateDraggedColumns(dragStartX, dragEndX);\n    this.draggedRows = this.calculateDraggedRows(dragStartY, dragEndY);\n\n    this.squares.forEach(square => {\n      const squareX = (square.index % this.numColumns) * this.squareSize;\n      const squareY = Math.floor(square.index / this.numColumns) * this.squareSize;\n      const squareEndX = squareX + this.squareSize;\n      const squareEndY = squareY + this.squareSize;\n      \n      if (squareX < dragEndX && squareEndX > dragStartX && squareY < dragEndY && squareEndY > dragStartY) {\n        square.isSelected = !square.isSelected; // Toggle the selection status\n      }\n    });\n\n    // Reset drag start and end points\n    this.dragStart = null;\n    this.dragEnd = null;\n\n    this.showSelectedSquareIndices();\n    this.showSelectedAreaDimensions();\n    this.showSelectedAreaCorners();\n  }\n\n}", "import { Directive, EventEmitter, Output } from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\nimport { DataAbstract } from \"../../../core/classes/data.abstract\";\nimport { GlobalService } from \"../../../core/services/global.service\";\n\n\n@Directive()\nexport abstract class EventAbstract extends DataAbstract {\n    @Output() override loaded: EventEmitter<any> = new EventEmitter<any>();\n    @Output() changed: EventEmitter<any> = new EventEmitter<any>();\n    @Output() delegate: EventEmitter<any> = new EventEmitter<any>();\n\n    public dataSubscriber!: Subscription;\n    public timerSubscriber!: Subscription;\n    constructor(\n        protected override globalService: GlobalService\n    ) { \n        super()\n    }\n\n    public reduxRemove() {\n    }\n\n    public reduxData() {\n    }\n    \n    protected add(data?: data) { };\n    protected delete() { };\n    protected sizeWith(data?: data) { };\n    protected override resize(data?: data) { };\n}", "export enum DataType {\n    add = \"add\",\n    delete = \"delete\",\n    none = \"none\",\n    confirm = \"confirm\",\n    sizeWith = \"sizeWith\",\n    resize = \"resize\",\n}\n\nexport enum DrawColor {\n    transparent = 'transparent',\n    none = 'none',\n    white = 'white',\n    White1 = '#F6F6F6',\n    black = 'black',\n    black1 = '#202328',\n    black2 = '#272b30',\n    dark1 = '#2c2d30',\n    dark2 = '#1e1f21',\n    gray1 = '#EAEAEA',\n    gray2 = '#D5D5D5',\n    gray3 = '#BDBDBD',\n    gray4 = '#8C8C8C',\n    gray5 = '#5D5D5D',\n    gray6 = '#353535',\n    gray7 = '#282828',\n    gray8 = '#161616',\n    blue = '#4374D9',\n    sky = '#5CD1E5',\n    green = '#46B29D',\n    red = '#CC3D3D',\n    brown = '#783712',\n    yellow = '#FFBB00',\n    glassBack = '#BAE9F9',\n    Math1 = '#FF5E00',\n    Math4 = '#D941C5',\n    Math5 = '#A566FF',\n    Math6 = '#F361A6',\n    Math7 = '#f44336',\n    Math9 = '#6799FF',\n    Math10= ' #46B29D',\n    Step1 = '#F15F5F',\n    Step2 ='#F29661',\n    Step3 ='#F2CB61',\n    Step4 ='#E5D85C',\n    Step5 ='#BCE55C',\n    Step6 ='#86E57F',\n    Step9 ='#6B66FF',\n    Step11='#F361DC',\n}\n\nexport enum DrawType {\n    rect = 'rect',\n    ellipse = 'ellipse',\n    image = 'image',\n    circle = 'circle',\n    text = 'text',\n    path = 'path',\n    line = 'line',\n    foreignObject = 'foreignObject',\n    div = 'xhtml:div',\n}\n\nexport enum EventType {\n    click = 'click',\n    drag_start = 'start',\n    drag_dragging = 'drag',\n    drag_end = 'end',\n}", "import { ComponentRef, Directive, ElementRef, ViewChild, ViewContainerRef } from '@angular/core';\nimport * as d3 from 'd3';\nimport { EventAbstract } from './event.abstract';\nimport { DrawColor, DrawType, EventType } from './svg.enum';\nimport { IDrawAttribute, IPosition, ISize, IState } from './svg.interface';\nimport { GlobalService } from '../../../core/services/global.service';\n\n@Directive()\nexport abstract class SvgAbstract extends EventAbstract {\n  @ViewChild('canvas', { static: true })\n  public canvas!: ElementRef<svg>;\n\n  @ViewChild('container', { read: ViewContainerRef, static: true })\n  public override container!: ViewContainerRef;\n  public componentSVG!: svg;\n  public backgroundSVG!: svg;\n  public backgroundLineSVG!: svg;\n  public forwardGroundSVG!: svg;\n  public title = \"\";\n  public mousePoint!: any;\n  public childComponentRefs: Array<ComponentRef<SvgAbstract>> = [];\n  public parentComponent!: SvgAbstract;\n  public parentGroup!: svg;\n  public currentChildRef!: ComponentRef<SvgAbstract>;\n  public currentCard: svg;\n  public currentText: svg;\n  public initData: any;\n  public linePoints = [[0, 0], [0, 0], [100, 100]];\n  public isCurve = true;\n  protected eventState: IState = {\n    x: 0,\n    y: 0,\n    tempX: 0,\n    tempY: 0,\n    active: false,\n  };\n  public position: IPosition = { x: 0, y: 0 };\n  protected zoomInit = { x: 0, y: 0, s: 1 };\n\n  // initData 따로 정리 필요\n  public size: ISize = { width: 100, height: 100 };\n\n  constructor(\n    protected override globalService: GlobalService\n  ) {\n    super(globalService);\n  }\n\n  public initSVG() {\n    this.componentSVG = d3.select(this.canvas.nativeElement);\n    this.initBackground();\n  }\n\n  public initSvgWithZoom() {\n    this.initSVG();\n    const zoom = { x: 0, y: 0, k: 1, isZoom: true };\n    const transform = d3.zoomIdentity as any;\n    transform.x = zoom.x;\n    transform.y = zoom.y;\n    transform.k = zoom.k;\n\n    const d3Zoom = d3\n      .zoom()\n      .scaleExtent([0.05, 50])\n      .extent([\n        [0, 0],\n        [300, 300],\n      ])\n      .on('zoom', (event: any) => {\n        if (zoom.isZoom) {\n          this.zoomInit.s = event.transform.k;\n          this.zoomInit.x = event.transform.x;\n          this.zoomInit.y = event.transform.y;\n         // this.globalService.svgService.zoomInit = this.zoomInit;\n          this.forwardGroundSVG.attr(\n            'transform',\n            `translate(${this.zoomInit.x}, ${this.zoomInit.y})scale(${this.zoomInit.s})`\n          );\n        }\n      });\n\n    this.componentSVG\n      .call(d3Zoom)\n      .call(d3Zoom.transform, transform)\n      .on('dblclick.zoom', null);\n  }\n\n  public initBackground() {\n    this.backgroundSVG = this.createGroup(this.componentSVG, {x:0, y:0}, 'back');\n    this.forwardGroundSVG = this.createGroup(this.componentSVG, {x:0, y:0}, 'forward');\n    this.forwardGroundSVG.line = this.createGroup(this.forwardGroundSVG, {x:0, y:0}, 'forwardLine'+0);\n    this.forwardGroundSVG.node = this.createGroup(this.forwardGroundSVG, {x:0, y:0}, 'forwardNode');\n  }\n\n  public loadedChild() { }\n  public createCard(position?: IPosition) { }\n\n  public getRandomColor() {\n    var letters = \"0123456789ABCDEF\";\n    var color = \"#\";\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  public getRandomNumberBetween(index:number): number {\n    return Math.floor(Math.random() * index +1);\n  }\n\n  public getRandomGrayColor(): string {\n    const value = Math.floor(Math.random() * 256).toString(16); // 0 ~ 255 사이의 값 생성 후 16진수 변환\n    const gray = value.padStart(2, '0'); // 16진수 값이 한 자리일 경우 앞에 0 추가\n    return '#' + gray + gray + gray; // #RRGGBB 형태로 반환 (R, G, B 값이 모두 같으면 회색)\n  }\n\npublic colorPalette = [\n  '#E91E63', // 핫핑크\n  '#9C27B0', // 진보라\n  '#673AB7', // 보라\n  '#3F51B5', // 남색\n  '#2196F3', // 파랑\n  '#03A9F4', // 하늘색\n  '#00BCD4', // 청록\n  '#009688', // 녹색\n  '#4CAF50', // 연두\n  '#8BC34A', // 라임\n  '#CDDC39', // 연노랑\n  '#FFEB3B', // 노랑\n  '#FFC107', // 주황\n  '#FF9800', // 진주황\n  '#FF5722', // 다홍\n  '#795548', // 갈색\n  '#607D8B', // 회색\n  '#9E9E9E', // 연회색\n  '#212121', // 진회색\n  '#000000'  // 검정\n];\n\n  public getBrighterColorByIndex(index: number, baseColor = '#000000'): string {\n\n    \n    const maxIndex = 10; // 최대 인덱스 값 (밝기 범위 조절)\n    const brightnessStep = 255 / maxIndex; // 밝기 증가 단계\n  \n    // 입력된 인덱스 값을 0 ~ maxIndex 범위로 제한\n    const clampedIndex = Math.max(0, Math.min(index, maxIndex));\n  \n    // 밝기 값 계산\n    const brightness = Math.round(clampedIndex * brightnessStep);\n  \n    // RGB 색상 값 계산\n    const r = parseInt(baseColor.slice(1, 3), 16);\n    const g = parseInt(baseColor.slice(3, 5), 16);\n    const b = parseInt(baseColor.slice(5, 7), 16);\n  \n    const newR = Math.min(r + brightness, 255); // 밝기 증가\n    const newG = Math.min(g + brightness, 255); // 밝기 증가\n    const newB = Math.min(b + brightness, 255); // 밝기 증가\n  \n    // RGB 값을 16진수 문자열로 변환하여 색상 코드 생성\n    const newColor = `#${newR.toString(16).padStart(2, '0')}${newG.toString(16).padStart(2, '0')}${newB.toString(16).padStart(2, '0')}`;\n  \n    return newColor;\n  }\n\n  public sizeSVG(width: number, height: number) {\n    this.componentSVG.attr('height', height);\n    this.componentSVG.attr('width', width);\n  }\n\n  public createGroup(entity: svg, position: IPosition = { x: 0, y: 0 }, name?: string) {\n    const group = entity\n      .append('g')\n      .attr('transform', `translate(${position.x}, ${position.y})`);\n    group.attr('id', name);\n    return group;\n  }\n\n  public createSVG(entity: svg, values: IDrawAttribute): any {\n    const item = entity\n      .append(values.type)\n      .attr('id', values.id)\n      .attr('class', values.class)\n      .attr('xlink:href', values.href)\n      .attr('d', values.geometry)\n      .attr('x', values.x)\n      .attr('x1', values.x1)\n      .attr('x2', values.x2)\n      .attr('y', values.y)\n      .attr('y1', values.y1)\n      .attr('y2', values.y2)\n      .attr('cx', values.cx)\n      .attr('cy', values.cy)\n      .attr('r', values.r)\n      .attr('rx', values.rx)\n      .attr('ry', values.ry)\n      .attr('width', values.width)\n      .attr('height', values.height)\n      .attr('fill', values.fill)\n      .attr('filter', values.filter)\n      .attr('clip-path', values.clipPath)\n      .attr('stroke', values.stroke)\n      .attr('stroke-dasharray', values.strokeDasharray)\n      .attr('stroke-width', values.strokeWidth)\n      .attr('stroke-linecap', values.strokeLinecap)\n      .attr('stroke-linejoin', values.strokeLinejoin)\n      .attr('stroke-miterlimit', values.strokeMiterlimit)\n      .attr('font-size', values.fontSize)\n      .attr('font-weight', values.fontWeight)\n      .attr('opacity', values.opacity)\n      .attr('fill-opacity', values.fillOpacity)\n      .attr(\n        'transform',\n        `translate(${values.translate ? values.translate.x : 0}, ${values.translate ? values.translate.y : 0\n        })`\n      );\n\n    if (values.type === DrawType.text) {\n      item.text(values.text);\n    }\n    return item;\n  }\n\n  protected select(entity: any, valueFunction?: any) {\n    entity.on(EventType.click, (event: any) => {\n      valueFunction(EventType.click);\n    });\n  }\n\n  protected drag(\n    entity: any,\n    callback: Function = () => { },\n    action: Function = this.dragEvent.bind(this, entity, callback)\n  ) {\n    entity.call(\n      d3\n        .drag()\n        .on(EventType.drag_start, (event: any) => {\n          action(EventType.drag_start, event);\n        })\n        .on(EventType.drag_dragging, (event: any) => {\n          action(EventType.drag_dragging, event);\n        })\n        .on(EventType.drag_end, (event: any) => {\n          action(EventType.drag_end, event);\n        })\n    );\n    entity.attr('cursor', 'pointer');\n  }\n\n  public dragEvent(target: any, action: any, type: EventType, event: any) {\n    switch (type) {\n      case EventType.drag_start:\n        this.currentCard.attr('fill', this.getRandomColor());\n        target.node().parentNode.parentNode.appendChild(this.componentSVG.node());\n        this.mousePoint = this.getPointer(event, target);\n        break;\n      case EventType.drag_dragging:\n        const x = event.x - this.mousePoint.x;\n        const y = event.y - this.mousePoint.y;\n        this.eventState.x = x;\n        this.eventState.y = y;\n        this.position.x = this.eventState.x;\n        this.position.y = this.eventState.y;\n        target.attr('transform', `translate(${x}, ${y})`);\n        if (action) {\n          action();\n        }\n        break;\n      case EventType.drag_end:\n        break;\n    }\n  }\n\n  protected getPointer(event: any, node: any, minus = { x: 0, y: 0 }) {\n    const pointer = d3.pointers(event, node.node())[0];\n    return { x: pointer[0] - minus.x, y: pointer[1] - minus.y };\n  }\n\n  protected setInitData() {\n    this.size = this.initData?.size ?? this.size;\n    this.position = this.initData?.position ?? this.position;\n  }\n\n  public setMultiTextLimit(target: svg, text: data, width: number, lineH = 25, x = 0, y = 0) {\n    if (text == null) {\n      return 0;\n    }\n    const words = text.split(/\\s+/).reverse();\n    let word, line = [], lineNumber = 0, lineHeight = 1.1;\n    let tspan = target.text(null).append(\"tspan\");\n    while (word = words.pop()) {\n\n\n      line.push(word);\n      tspan.text(line.join(\" \"));\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop();\n        tspan.text(line.join(\" \"));\n        line = [word];\n        lineNumber++;\n        if(lineNumber < 2) {\n          const height = (lineNumber * lineH) + y;\n          tspan = target.append(\"tspan\").attr(\"x\", x).attr(\"y\", height).text(word);\n        }\n      }\n    }\n    return lineNumber;\n  }\n\n  public setMultiText(target: svg, text: data, width: number, lineH = 25, x = 0, y = 0) {\n    if (text == null) {\n      return 0;\n    }\n    const words = text.split(/\\s+/).reverse();\n\n    let isBr = false;\n    let word, line = [], lineNumber = 0, lineHeight = 1.1;\n    let tspan = target.text(null).append(\"tspan\");\n    while (word = words.pop()) {\n\n      if(word === '|') {\n        lineNumber++;\n        isBr = true;\n      }\n\n      line.push(word);\n      tspan.text(line.join(\" \"));\n      if (tspan.node().getComputedTextLength() > width || isBr) {\n        isBr = false;\n        line.pop();\n        tspan.text(line.join(\" \"));\n        line = [word.replaceAll('|', '')];\n\n        lineNumber++;\n\n        const height = (lineNumber * lineH) + y;\n        tspan = target.append(\"tspan\").attr(\"x\", x).attr(\"y\", height).text(word);\n      }\n    }\n    return lineNumber;\n  }\n\n  public setTranslate(entity: any, x: number, y: number) {\n    if (entity == null) return;\n    return entity.attr(\"transform\", `translate(${x},${y})`);\n  }\n\n  public getStartXAxis(target: any, baseTarget: any, min: number) {\n   // const sum = 1 / this.globalService.svgService.zoomInit.s;\n    const sum = 1;\n    const targetWidth = (target.node().getBoundingClientRect().width * sum) / 2,\n      center = (baseTarget.node().getBoundingClientRect().width * sum) / 2,\n      myWidth = center - targetWidth;\n    if (myWidth < min) {\n      return min;\n    } else {\n      return myWidth;\n    }\n  }\n\n  public setItemCenter(target: any, baseTarget: any, x: number = 0, y: number = 0, min: number = 0) {\n    const xWidth = this.getStartXAxis(target, baseTarget, min);\n    target.attr(\"transform\", `translate(${xWidth + x},${y})`);\n    return xWidth + x;\n  }\n\n  public getLinePoint(end: any, start: any, isOpposite:boolean) {\n    let x,y,endx,endy;\n    \n    if(isOpposite) {\n      endx = start.x + this.position.x;\n      endy = start.y + this.position.y;\n      x = end.x + start.x;\n      y = end.y + start.y;\n    } else {\n      x = start.x + this.position.x;\n      y = start.y + this.position.y;\n      endx = end.x + start.x;\n      endy = end.y + start.y;\n    }\n\n    this.linePoints[0] = [x, y];\n    this.linePoints[2] = [endx, endy];\n\n    if (this.isCurve) {\n      const length = endx - x;\n      const centerX = x + (length / 50);\n      const centerY = endy;\n      this.linePoints[1] = [centerX, centerY];\n    } else {\n      this.linePoints[1] = [x, y];\n    }\n  }\n\n  public createCurveLine(end: any, start: any, isOpposite:boolean = false) {\n    this.getLinePoint(end, start, isOpposite);\n    const lineGenerator: any = d3.line().curve(d3.curveBasis);\n    const pathData = lineGenerator(this.linePoints);\n    const lineNode = this.createSVG(this.forwardGroundSVG.line, {\n      type: DrawType.path,\n      id: 'nodeLine',\n      geometry: pathData,\n      fill: DrawColor.transparent,\n      strokeWidth: 6,\n      stroke: this.getRandomColor(),\n      opacity: 0.7\n    });\n    const nodeBack:svg = d3.select('#forwardLine0').node();\n    nodeBack.appendChild(lineNode.node());\n  }\n\n  public deletelines() {\n    d3.selectAll('#nodeLine').remove();\n  }\n\n}", "import { Directive, OnInit } from '@angular/core';\nimport { SlotDefaultComponent } from './components/default/default.component';\nimport { SvgAbstract } from './svg/svg.abstract';\nimport { NullCheckParameters } from '../../../src/app/app.component';\n\n@Directive()\nexport abstract class SlotAbstract extends SvgAbstract {\n\n  formValue = 'contentValue';\n\n  public parentStyle = {\n    position: 'absolute',\n    zIndex: '999',\n    top: '0px',\n    left: '0px',\n  };\n\n  // public style = {\n  //   width: '100px',\n  //   height: '100px',\n  //   backdropFilter: '',\n  //   backgroundColor: 'white',\n  //   position: 'absolute',\n  //   overflow: 'hidden',\n  //   textOverflow: 'ellipsis',\n  //   whiteSpace: 'nowrap',\n  //   top: '10px',\n  //   left: '40px',\n  //   opacity: '0.9',\n  //   border: '0.1px solid black',\n  //   overflowX: 'hidden'\n  // };\n\n  public style = {\n    width: '100px',\n    height: '100px',\n    backdropFilter: 'blur(10px)',\n    backgroundColor: 'rgba(255, 255, 255, 0.3)',\n    position: 'absolute',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    top: '10px',\n    left: '40px',\n    opacity: '0.9',\n    border: '0.1px solid black',\n    overflowX: 'hidden'\n  };\n\n  public layerStyle = {\n    width: '100px',\n    height: '100px',\n    position: 'absolute',\n    overflow: 'hidden',\n    top: '10px',\n    left: '40px',\n  };\n\n  public override dataInit(): void {\n    this.title = `${this.data.title ?? 'NONE'}`;\n    this.style.width = `${this.data.size.width}px`;\n    this.style.height = `${this.data.size.height}px`;\n    this.style.left = `${this.data.size.position.x}px`;\n    this.style.top = `${this.data.size.position.y}px`;\n    this.parentStyle.top = `${this.data.size.position.y + 3}px`;\n    this.parentStyle.left = `${this.data.size.position.x + 5}px`;\n\n    this.layerStyle.width = `${this.data.size.width}px`;\n    this.layerStyle.height = `${this.data.size.height}px`;\n    this.layerStyle.left = `${this.data.size.position.x}px`;\n    this.layerStyle.top = `${this.data.size.position.y}px`;\n  }\n\n  public bodyBind() {\n    if (this.globalService.slotService.isBodyBind || this.data.isBodyBind) {\n      this.globalService.slotService.bodyZoneInstance.bind(this);\n      // this.setBodySlot(this.globalService.slotService.isBodyMatch);\n    }\n  }\n\n  public bindInstance() {\n    this.data.selectedIndices.forEach((d: number) => {\n      this.globalService.slotService.dockingService.slots.selectService.squares[\n        d\n      ].instance.bind(this);\n    });\n    this.bodyBind();\n  }\n\n  public loadSlot() {\n\n    this.globalService.slotService.dockingService.clearAllComponent();\n\n    const slot = localStorage.getItem('slot') as string;\n    if(!slot) return;\n\n    this.globalService.slotService.dockingService.slotData = JSON.parse(slot);\n    this.globalService.slotService.dockingService.slotData?.forEach(\n      (d: any) => {\n        const zoneName = 'default';\n        this.globalService.slotService.dockingService.createComponent(\n          zoneName,\n          SlotDefaultComponent,\n          d\n        );\n      }\n    );\n    this.loadBodySlot();\n  }\n\n  public loadBodySlot() {\n    const bodyData = JSON.parse(localStorage.getItem('slotBody') as string);\n    console.log('slotBody data', bodyData);\n    this.globalService.slotService.dockingService.bodySlotData = bodyData ?? [];\n    bodyData\n      ?.filter(\n        (d: any) => d.key === this.globalService.slotService.currentBodyKey\n      )\n      ?.forEach((d: any) => {\n        const zoneName = 'body';\n        this.globalService.slotService.dockingService.createComponent(\n          zoneName,\n          SlotDefaultComponent,\n          d.value\n        );\n      });\n  }\n\n  public clearSlot() {\n    this.globalService.slotService.dockingService.slotData = [];\n    localStorage.setItem(\n      'slot',\n      JSON.stringify(this.globalService.slotService.dockingService.slotData)\n    );\n    this.globalService.httpService.snackBar('초기화 되었습니다.');\n  }\n\n  public clearBodySlotByIndex(key: string) {\n    this.globalService.slotService.dockingService.bodySlotData =\n      this.globalService.slotService.dockingService.bodySlotData?.filter(\n        (d: any) => d.key !== key\n      );\n    localStorage.setItem(\n      'slotBody',\n      JSON.stringify(this.globalService.slotService.dockingService.bodySlotData)\n    );\n    this.globalService.httpService.snackBar(\n      `${key} Body Slot 초기화 되었습니다.`\n    );\n  }\n\n  public clearBodySlot() {\n    this.globalService.slotService.dockingService.bodySlotData = [];\n    localStorage.setItem(\n      'slotBody',\n      JSON.stringify(this.globalService.slotService.dockingService.bodySlotData)\n    );\n  }\n\n  public setSlot(data: any) {\n    if (data.isBodyBind) {\n      this.setBodySlot(this.globalService.slotService.isBodyMatch, data);\n    } else {\n      this.globalService.slotService.dockingService.slotData =\n        this.globalService.slotService.dockingService.slotData ?? [];\n      this.globalService.slotService.dockingService.slotData.push(\n        structuredClone(data)\n      );\n      localStorage.setItem(\n        'slot',\n        this.globalService.slotService.dockingService.slotData.stringify()\n      );\n    }\n  }\n\n  public removeBodySlotByKey() {\n    const updatedBodySlotData =\n      this.globalService.slotService.dockingService.bodySlotData.filter(\n        (item) => item.key !== this.globalService.slotService.currentBodyKey\n      );\n    this.globalService.slotService.dockingService.bodySlotData =\n      structuredClone(updatedBodySlotData);\n  }\n\n  @NullCheckParameters\n  public setBodySlot(isBodyMatch: boolean, data: any) {\n    const slotBodyData =\n      this.globalService.slotService.dockingService.bodySlotData;\n    const result = {\n      key: this.globalService.slotService.currentBodyKey,\n      value: structuredClone(data),\n    };\n    slotBodyData.push(result);\n    localStorage.setItem(\n      'slotBody',\n      JSON.stringify(this.globalService.slotService.dockingService.bodySlotData)\n    );\n  }\n\n  public async click(): Promise<boolean> {\n    // console.warn('slot click');\n    return true;\n  }\n\n  public notSlotDrag(event: MouseEvent): void {\n    console.log('notSlotDrag');\n    this.globalService.slotService.isPossibleSlotDrag = false;\n  }\n\n  setFormData() {\n    this.data.customData.key = this.formValue;\n   // console.log(this.globalService.slotService.dockingService.bodySlotData)\n    localStorage.setItem(\n      'slotBody',\n      JSON.stringify(this.globalService.slotService.dockingService.bodySlotData)\n    );\n  }\n}\n", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-default',\n  templateUrl: './default.component.html',\n  styleUrl: './default.component.scss'\n})\nexport class SlotDefaultComponent extends SlotAbstract {\n\n\n\n  public override dataInit(): void {\n    super.dataInit();\n   // this.setSlot();\n    this.createComponentType();\n  }\n\n  createComponentType() {\n    const item = this.globalService.slotService.dockingService.states.find(d => d.name === this.title) ??  this.globalService.slotService.dockingService.states.first();\n    this.globalService.slotService.dockingService.createComponent(item.type, item.component, this.data)\n  }\n}\n", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-zone-body',\n  templateUrl: './zone-body.component.html',\n  styleUrl: './zone-body.component.scss'\n})\nexport class SlotZoneBodyComponent extends SlotAbstract {\n  public components:any=[];\n\n  ngOnInit() {\n    this.bindInstance();\n    this.globalService.slotService.bodyZoneInstance = this;\n    this.style.opacity = '0.3';\n  }\n\n  public bind(instance:any) {\n    this.components.push(instance);\n  }\n\n  public override async click() {\n    // this.globalService.httpService.snackBar(\"BODY ZONE COMPONENT OPEN\");\n    this.globalService.slotService.openSlotBottomSheetBody();\n    return true;\n  }\n}\n", "<div [ngStyle]=\"style\">\n\n</div>", "import { Component, ViewChild } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport { MatMenuTrigger } from '@angular/material/menu';\n\n@Component({\n  selector: 'app-slot-navigation-bar',\n  templateUrl: './navigation-bar.component.html',\n  styleUrl: './navigation-bar.component.scss'\n})\nexport class SlotNavigationBarComponent extends SlotAbstract {\n  @ViewChild(MatMenuTrigger) menu!: MatMenuTrigger;\n\n  matchingName = \"매칭 시작\";\n\n  selectedMenuItem: any; // 현재 선택된 메뉴 아이템을 저장할 변수\n\n  ngOnInit() {\n    console.log('navigation', this.data.customData.menu)\n    this.globalService.slotService.slot.linkService.navigationData = this.data.customData.menu;\n    this.bindInstance();\n  }\n\n  ngAfterViewInit() {\n    // this.menu.menuOpened\n    // .subscribe(() => {\n    // });\n  }\n\n  bodyLink() {\n    /**\n     * 바디 영역 삭제 하고 현재 선택된 화면 그린다. \n     */\n\n    this.globalService.slotService.currentBodyKey = this.selectedMenuItem.title;\n\n    console.log('currentBodyKey', this.globalService.slotService.currentBodyKey);\n\n    localStorage.setItem('bodyLink', this.globalService.slotService.currentBodyKey);\n\n    this.globalService.slotService.dockingService.linkComponent('body');\n    this.loadBodySlot();\n  }\n\n  setMatching() {\n    // 바디 영역 초기화 한다. \n    if(!this.globalService.slotService.isBodyMatch) {\n      this.globalService.slotService.isBodyMatch = true;\n      this.globalService.slotService.isSlotWork = true;\n      this.matchingName =  \"매칭 완료\";\n      //this.globalService.dockingService.destroyComponent('body');\n      //this.removeBodySlotByKey();\n    } else {\n      this.globalService.slotService.isBodyMatch = false;\n      this.globalService.slotService.isSlotWork = false;\n      this.matchingName =  \"매칭 시작\";\n    }\n  }\n\n  public override async click() {\n    //this.globalService.httpService.snackBar(\"navigation click\");\n    return false;\n  }\n\n  onContextMenu(event: MouseEvent) {\n    this.menu.openMenu(); // 메뉴 열기\n    event.preventDefault(); // 기본 우클릭 메뉴 방지\n  }\n\n  onClick(item:data, event: MouseEvent) {\n    this.bindBodyKey(item);\n    if (event.button === 0) { // 좌클릭 (0: 좌클릭, 2: 우클릭)\n      // event.preventDefault(); // 기본 우클릭 메뉴 방지\n      // event.stopPropagation(); // 좌클릭만 막기\n    }\n  }\n\n  bindBodyKey(item:data) {\n    this.selectedMenuItem = item; // 클릭된 아이템을 selectedMenuItem에 저장\n  }\n\n  destroyAllComponent() {\n    this.globalService.slotService.dockingService.destroyComponent('body');\n  }\n\n  destroyBodyIndexComponent() {\n    this.globalService.slotService.dockingService.destroyComponent('body');\n  }\n}\n", "<div [ngStyle]=\"style\">\n\n  <mat-menu #menu=\"matMenu\">\n    <button mat-menu-item (click)=\"bodyLink()\">Link</button>\n    <button mat-menu-item (click)=\"destroyBodyIndexComponent()\">Destory</button>\n  </mat-menu>\n\n  <mat-toolbar>\n    <mat-toolbar-row style=\"margin-top: -10px;\">\n      <span [style.color]=\"'black'\">{{data.customData.title}}</span> \n      <span class=\"selected-menu-item\"> - {{this.globalService.slotService.currentBodyKey}}</span> \n      <div class=\"spacer\"></div>\n      @for (item of globalService.slotService.slot.linkService.navigationData; track $index) {\n        <button mat-button [matMenuTriggerFor]=\"menu\" \n                style=\"margin-left: 10px; color:black !important; border: 2px solid black; font-weight: bold;\" \n                (click)=\"onClick(item, $event)\"\n                [ngClass]=\"{'selected-menu-item': selectedMenuItem === item}\"> \n          {{item.title}}\n        </button>\n      } @empty {\n        Add a menu\n      }\n    </mat-toolbar-row>\n  </mat-toolbar>\n\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-menu-bar',\n  templateUrl: './menu-bar.component.html',\n  styleUrl: './menu-bar.component.scss'\n})\nexport class SlotMenuBarComponent extends SlotAbstract {\n  \n}\n", "<div [ngStyle]=\"parentStyle\">\n    {{title}}\n</div>\n<div [ngStyle]=\"style\">\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-content-list-bar',\n  templateUrl: './content-list-bar.component.html',\n  styleUrl: './content-list-bar.component.scss'\n})\nexport class SlotContentListBarComponent extends SlotAbstract {\n  public override async click() : Promise<boolean> {\n    this.globalService.httpService.snackBar('SlotContentListBarComponent Click')\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n}\n", "<div [ngStyle]=\"parentStyle\">\n    {{title}}\n</div>\n<div [ngStyle]=\"style\">\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-content-view-bar',\n  templateUrl: './content-view-bar.component.html',\n  styleUrl: './content-view-bar.component.scss'\n})\nexport class SlotContentViewBarComponent extends SlotAbstract {\n  public override async click() : Promise<boolean> {\n    this.globalService.httpService.snackBar('SlotContentViewBarComponent Click')\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n}\n", "<div [ngStyle]=\"parentStyle\">\n    {{title}}\n</div>\n<div [ngStyle]=\"style\">\n</div>", "import { Component, ViewChild } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport { MatMenuTrigger } from '@angular/material/menu';\n\n@Component({\n  selector: 'app-slot-menu-mat',\n  templateUrl: './menu-mat.component.html',\n  styleUrl: './menu-mat.component.scss'\n})\nexport class SlotMenuMatComponent extends SlotAbstract {\n  @ViewChild(MatMenuTrigger, {static:  true}) trigger1!: MatMenuTrigger;\n  \n  openMenu() {\n    this.trigger1.openMenu();\n  }\n\n  closeMenu() {\n    this.trigger1.closeMenu();\n  }\n\n  public override async click() {\n  //  this.openMenu();\n    return true;\n  }\n\n  Reset() {\n    // todo : 만들어진 객체 소멸하고 다시 그려야 한다. \n    this.clearSlot();\n  }\n\n  restore() {\n    this.globalService.httpService.snackBar(\"샘플 데이터 저장소에서 불러온다.\")\n  }\n}\n", "<div [ngStyle]=\"style\">\n\n<button mat-button [matMenuTriggerFor]=\"menu\"></button>\n<mat-menu #menu=\"matMenu\">\n  <button mat-menu-item (click)=\"Reset()\">초기화</button>\n  <button mat-menu-item (click)=\"restore()\">복원</button>\n</mat-menu>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-app-chatbot',\n  templateUrl: './app-chatbot.component.html',\n  styleUrl: './app-chatbot.component.scss'\n})\nexport class SlotAppChatbotComponent extends SlotAbstract {\n  public override async click() : Promise<boolean> {\n    return true;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n}\n", "<div [ngStyle]=\"parentStyle\">\n    {{title}}\n</div>\n<div [ngStyle]=\"style\">\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-character-mp',\n  templateUrl: './character-mp.component.html',\n  styleUrl: './character-mp.component.scss'\n})\nexport class CharacterMpComponent extends SlotAbstract {\n  public override async click() : Promise<boolean> {\n    this.globalService.httpService.snackBar('CharacterMpComponent Click')\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n}", "<div [ngStyle]=\"parentStyle\">\n    {{title}}\n</div>\n<div [ngStyle]=\"style\">\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-character-hp',\n  templateUrl: './character-hp.component.html',\n  styleUrl: './character-hp.component.scss'\n})\nexport class CharacterHpComponent extends SlotAbstract {\n  public override async click() : Promise<boolean> {\n    this.globalService.httpService.snackBar('CharacterHpComponent Click')\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n}\n", "<div [ngStyle]=\"parentStyle\">\n    {{title}}\n</div>\n<div [ngStyle]=\"style\">\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-character-profile',\n  templateUrl: './character-profile.component.html',\n  styleUrl: './character-profile.component.scss'\n})\nexport class CharacterProfileComponent extends SlotAbstract {\n  public override async click() : Promise<boolean> {\n    this.globalService.httpService.snackBar('CharacterProfileComponent Click')\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n}", "<div [ngStyle]=\"parentStyle\">\n    {{title}}\n</div>\n<div [ngStyle]=\"style\">\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-flow-list',\n  templateUrl: './flow-list.component.html',\n  styleUrl: './flow-list.component.scss'\n})\nexport class FlowListComponent extends SlotAbstract {\n  public override async click() : Promise<boolean> {\n    return true;\n  }\n  ngOnInit() {\n    this.bindInstance();\n    this.globalService.flowService.load();\n  }\n}", "<div [ngStyle]=\"parentStyle\">\n  {{title}}\n</div>\n<div [ngStyle]=\"style\">\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-flow-item',\n  templateUrl: './flow-item.component.html',\n  styleUrl: './flow-item.component.scss'\n})\nexport class FlowItemComponent  extends SlotAbstract {\n\n  isSelected = false; // 선택 상태를 나타내는 변수\n\n  toggleSelection() {\n    this.isSelected = !this.isSelected; // 선택 상태 토글\n  }\n\n  public override async click() : Promise<boolean> {\n    // alert('123');\n    // this.globalService.slotService.openDynamicForm(this, this.getFormData());\n    return true;\n  }\n\n  ngOnInit() {\n    this.style.border = '';\n    this.globalService.flowService.LogicItemComponents.push(this);\n    // this.bindInstance();\n  }\n\n  selectAction() {\n    console.log('Select Action');\n  }\n\n  getFormData() {\n    return [\n      {\n        key: 'form-values',\n        value: [\n          {\n            category: 'input',\n            type: 'text',\n            name: 'title',\n            value: this.data.customData.key,\n            placeholder: 'provide a value',\n            validations: [\n              {\n                name: 'required',\n                validator: 'required',\n                message: 'Please provide a value',\n              },\n              {\n                name: 'maxLength',\n                validator: 'maxLength-40',\n                message: 'Please enter less than 40 characters',\n              },\n            ],\n          },\n        ],\n      },\n    ];\n  }\n}\n", "<div [ngStyle]=\"style\" class=\"centered-name\" style=\"z-index: 10;\" [class.selected]=\"isSelected\" (click)=\"selectAction()\">\n  <span class=\"animated-text\">{{ data.item.name }}</span>\n  <div class=\"action-value\" [class.has-value]=\"data.item.data?.actionValue\">\n    {{ data.item.data?.actionValue }}\n  </div>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport * as d3 from 'd3';\nimport { NullCheckParameters } from '../../../../../src/app/app.component';\nimport { IPoint } from '../../svg/svg.interface';\nimport { DrawColor, DrawType } from '../../svg/svg.enum';\nimport { ICategoryInfo } from '../../../category-manage/interfaces/category/category.interface';\nimport { FlowItemComponent } from '../flow-item/flow-item.component';\nimport { timer } from 'rxjs';\n\n@Component({\n  selector: 'app-flow-view',\n  templateUrl: './flow-view.component.html',\n  styleUrl: './flow-view.component.scss',\n})\nexport class FlowViewComponent extends SlotAbstract {\n  private lineNode!: any;\n  categories: Array<ICategoryInfo> = [];\n\n  public override async click(): Promise<boolean> {\n    return true;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n    //this.loadItem({title: '1'});\n    this.globalService.slotService.flowViewComponent = this;\n    this.componentSVG = d3.select(this.canvas.nativeElement);\n    this.componentSVG.line = this.createGroup(\n      this.componentSVG,\n      { x: 0, y: 0 },\n      'forwardLine'\n    );\n\n    this.createLogic();\n  }\n\n  createLogic() {\n    this.categories = this.globalService.categoryService.load();\n\n    const startX = 50; // 시작 x 좌표\n    const startY = 50; // 시작 y 좌표\n\n    this.categories.forEach((d, i) => {\n      const x = startX + (i % 4) * 150;\n      const y = startY + Math.floor(i / 4) * 100;\n      this.loadItem({\n        title: 'items',\n        desc: 'items',\n        item: d,\n        size: {\n          width: 100,\n          height: 50,\n          position: { x, y },\n        },\n      });\n\n      // 마지막 값인지 확인하고, 마지막 값이 아니라면 drawLine1 함수 실행\n      if (i !== this.categories.length - 1 && Math.floor(i % 4) < 3) {\n        this.drawLine1({ x: x + 100, y: y + 25 }, { x: 50, y: 0 });\n      }\n    });\n  }\n\n  loadItem(data: any) {\n    this.globalService.factoryService.createComponent(\n      FlowItemComponent,\n      this.container,\n      data\n    );\n  }\n\n  @NullCheckParameters\n  onLineEvent(isDrawLine: boolean, x: number, y: number) {\n    this.drawLine({ x: x, y: y });\n  }\n\n  drawLine1(start: IPoint, end: IPoint) {\n    this.getLinePoint(end, start, false);\n    const lineGenerator: any = d3.line().curve(d3.curveBasis);\n    const pathData = lineGenerator(this.linePoints);\n    this.newLine(pathData);\n  }\n\n  drawLine(end: IPoint) {\n    this.getLinePoint(\n      this.subtractPoints(\n        end,\n        this.globalService.flowService.currentLineItemPosition,\n        -62,\n        -22\n      ),\n      this.subtractPoints(\n        this.globalService.flowService.currentLineItemPosition,\n        this.data.size.position,\n        25,\n        25\n      ),\n      false\n    );\n    const lineGenerator: any = d3.line().curve(d3.curveBasis);\n    const pathData = lineGenerator(this.linePoints);\n    this.lineNode ? this.updateLine(pathData) : this.newLine(pathData);\n  }\n\n  subtractPoints(\n    point1: IPoint,\n    point2: IPoint,\n    yMargin = 0,\n    xMargin = 0\n  ): IPoint {\n    return {\n      x: point1.x - point2.x + xMargin,\n      y: point1.y - point2.y + yMargin,\n    };\n  }\n\n  private updateLine(pathData: any) {\n    this.lineNode.attr('d', pathData);\n  }\n\n  private newLine(pathData: any) {\n    this.lineNode = this.createSVG(this.componentSVG.line, {\n      type: DrawType.path,\n      id: 'nodeLine',\n      geometry: pathData,\n      fill: DrawColor.transparent,\n      strokeWidth: 6,\n      stroke: this.getRandomColor(),\n      opacity: 1,\n    });\n  }\n}\n", "<div [ngStyle]=\"parentStyle\">\n    Dynamic Logic\n</div>\n<div [ngStyle]=\"style\" style=\"z-index: 10;\">\n    <ng-container #container></ng-container>\n</div>\n\n<svg #canvas [ngStyle]=\"layerStyle\" style=\"z-index: 5;\"></svg>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-zone-body-line',\n  templateUrl: './zone-body-line.component.html',\n  styleUrl: './zone-body-line.component.scss'\n})\nexport class SlotZoneBodyLineComponent extends SlotAbstract {\n  public components:any=[];\n\n  ngOnInit() {\n    this.bindInstance();\n    this.globalService.slotService.bodyZoneInstance = this;\n  }\n\n  public bind(instance:any) {\n    this.components.push(instance);\n  }\n\n  public override async click() {\n    this.globalService.httpService.snackBar(\"LineZONE COMPONENT OPEN\");\n    this.globalService.slotService.openSlotBottomSheetBody();\n    return true;\n  }\n}\n", "<div [ngStyle]=\"parentStyle\">\n    {{title}}\n</div>\n<div [ngStyle]=\"style\">\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-story-item',\n  templateUrl: './slot-story-item.component.html',\n  styleUrl: './slot-story-item.component.scss'\n})\nexport class SlotStoryItemComponent extends SlotAbstract {\n\n  userInput = '';\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n  }\n\n  async send() {\n\n  }\n\n}\n", "<ng-container *ngIf=\"data.item\">\n  <div class=\"example-box\" [ngClass]=\"data.item.css\">\n    <div class=\"item-content\">\n      <span class=\"item-title\">{{ data.item.title }}</span>\n      <ng-container *ngIf=\"data.item.desc\">\n        <span class=\"item-desc\">\n          {{ data.item.desc }}\n        </span>\n      </ng-container>\n      <ng-container *ngIf=\"data.item.ai\">\n        <span class=\"item-desc\">\n          {{ data.item.ai }}\n        </span>\n      </ng-container>\n      <ng-container *ngIf=\"data.item.geminiData\">\n        <span class=\"item-desc\">\n           🤖{{ data.item.geminiData }}\n        </span>\n      </ng-container>\n    </div>\n  </div>\n</ng-container>\n<ng-container *ngIf=\"!data.item\">\n  <div class=\"example-box\">\n    내용이 없습니다.\n  </div>\n</ng-container>", "import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport { timer } from 'rxjs';\nimport Swiper from 'swiper';\nimport { Autoplay, EffectCards, EffectCoverflow, EffectCube } from 'swiper/modules';\n\n@Component({\n  selector: 'app-slot-story-swiper-card',\n  templateUrl: './slot-story-swiper-card.component.html',\n  styleUrl: './slot-story-swiper-card.component.scss',\n})\nexport class SlotStorySwieprCardComponent extends SlotAbstract {\n  @ViewChild('swiper', { static: true }) swiper!: ElementRef;\n  @ViewChild('swiperTitle', { static: false }) swiperTitle?: ElementRef;\n\n  public $swiper!: any;\n\n  public selectedValue = '';\n  public selectedDesc = '';\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    //this.bindInstance();\n    timer(100).subscribe(d => {\n      this.make();\n    });\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n  make() {\n    if(this.data.items[0] == null) return;\n    this.selectedValue = this.data.items[0].title;\n    this.selectedDesc = this.data.items[0].desc;\n    this.$swiper = new Swiper(this.swiper.nativeElement, {\n      grabCursor: true,\n      effect: 'cards',\n      cardsEffect: {\n        slideShadows: true,\n      },\n      modules: [EffectCards, Autoplay], // Autoplay 추가\n      autoplay: {\n        delay: 1000, // 자동 슬라이드 변경 딜레이 (300ms)\n        disableOnInteraction: true, // 사용자 상호작용 후에도 계속 자동 재생\n      },\n      on: {\n        slideChange: (swiper) => {\n          this.slideChange(swiper);\n        },\n      },\n    });\n  }\n  async startSlideShow() {\n    const delay = 300;\n    const selectionProbability = 0.2;\n  \n    let forward = true;\n    let firstRound = true; // 첫 번째 라운드 플래그\n  \n    while (true) {\n      const indices = forward\n        ? Array.from(Array(this.data.items.length).keys())\n        : Array.from(Array(this.data.items.length).keys()).reverse();\n  \n      for (const i of indices) {\n        await new Promise((resolve) => setTimeout(resolve, delay));\n        this.$swiper.slideTo(i);\n  \n        if (!firstRound && Math.random() < selectionProbability) { // 첫 번째 라운드가 아닐 때만 확률 적용\n          const randomIndex = this.getRandomSlideIndex();\n          this.$swiper.slideTo(randomIndex);\n          this.applyCongratsEffect(); \n          return;\n        }\n      }\n  \n      forward = !forward;\n      firstRound = false; // 첫 번째 라운드 완료 표시\n    }\n  }\n\n  getRandomSlideIndex() {\n    return Math.floor(Math.random() * this.data.items.length);\n  }\n\n  private slideChange(swiper: any) {\n    const activeIndex = swiper.activeIndex;\n    this.selectedValue = this.data.items[activeIndex].title;\n    this.selectedDesc = this.data.items[activeIndex].desc;\n  }\n\n  applyCongratsEffect() {\n    // if (this.swiperTitle) {\n    //   const titleElement = this.swiperTitle.nativeElement;\n    //   titleElement.classList.add('congrats'); // 축하 클래스 추가\n    // }\n  }\n\n  async send() {}\n}\n", "<div class=\"title-container\">\n    <span class=\"title-text\">- {{title}} -</span>\n</div>\n\n<div #swiper class=\"swiper\">\n    <div class=\"swiper-wrapper\">\n        <div class=\"swiper-slide\" *ngFor=\"let item of data.items\">\n            <div class=\"slide-content\">\n                <div class=\"slide-title\">{{item.title}}</div>\n                <div class=\"slide-desc\">{{item.desc}}</div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"selected-item-container\">\n    <span class=\"selected-item-text\">{{selectedValue}}</span>\n  </div>", "import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport { timer } from 'rxjs';\nimport Swiper from 'swiper';\nimport { Autoplay, EffectCards, EffectCoverflow, EffectCube } from 'swiper/modules';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { SlotStoryItemComponent } from '../slot-story-item/slot-story-item.component';\nimport { ClanMember } from './story.model';\n\ninterface StatusEffect {\n  name: string;\n  icon: string;\n}\n\ninterface Spark {\n  style: { [key: string]: string }; // 스파크 스타일 (위치, 색상, 크기 등)\n}\n\n@Component({\n  selector: 'app-slot-story-swiper-fighting',\n  templateUrl: './slot-story-swiper-fighting.component.html',\n  styleUrl: './slot-story-swiper-fighting.component.scss',\n})\nexport class SlotStorySwieprFightingComponent extends SlotAbstract {\n  \n  isAction = false;\n  isShimmer = false;\n  isDisabled = true; // 버튼 초기 상태: 비활성화\n  stateTitle = 'Observe battle';\n  stateTitle1 = 'Turn it into a story';\n\n  skillLog:string = '';\n  \n  clan1Members: ClanMember[] = [\n  ];\n  \n  clan2Members: ClanMember[] = [\n  ];\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    this.globalService.flowService.currentFighting = this;\n    this.data.items.filter((d:any) => d.key === 0).forEach((d:any) => {\n      this.clan1Members.push(d.desc);\n    })\n    this.data.items.filter((d:any) => d.key === 1).forEach((d:any) => {\n      this.clan2Members.push(d.desc);\n    });\n  }\n\n  ngOnDestroy() {\n  }\n\n  action() {\n    this.isAction = true;\n    this.stateTitle = 'Processing data..';\n  }\n\n  loadItem(d: any) {\n    const data = {\n      title: 'items',\n      desc: 'items',\n      item: d,\n      size: { width: 100, height: 100, position: { x: 0, y: 0 } },\n    };\n    this.globalService.factoryService.createComponent(\n      SlotStoryItemComponent,\n      this.container,\n      data\n    );\n  }\n\n  aiAction() {\n    this.stateTitle1 = 'Live generating..'\n    this.isShimmer = true;\n    const prompt = `다음 콘텐츠를 분석하여 판타지 소설 전투 장면을 만드세요. 출력물에 적절한 간격을 확보하세요. : ${this.skillLog}`;\n    this.globalService.geminiService\n    .createAiData(prompt)\n    .subscribe({\n      next: (text) => {\n        if (text.parts) {\n            this.loadItem({ title: 'Generate a story based on skill logs', desc : '', geminiData: text.parts[0].text })\n        }\n        this.isShimmer = false;\n        this.stateTitle1 = 'Generation finished';\n      },\n      error: (error) => {\n        console.error('소설 내용 생성 중 에러 발생:', error);\n        this.globalService.geminiService.isUse = false;\n        this.isShimmer = false;\n        this.stateTitle1 = 'Generation finished';\n        // ... (에러 처리 로직)\n      },\n    });\n  }\n\n  endBattle(skillLog:data) {\n    this.isAction = false;\n    this.stateTitle = 'Fight over';\n    this.isDisabled = false;\n    this.skillLog = skillLog;\n    this.aiAction();\n  }\n  \n  async send() {}\n}\n", "<div style=\"margin: 10px 0\">\n  <div class=\"button-container\">\n    <button [disabled]=\"!isDisabled\" class=\"my-custom-button\" (click)=\"action()\">\n      <span>{{stateTitle}}</span>\n    </button>\n    <button [disabled]=\"isDisabled\" class=\"my-custom-button\" [class.shimmer-effect]=\"isShimmer\">\n      <span>{{stateTitle1}}</span>\n      <img class=\"button-image\" style=\"height: 20px;\" [src]=\"globalService.aiService.selectedaiPromptImg\">\n    </button>\n  </div>\n<ng-container *ngIf=\"isAction\">\n    <app-clan-battle-visual [clan1Members]=\"clan1Members\" [clan2Members]=\"clan2Members\"></app-clan-battle-visual>\n</ng-container>\n\n<ng-container #container></ng-container>\n\n</div>\n\n", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport {\n  CdkDragDrop,\n  CdkDragMove,\n  moveItemInArray,\n} from '@angular/cdk/drag-drop';\nimport { ICategoryInfo } from '../../../category-manage/interfaces/category/category.interface';\nimport { SlotStoryItemComponent } from '../../items/slot-story-item/slot-story-item.component';\nimport { timer } from 'rxjs';\nimport { SlotStorySwieprCardComponent } from '../../items/slot-story-swiper-card/slot-story-swiper-card.component';\nimport { SlotStorySwieprFightingComponent } from '../../items/slot-story-swiper-fighting/slot-story-swiper-fighting.component';\n\n@Component({\n  selector: 'app-slot-simulator',\n  templateUrl: './simulator.component.html',\n  styleUrl: './simulator.component.scss',\n})\nexport class SlotSimulatorComponent extends SlotAbstract {\n  isShimmer = false;\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  items: any[] = [\n    {\n      title: 'AI Novel + Game Simulator',\n      css: 'bot-message',\n      desc: '',\n      action: '',\n    },\n  ];\n\n  dragImg = './assets/svg/items/item2.svg';\n\n  currentItem: any = null;\n\n  categories: Array<ICategoryInfo> = [];\n  character: Array<ICategoryInfo> = [];\n\n  ngOnInit() {\n    this.bindInstance();\n    this.globalService.aiService.converstionComponent = this;\n    this.globalService.categoryService.currentSimulator = this;\n    this.style.overflow = 'auto';\n\n    this.create();\n  }\n\n  reload() {\n    timer(500).subscribe((d) => {\n      this.container.clear();\n      this.items = [];\n      this.create();\n    });\n  }\n\n  create() {\n    this.categories = this.globalService.categoryService.load();\n    const flattenedNodes = this.flattenNodes(this.categories);\n    flattenedNodes.forEach((node) => {\n      this.items.push({\n        title: node.name,\n        action: node.data?.actionValue,\n        desc: node.data?.contentValue,\n        ai: node.data?.aiValue,\n        css: 'bot-message',\n      });\n    });\n\n    console.log(this.items)\n\n   this.init();\n  }\n\n  init() {\n\n    timer(1000).subscribe(d => {\n      this.globalService.flowService.logicFlow();\n    });\n\n    this.globalService.flowService.currentFlowIndex = 0;\n    if (!this.globalService.geminiService.isPlay) {\n      this.story(); // play 모드일 경우 play() 함수 실행\n    } else {\n      this.play(); // flow 모드일 경우 init() 함수 실행\n      this.play3d();\n    }\n  }\n\n  next() {\n    this.globalService.flowService.currentFlowIndex++;\n\n    this.globalService.flowService.logicFlow();\n\n    this.play();\n    this.play3d();\n  }\n\n  async play() {\n\n    this.globalService.flowService.currentDataItem =\n      this.items[this.globalService.flowService.currentFlowIndex];\n    this.globalService.flowService.currentDataItem.currentFlowIndex =\n      this.globalService.flowService.currentFlowIndex;\n\n\n      \n    this.aiPlay();\n  }\n\n  test() {\n    this.loadItem(this.items[this.globalService.flowService.currentFlowIndex]);\n    this.globalService.flowService.currentFlowIndex++;\n  }\n\n  play3d() {\n    console.log('play 3d play');\n    this.globalService.commandService.current3d.startMovingBoxes();\n  }\n\n  story() {\n    this.items.forEach(d => {\n      this.loadItem(d);\n    })\n  }\n\n  aiPlay() {\n    this.isShimmer = true;\n    const prompt = `다음 내용을 분석하고 그에 기반한 소설을 써주세요. : ${this.globalService.flowService.currentDataItem.desc}`;\n    this.globalService.geminiService\n    .createAiData(prompt)\n    .subscribe({\n      next: (text) => {\n        if (text.parts) {\n          this.globalService.flowService.currentDataItem.geminiData =\n            text.parts[0].text;\n        }\n        this.isShimmer = false;\n        this.loadItem(this.globalService.flowService.currentDataItem);\n        this.actions();\n        //this.globalService.flowService.logicFlow();\n      },\n      error: (error) => {\n        console.error('Error occurred during content generation:', error);\n        // ... (에러 처리 로직)\n      },\n    });\n  }\n\n  actionMap: any = {\n    // 직업선택: this.loadCards.bind(this, 'selectJob'),\n    Item: this.loadCards.bind(this, 'selectItem'),\n    // 동료: this.loadCards.bind(this, 'selectMember'),\n    // 미션: this.loadCards.bind(this, 'selectMission'),\n    Battle: this.loadFighting.bind(this, 'selectFight'),\n  };\n\n  actions() {\n    this.actionMap[this.globalService.flowService.currentDataItem.action]?.();\n  }\n\n  loadFighting(actionName: any) {\n    const result = (this.globalService.characterService as any)[actionName]();\n    this.globalService.factoryService.createComponent(\n      SlotStorySwieprFightingComponent,\n      this.container,\n      result\n    );\n  }\n\n  loadCards(actionName: any) {\n    const result = (this.globalService.characterService as any)[actionName]();\n    this.globalService.factoryService.createComponent(\n      SlotStorySwieprCardComponent,\n      this.container,\n      result\n    );\n  }\n\n  loadItem(d: any) {\n    const data = {\n      title: 'items',\n      desc: 'items',\n      item: d,\n      size: { width: 100, height: 100, position: { x: 0, y: 0 } },\n    };\n    this.globalService.factoryService.createComponent(\n      SlotStoryItemComponent,\n      this.container,\n      data\n    );\n  }\n\n  flattenNodes(nodes: ICategoryInfo[]): ICategoryInfo[] {\n    const result: ICategoryInfo[] = [];\n    const queue: ICategoryInfo[] = [...nodes];\n    const visited = new Set<number>(); // 방문한 노드 ID 추적 (숫자 타입)\n\n    while (queue.length > 0) {\n      const node = queue.shift()!;\n      const nodeId = Number(node.id); // node.id를 숫자로 변환\n\n      if (visited.has(nodeId)) continue;\n      visited.add(nodeId);\n\n      result.unshift(node);\n\n      for (let i = node.children.length - 1; i >= 0; i--) {\n        const childId = Number(node.children[i]); // childId도 숫자로 변환\n        const childNode = nodes.find((n) => Number(n.id) === childId);\n        if (childNode && !visited.has(childId)) {\n          queue.unshift(childNode);\n        }\n      }\n    }\n\n    return result.reverse();\n  }\n\n  onDragMove(event: CdkDragMove) {\n    // const mousePosition = this.getMousePositionOnDragMove(event);\n    // console.log('Mouse position:', mousePosition);\n  }\n\n  getMousePositionOnDragMove(event: CdkDragMove): { x: number; y: number } {\n    const transform = event.source.element.nativeElement.style.transform;\n    const matrix = new WebKitCSSMatrix(transform);\n    const x = matrix.m41 + event.pointerPosition.x;\n    const y = matrix.m42 + event.pointerPosition.y;\n    return { x, y };\n  }\n\n  drop(event: CdkDragDrop<string[]>) {\n    moveItemInArray(this.items, event.previousIndex, event.currentIndex);\n    this.globalService.slotService.isPossibleSlotDrag = true;\n  }\n\n  override add(data: any) {\n    const item = { title: data, desc: '', css: 'user-message' };\n    this.items.push({ title: data, desc: '', css: 'user-message' });\n    this.loadItem(item);\n  }\n\n  streamAdd(data: any) {\n    this.currentItem = { title: '[Artificial Intelligence]', desc: '', css: 'bot-message' };\n    this.items.push(this.currentItem);\n    this.loadItem(this.currentItem);\n  }\n\n  streamConnecting(d: string) {\n    this.currentItem.desc = this.currentItem.desc + d;\n    this.scrollBody.nativeElement.scrollTop =\n      this.scrollBody.nativeElement.scrollHeight;\n  }\n}\n", "<div [ngStyle]=\"style\" #scrollBody>\n    <div cdkDropList class=\"example-list\">\n        <ng-container #container></ng-container>\n        <div class=\"button-container\">\n            <button class=\"my-custom-button\" *ngIf=\"globalService.geminiService.isPlay\" [class.shimmer-effect]=\"isShimmer\" (click)=\"next()\">\n                <span *ngIf=\"!isShimmer\">NEXT<span *ngIf=\"this.globalService.geminiService.isUse\" style=\"color: rgb(239, 167, 23);\"> [AI] </span></span> \n                <span *ngIf=\"isShimmer\">Writing an AI...</span>\n                <img class=\"button-image\" style=\"height: 20px; margin-right: 10px;\" [src]=\"globalService.aiService.selectedaiPromptImg\">\n            </button>\n        </div>\n    </div>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\n\n@Component({\n  selector: 'app-slot-list-drag',\n  templateUrl: './slot-list-drag.component.html',\n  styleUrl: './slot-list-drag.component.scss'\n})\nexport class SlotListDragComponent  extends SlotAbstract {\n  public override async click() : Promise<boolean> {\n    return false;\n  }\n\n  movies = [\n    '테스트 아이템 1',\n    '테스트 아이템 2',\n    '테스트 아이템 3',\n    '테스트 아이템 4',\n    '테스트 아이템 5',\n  ];\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n\n  drop(event: CdkDragDrop<string[]>) {\n    moveItemInArray(this.movies, event.previousIndex, event.currentIndex);\n    this.globalService.slotService.isPossibleSlotDrag = true;\n  }\n\n\n}\n", "<!-- <div [ngStyle]=\"parentStyle\">\n    {{title}}\n</div> -->\n<div [ngStyle]=\"style\" (mousedown)=\"notSlotDrag($event)\">\n\n    <div cdkDropList class=\"example-list\" (cdkDropListDropped)=\"drop($event)\">\n        @for (movie of movies; track movie) {\n          <div class=\"example-box\" cdkDrag>\n            <div class=\"example-custom-placeholder\" *cdkDragPlaceholder></div>\n            {{movie}}\n          </div>\n        }\n      </div>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-item-add',\n  templateUrl: './slot-item-add.component.html',\n  styleUrl: './slot-item-add.component.scss'\n})\nexport class SlotItemAddComponent extends SlotAbstract {\n  public override async click() : Promise<boolean> {\n    return false;\n  }\n  \n  ngOnInit() {\n    this.bindInstance();\n  }\n\n  override add(event:Event) {\n    this.globalService.slotService.slot.slotDrawer.toggle();\n    this.globalService.slotService.isPossibleSlotDrag = true;\n  }\n}\n", "<div [ngStyle]=\"style\">\n    <button mat-icon-button (click)=\"add($event)\">\n        <mat-icon>add</mat-icon>\n    </button>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-item-play',\n  templateUrl: './slot-item-play.component.html',\n  styleUrl: './slot-item-play.component.scss'\n})\nexport class SlotItemPlayComponent extends SlotAbstract {\n\n  private readonly playIcon = './assets/svg/item_play.svg';\n  private readonly playingIcon = './assets/svg/item_playing.svg';\n\n  public svgIcon = this.playIcon;\n\n  public override async click() : Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n\n  working() {\n    this.svgIcon === this.playingIcon ? this.playing() : this.play();\n  }\n\n  play() {\n    this.svgIcon =this.playingIcon;\n    console.log('isPossibleSlotDrag', this.globalService.slotService.isPossibleSlotDrag);\n    this.globalService.slotService.isSlotWork = true;\n    this.globalService.slotService.isBodyMatch = true;\n  }\n\n  playing() {\n    console.log('isPossibleSlotDrag playing', this.globalService.slotService.isPossibleSlotDrag);\n    this.svgIcon =this.playIcon;\n    this.globalService.slotService.isSlotWork = false;\n    this.globalService.slotService.isBodyMatch = false;\n  }\n}\n", "<div [ngStyle]=\"style\">\n    <button mat-icon-button (click)=\"working()\">\n        <img alt=\"\" class=\"example-option-img\" [src]=\"svgIcon\" height=\"25\">\n    </button>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-item-pin-line',\n  templateUrl: './slot-item-pin-line.component.html',\n  styleUrl: './slot-item-pin-line.component.scss'\n})\nexport class SlotItemPinLineComponent extends SlotAbstract {\n  private readonly playIcon = './assets/svg/item_playing.svg';\n  private readonly playingIcon = './assets/svg/item_playing.svg';\n  public svgIcon = this.playIcon;\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n  ngOnInit() {\n    this.bindInstance();\n  }\n\n  working() {\n    this.globalService.slotService.isDrawLine ? this.connected() : this.start();\n  }\n\n  start() {\n    this.svgIcon = this.playingIcon;\n    this.globalService.slotService.isDrawLine = true;\n    this.globalService.flowService.currentLineItem = this;\n    this.globalService.flowService.currentLineItemPosition = this.data.size.position;\n  }\n\n  connected() {\n    this.svgIcon = this.playingIcon;\n    this.globalService.slotService.isDrawLine = false;\n    this.globalService.flowService.currentLineEndItem = this;\n  }\n}\n", "<div [ngStyle]=\"style\">\n    <button mat-icon-button (mousedown)=\"working()\">\n        <img alt=\"\" class=\"example-option-img svgFill\" [src]=\"svgIcon\" height=\"25\">\n    </button>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-item-input',\n  templateUrl: './slot-item-input.component.html',\n  styleUrl: './slot-item-input.component.scss'\n})\nexport class SlotItemInputComponent extends SlotAbstract {\n\n  Placeholder = 'Write a message for AI';\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n\n  getAnswer(event: KeyboardEvent | event) {\n    if (event.isComposing) return;\n    this.globalService.aiService.senderComponent.send();\n    this.globalService.aiService.messageValue = '';\n  }\n\n}\n", "<div [ngStyle]=\"style\">\n    <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\n        <mat-label>AI Messages</mat-label>\n        <input matInput [placeholder]=\"Placeholder\" [(ngModel)]=\"globalService.aiService.messageValue\" (keydown.enter)=\"getAnswer($event)\"/>\n    </mat-form-field>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-item-sender',\n  templateUrl: './slot-item-sender.component.html',\n  styleUrl: './slot-item-sender.component.scss'\n})\nexport class SlotItemSenderComponent extends SlotAbstract {\n\n  userInput = '나는 오늘 복수를 하러 갈거야';\n  isShimmer = false;\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n    this.globalService.aiService.senderComponent = this;\n  }\n\n  async send() {\n    console.log('ai message on chatbot', this.globalService.aiService.messageValue);\n    this.globalService.aiService.converstionComponent.add(this.globalService.aiService.messageValue)\n    this.globalService.aiService.converstionComponent.streamAdd('AI : ')\n    this.globalService.aiService.messages[1].content = this.globalService.aiService.messageValue;\n    this.globalService.aiService.getOpenAISteam(this.globalService.aiService.messages).then(stream$ => { \n      stream$.subscribe({\n        next: content => { \n          this.globalService.aiService.converstionComponent.streamConnecting(content);\n        },\n        error: error => console.error(error)\n        // complete: () => console.log('스트림 완료!') // 필요한 경우 추가\n      });\n    })\n    .catch(error => console.error(error));\n  }\n}\n", "<div [ngStyle]=\"style\">\n    <button mat-icon-button (click)=\"send()\">\n        <mat-icon>send</mat-icon>\n    </button>\n</div>", "import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport { CdkDragDrop, CdkDragMove, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { timer } from 'rxjs';\n\n@Component({\n  selector: 'app-slot-item-conversation',\n  templateUrl: './slot-item-conversation.component.html',\n  styleUrl: './slot-item-conversation.component.scss'\n})\nexport class SlotItemConversationComponent extends SlotAbstract {\n  \n  \n  public override async click() : Promise<boolean> {\n    return false;\n  }\n\n  items = [\n    {title : '저는 숙련된 AI 작가입니다.', css: 'bot-message'} ,\n  ];\n\n  dragImg = './assets/svg/items/item2.svg';\n\n  currentItem:any = null;\n\n  ngOnInit() {\n    this.bindInstance();\n    this.globalService.aiService.converstionComponent = this;\n    this.style.overflow = 'auto';\n  }\n\n  onDragMove(event: CdkDragMove) {\n    // 화면 전체 다큐먼트에서 이벤트가 관리 되어 포지션 적용하기 어렵지 않다. \n    // const mousePosition = this.getMousePositionOnDragMove(event);\n    // console.log('Mouse position:', mousePosition);\n  }\n\n   getMousePositionOnDragMove(event: CdkDragMove): { x: number, y: number } {\n    const transform = event.source.element.nativeElement.style.transform;\n    const matrix = new WebKitCSSMatrix(transform);\n    const x = matrix.m41 + event.pointerPosition.x; // 드래그 시작 위치 + 마우스 포인터 이동 거리\n    const y = matrix.m42 + event.pointerPosition.y;\n    return { x, y };\n  }\n\n  drop(event: CdkDragDrop<string[]>) {\n    moveItemInArray(this.items, event.previousIndex, event.currentIndex);\n    this.globalService.slotService.isPossibleSlotDrag = true;\n  }\n\n  override add(data:any) {\n    this.items.push( {title : data, css: 'user-message'})\n  }\n\n  streamAdd(data:any) {\n    this.currentItem = {title : data, css: 'bot-message'};\n    this.items.push(this.currentItem);\n  }\n\n  streamConnecting(d:string) {\n    this.currentItem .title = this.currentItem.title + d;\n    this.scrollBody.nativeElement.scrollTop = this.scrollBody.nativeElement.scrollHeight;\n  }\n\n}\n", "<div [ngStyle]=\"style\" #scrollBody (mousedown)=\"notSlotDrag($event)\">\n    <div cdkDropList class=\"example-list\" (cdkDropListDropped)=\"drop($event)\">\n        @for (item of items; track item; let i = $index) {\n        <div class=\"example-box\" cdkDrag   (cdkDragMoved)=\"onDragMove($event)\" [ngClass]=\"item.css\">\n            <div class=\"example-custom-placeholder\" *cdkDragPlaceholder></div>\n            {{item.title}}\n            <img *cdkDragPreview [src]=\"dragImg\">\n        </div>\n        }\n    </div>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-item-prompt',\n  templateUrl: './slot-item-prompt.component.html',\n  styleUrl: './slot-item-prompt.component.scss'\n})\nexport class SlotItemPromptComponent extends SlotAbstract {\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n  \n  async send() {\n    console.log('자체 프롬프트를 출력하자.');\n    this.globalService.slotService.openSlotPromptBottomSheetBody();\n  }\n\n}\n", "<div [ngStyle]=\"style\">\n    <button mat-icon-button (click)=\"send()\">\n        <img [src]=\"globalService.aiService.selectedPromptImg\">\n    </button>\n</div>", "import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport {\n  CdkDragDrop,\n  CdkDragMove,\n  moveItemInArray,\n} from '@angular/cdk/drag-drop';\nimport { timer } from 'rxjs';\nimport { ICategoryInfo } from '../../../category-manage/interfaces/category/category.interface';\nimport { CategoryRest } from '../../../category-manage/classes/rest/category.rest';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { GlobalService } from '../../../../core/services/global.service';\nimport { CategoryMenuData } from '../../../category-manage/classes/menu/category.menu';\nimport { IMenu } from '../../../../components/menu-item/menu/menu.interface';\nimport { TreeviewComponent } from '../../../../components/treeview/treeview/treeview.component';\nimport { ICategoryClickedOut } from '../../../category-manage/components/organisms/category/category.component';\nimport { TreeService } from '../../../../components/treeview/service/tree.service';\nimport { CategoryCode } from '../../../category-manage/const/catgegory-root-code.const';\nimport { User } from '../../../membership/interfaces/user.interface';\n\n@Component({\n  selector: 'app-slot-item-category',\n  templateUrl: './slot-item-category.component.html',\n  styleUrl: './slot-item-category.component.scss',\n})\nexport class SlotItemCategoryComponent extends SlotAbstract {\n  @Output() categoryClicked = new EventEmitter<ICategoryClickedOut>();\n  users: Array<User> = []; //유저들 리스트\n  categories: Array<ICategoryInfo> = [];\n  categoryRest: CategoryRest;\n  categoryMenu: IMenu;\n  currentCategoryId!: number;\n  categoryCode = new CategoryCode();\n  constructor(\n    protected override globalService: GlobalService,\n    protected dialog: MatDialog,\n    protected _snackBar: MatSnackBar\n  ) {\n    super(globalService);\n    this.categoryRest = new CategoryRest(dialog, _snackBar, globalService);\n    this.categoryMenu = new CategoryMenuData(this.categoryRest);\n  }\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n\n    // const user = this.globalService.currentUser.userData;\n    // if (!user.id) return;\n    this.globalService.currentCategoryService = this.globalService.categoryService;\n    this.categories = this.globalService.categoryService.load();\n    this.style.overflow = 'auto';\n\n    // this.categoryRest.getCategories({type: this.categoryCode.personal, id: user.id}).subscribe(d => {\n    //   console.log('category', JSON.stringify(d));\n    //   this.categories = d;\n    // });\n    // this.globalService.dalService.userHttp.getUsers().subscribe((d) => {\n    //   this.users = d.data;\n    // });\n  }\n\n  onCategoryClick(\n    categoryId: number,\n    treeView: TreeviewComponent<ICategoryInfo>\n  ) {\n    const categoryIdPath = treeView.treeService.findPath(categoryId);\n    this.categoryClicked.emit({\n      id: categoryId,\n      categoryNamePath: this.setCategoryPath(categoryId, treeView.treeService),\n      categoryIdPath: categoryIdPath,\n    });\n  }\n\n  setCategoryPath(categoryId: number, treeService: TreeService<ICategoryInfo>) {\n    const parent = treeService.findParent(categoryId);\n    const me = treeService.findMe(categoryId);\n    this.currentCategoryId = categoryId;\n    const parentName = parent?.name ?? '';\n    const categoryName = parentName ? '> ' + me!.name : me!.name;\n    return `${parentName} ${categoryName}`;\n  }\n}\n", "<!-- <div [ngStyle]=\"parentStyle\">\n    {{title}}\n</div> -->\n<div [ngStyle]=\"style\">\n    <app-treeview #treeview2 [datasource]=\"categories\" (clickEvent)=\"onCategoryClick($event, treeview2) \"\n    (moveData)=\"categoryRest.move($event, treeview2)\" [menuClass]=\"categoryMenu!\" [who]=\"'admin'\"></app-treeview>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-story-input',\n  templateUrl: './slot-story-input.component.html',\n  styleUrl: './slot-story-input.component.scss'\n})\nexport class SlotStoryInputComponent extends SlotAbstract {\n\n  Placeholder = 'Write a story';\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n\n  getAnswer(event: KeyboardEvent | event) {\n    if (event.isComposing) return;\n    this.globalService.categoryService.send();\n    this.globalService.categoryService.messageValue = '';\n  }\n\n}\n", "<div [ngStyle]=\"style\">\n    <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\n        <mat-label>Story Messages</mat-label>\n        <input matInput [placeholder]=\"Placeholder\" [(ngModel)]=\"globalService.categoryService.messageValue\" (keydown.enter)=\"getAnswer($event)\"/>\n    </mat-form-field>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-story-viewer',\n  templateUrl: './slot-story-viewer.component.html',\n  styleUrl: './slot-story-viewer.component.scss'\n})\nexport class SlotStoryViewerComponent extends SlotAbstract {\n  public override async click() : Promise<boolean> {\n    return true;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n}", "<div [ngStyle]=\"parentStyle\">\n    {{title}}\n</div>\n<div [ngStyle]=\"style\">\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-form-input',\n  templateUrl: './slot-form-input.component.html',\n  styleUrl: './slot-form-input.component.scss'\n})\nexport class SlotFormInputComponent extends SlotAbstract {\n\n  Placeholder = 'Write a form';\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n\n  getAnswer(event: KeyboardEvent | event) {\n    if (event.isComposing) return;\n    this.globalService.currentCategoryService.rename(this.globalService.slotFormService.titleValue);\n    // this.globalService.categoryServicie.send();\n    // this.globalService.categoryServicie.messageValue = '';\n  }\n\n}\n\n\n", "<div [ngStyle]=\"style\">\n    <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\n        <mat-label>Input Messages</mat-label>\n        <input matInput [placeholder]=\"Placeholder\" [(ngModel)]=\"globalService.slotFormService.titleValue\" (keydown.enter)=\"getAnswer($event)\"/>\n    </mat-form-field>\n</div>", "import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { SlotAbstract } from '../../../slot.abstract';\nimport { timer } from 'rxjs';\n\n@Component({\n  selector: 'app-slot-form-textarea',\n  templateUrl: './slot-form-textarea.component.html',\n  styleUrl: './slot-form-textarea.component.scss',\n})\nexport class SlotFormTextAreaComponent extends SlotAbstract {\n  Placeholder = 'Write a form';\n  @ViewChild('textareaElement', {static : true}) textareaElement!: ElementRef;\n\n\n  aiData = ''\n\n  txtHeight = 100;\n  \n  public override async click(): Promise<boolean> {\n    this.globalService.slotService.openDynamicForm(this, this.getFormData());\n    return false;\n  }\n\n  getDynamicValue() {\n    const value = (this.globalService.slotFormService as any)[this.formValue];\n\n    // 값이 문자열이 아닌 경우 JSON.stringify를 사용하여 문자열로 변환\n    return typeof value === 'string' ? value : JSON.stringify(value);\n}\n\n  getFormData() {\n    return [\n      {\n        key: 'form-values',\n        value: [\n          {\n            category: 'input',\n            type: 'text',\n            name: 'title',\n            value: this.data.customData.key,\n            placeholder: 'provide a value',\n            validations: [\n              {\n                name: 'required',\n                validator: 'required',\n                message: 'Please provide a value',\n              },\n              {\n                name: 'maxLength',\n                validator: 'maxLength-40',\n                message: 'Please enter less than 40 characters',\n              },\n            ],\n          },\n        ],\n      },\n    ];\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n    this.formValue = this.data.customData.key;\n    this.txtHeight = this.data.size.height - 32;\n    this.globalService.slotFormService.streamComponentList.push(this);\n  }\n\n  getAnswer(event: KeyboardEvent | event) {\n    if (event.isComposing) return;\n    const message = (event.target as HTMLTextAreaElement).value;\n    (this.globalService.slotFormService as any)[this.formValue] = message;\n    this.globalService.slotFormService.setContent();\n    this.globalService.currentCategoryService.setCategories();\n  }\n\n  streamStart() {\n    this.aiData = '';\n    this.textareaElement.nativeElement.value = '';\n  }\n\n  streamConnecting(content:string) {\n    this.aiData = this.aiData + content;\n    this.textareaElement.nativeElement.value = this.aiData;\n    this.scrollBody.nativeElement.scrollTop = this.scrollBody.nativeElement.scrollHeight;\n  }\n\n  streamEnd() {\n    timer(100).subscribe(d => {\n      (this.globalService.slotFormService as any)[this.formValue] = this.textareaElement.nativeElement.value;\n      this.globalService.slotFormService.setContent();\n      this.globalService.currentCategoryService.setCategories();\n    });\n\n  }\n}", "<div [ngStyle]=\"style\">\n    <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\n        <mat-label>Textarea Messages</mat-label>\n        <textarea #scrollBody #textareaElement [style.height.px]=\"txtHeight\" matInput [placeholder]=\"Placeholder\" [value]=\"getDynamicValue() || ''\" (keydown.enter)=\"getAnswer($event)\"></textarea>\n    </mat-form-field>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport { catchError, EMPTY, Observable, tap, throwError } from 'rxjs';\n\n@Component({\n  selector: 'app-slot-story-ai-sender',\n  templateUrl: './slot-story-ai-sender.component.html',\n  styleUrl: './slot-story-ai-sender.component.scss',\n})\nexport class SlotStoryAiSenderComponent extends SlotAbstract {\n  userInput = '';\n  isShimmer = false;\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n    this.globalService.aiService.geminiSenderComponent = this;\n  }\n\n\n  send(prompt: string): Observable<any> { // Observable 반환 타입 명시\n    if (!this.globalService.geminiService.isUse) return EMPTY; // 사용하지 않을 경우 빈 Observable 반환\n    if (!prompt) return EMPTY; // 프롬프트가 비어있을 경우 빈 Observable 반환\n  \n    this.isShimmer = true;\n  \n    return this.globalService.geminiService.createAiData(prompt).pipe(\n      tap(() => this.isShimmer = false), // 응답 받으면 로딩 상태 해제\n      tap((text) => {\n        if (text.parts) {\n          console.log('text parts', text.parts);\n        } else {\n          this.globalService.httpService.snackBar('Gemini Data 오류 : ' + JSON.stringify(text));\n        }\n      }),\n      catchError((error) => {\n        this.isShimmer = false;\n        this.globalService.httpService.snackBar('Error occurred during content generation:', error);\n        return throwError(() => error); // 에러 발생 시 에러를 throw\n      })\n    );\n  }\n\n  async sendOpenAI() {\n    if(!this.globalService.geminiService.isUse) return;\n\n    const streamComponent =\n      this.globalService.slotFormService.streamComponentList.find(\n        (d) => d.formValue === 'aiValue'\n      );\n    const message = this.globalService.slotFormService.contentValue ?? '내용이 없습니다.';\n    console.log('message', message)\n    const messages: any[] = [\n      {\n        role: 'system',\n        content: this.globalService.aiService.novelPrompt + ' 이 프롬프트를 기반으로 각 장의 세부 내용을 풍부하게 작성하여 흥미진진한 판타지 소설을 완성해 보세요!',\n      },\n      { role: 'user', content: message },\n    ];\n    console.log('messages', message);\n    this.isShimmer = true;\n    streamComponent?.streamStart();\n    this.globalService.aiService\n      .getOpenAISteam(messages)\n      .then((stream$) => {\n        stream$.subscribe({\n          next: (content) => {\n            streamComponent?.streamConnecting(content);\n          },\n          error: (error) => console.error(error),\n          complete: () => {\n            streamComponent?.streamEnd();\n            this.isShimmer = false;\n\n          }, // 필요한 경우 추가\n        });\n      })\n      .catch((error) => console.error(error));\n  }\n}\n", "<div [ngStyle]=\"style\" class=\"shimmer-container\">\n  <div *ngIf=\"isShimmer\" class=\"shimmer-animation\"></div>\n  <button mat-icon-button (click)=\"sendOpenAI()\">\n    <img [src]=\"globalService.aiService.selectedaiPromptImg\">\n  </button>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-story-save-sender',\n  templateUrl: './slot-story-save-sender.component.html',\n  styleUrl: './slot-story-save-sender.component.scss'\n})\nexport class SlotStorySaveSenderComponent extends SlotAbstract {\n\n  userInput = '';\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n\n  async send() {\n\n   const jsonString = JSON.stringify(this.globalService.categoryService.categories, null, 2); // 객체를 JSON 문자열로 변환 (선택적으로 들여쓰기)\n   await navigator.clipboard.writeText(jsonString);\n\n   alert(jsonString)\n\n  }\n\n}\n", "<div [ngStyle]=\"style\">\n    <button mat-icon-button (click)=\"send()\">\n        <img [src]=\"globalService.aiService.selectedSavePromptImg\">\n    </button>\n</div>", "import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport {\n  CdkDragDrop,\n  CdkDragMove,\n  moveItemInArray,\n} from '@angular/cdk/drag-drop';\nimport { timer } from 'rxjs';\nimport { ICategoryInfo } from '../../../category-manage/interfaces/category/category.interface';\nimport { CategoryRest } from '../../../category-manage/classes/rest/category.rest';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { GlobalService } from '../../../../core/services/global.service';\nimport { CategoryMenuData } from '../../../category-manage/classes/menu/category.menu';\nimport { IMenu } from '../../../../components/menu-item/menu/menu.interface';\nimport { TreeviewComponent } from '../../../../components/treeview/treeview/treeview.component';\nimport { ICategoryClickedOut } from '../../../category-manage/components/organisms/category/category.component';\nimport { TreeService } from '../../../../components/treeview/service/tree.service';\nimport { CategoryCode } from '../../../category-manage/const/catgegory-root-code.const';\nimport { User } from '../../../membership/interfaces/user.interface';\n\n@Component({\n  selector: 'app-slot-item-character',\n  templateUrl: './slot-item-character.component.html',\n  styleUrl: './slot-item-character.component.scss',\n})\nexport class SlotItemCharacterComponent extends SlotAbstract {\n  @Output() categoryClicked = new EventEmitter<ICategoryClickedOut>();\n  users: Array<User> = []; //유저들 리스트\n  categories: Array<ICategoryInfo> = [];\n  categoryRest: CategoryRest;\n  categoryMenu: IMenu;\n  currentCategoryId!: number;\n  categoryCode = new CategoryCode();\n  constructor(\n    protected override globalService: GlobalService,\n    protected dialog: MatDialog,\n    protected _snackBar: MatSnackBar\n  ) {\n    super(globalService);\n    this.categoryRest = new CategoryRest(dialog, _snackBar, globalService);\n    this.categoryMenu = new CategoryMenuData(this.categoryRest);\n  }\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n\n    // const user = this.globalService.currentUser.userData;\n    // if (!user.id) return;\n\n    this.globalService.currentCategoryService = this.globalService.characterService;\n\n    this.categories = this.globalService.characterService.load();\n\n    this.style.overflow = 'auto';\n    // this.categoryRest.getCategories({type: this.categoryCode.personal, id: user.id}).subscribe(d => {\n    //   console.log('category', JSON.stringify(d));\n    //   this.categories = d;\n    // });\n    // this.globalService.dalService.userHttp.getUsers().subscribe((d) => {\n    //   this.users = d.data;\n    // });\n  }\n\n  onCategoryClick(\n    categoryId: number,\n    treeView: TreeviewComponent<ICategoryInfo>\n  ) {\n    const categoryIdPath = treeView.treeService.findPath(categoryId);\n    this.categoryClicked.emit({\n      id: categoryId,\n      categoryNamePath: this.setCategoryPath(categoryId, treeView.treeService),\n      categoryIdPath: categoryIdPath,\n    });\n  }\n\n  setCategoryPath(categoryId: number, treeService: TreeService<ICategoryInfo>) {\n    const parent = treeService.findParent(categoryId);\n    const me = treeService.findMe(categoryId);\n    this.currentCategoryId = categoryId;\n    const parentName = parent?.name ?? '';\n    const categoryName = parentName ? '> ' + me!.name : me!.name;\n    return `${parentName} ${categoryName}`;\n  }\n}\n", "<!-- <div [ngStyle]=\"parentStyle\">\n    {{title}}\n</div> -->\n<div [ngStyle]=\"style\">\n    <app-treeview #treeview2 [datasource]=\"categories\" (clickEvent)=\"onCategoryClick($event, treeview2) \"\n    (moveData)=\"categoryRest.move($event, treeview2)\" [menuClass]=\"categoryMenu!\" [who]=\"'admin'\"></app-treeview>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-character-input',\n  templateUrl: './slot-character-input.component.html',\n  styleUrl: './slot-character-input.component.scss'\n})\nexport class SlotCharacterInputComponent extends SlotAbstract {\n\n  Placeholder = 'Write a Object';\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n\n  getAnswer(event: KeyboardEvent | event) {\n    if (event.isComposing) return;\n    this.globalService.characterService.send();\n    this.globalService.characterService.messageValue = '';\n  }\n\n}\n", "<div [ngStyle]=\"style\">\n    <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\n        <mat-label>Object Messages</mat-label>\n        <input matInput [placeholder]=\"Placeholder\" [(ngModel)]=\"globalService.characterService.messageValue\" (keydown.enter)=\"getAnswer($event)\"/>\n    </mat-form-field>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../../slot.abstract';\nimport { Observable, timer } from 'rxjs';\ntype SlotType = 'slot' | 'slotBody' | 'categories';\n\ninterface Command {\n  command: string;\n  similarity: number;\n  value: data;\n}\n\ninterface CommandData {\n  filePath?: string;\n  type?: SlotType;\n  action?: () => void;\n  callback?: () => void;\n}\ntype ActionType = 'addMenuItem' | 'updateTitle' | 'replaceData';\n\ninterface StoryNode {\n  id: number;\n  name: string;\n  rootId: number;\n  depth: number;\n  type: string;\n  children: number[];\n  data?: {\n      contentValue: string;\n      titleValue: string;\n      originValue: string;\n  };\n}\n\n@Component({\n  selector: 'app-slot-gemini-input',\n  templateUrl: './slot-gemini-input.component.html',\n  styleUrl: './slot-gemini-input.component.scss',\n})\nexport class SlotGeminiInputComponent extends SlotAbstract {\n  Placeholder = 'AI Gemini';\n  isLoading = false;\n\n  similarities: any;\n  highestSimilarity: any;\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n  }\n\n  commandList: any = {\n    'Error in AI Output': {\n      filePath: undefined,\n      type: 'slot',\n      action: () => {\n        // 액션 함수 추가\n        this.globalService.httpService.snackBar(\n          'Error in AI Output : ' + JSON.stringify(this.similarities)\n        );\n      },\n    },\n    'Add menu item': {\n      filePath: undefined,\n      type: 'slot',\n      actionType: 'addMenuItem', // 메뉴 아이템 추가\n      action: () => {\n        this.updateNavigation();\n      },\n    },\n    'Create a project': {\n      filePath: './assets/json/factory/navigation.json',\n      type: 'slot',\n      actionType: 'updateTitle', // 타이틀 변경\n      callback: () => {\n        this.updateNavigation();\n      },\n    },\n    'Create a story generation tool': {\n      filePath: './assets/json/factory/novel.json',\n      type: 'slotBody',\n    },\n    'Show simulator': {\n      filePath: '/assets/json/factory/simulator.json',\n      type: 'slotBody',\n    },\n    'Create an object tool': {\n      filePath: '/assets/json/factory/object.json',\n      type: 'slotBody',\n    },\n    'Create story data': {\n      filePath: '',\n      type: 'categories',\n      action: () => {\n        this.createStory();\n      },\n    },\n    'Generate object data': {\n      filePath: '',\n      type: 'character',\n      action: () => {\n        this.createCharacter();\n      },\n    },\n    'Generate game logic': {\n      filePath: '',\n      type: '',\n      action: () => {\n        this.createGame();\n      },\n    },\n    'Create a game generation tool': {\n      filePath: '/assets/json/factory/gameLogic.json',\n      type: 'slotBody',\n    },\n    'Remove all content': {\n      filePath: '',\n      type: 'slot',\n      action: () => {\n        // 액션 함수 추가\n        this.clearSlot();\n        this.clearBodySlot();\n        this.loadSlot(); // 슬롯 다시 로드\n        this.loadBodySlot(); // 슬롯 다시 로드\n      },\n    },\n  };\n\n  private createGame() {\n    const actions = [\"\", \"Item\", \"Battle\"];\n  \n    this.globalService.categoryService.categories.forEach((category, index) => {\n        category.data.actionValue = actions[index] ?? \"\"; // index가 0일 경우 빈 값 할당\n    });\n  \n    localStorage.setItem('categories', JSON.stringify(this.globalService.categoryService.categories));\n    console.log('createGame', this.globalService.categoryService.categories);\n    this.globalService.slotService.dockingService.linkComponent('body');\n    this.loadBodySlot();\n  }\n\n  private createCharacter() {\n    this.globalService.httpService.snackBar('Gemini is creating object information...');\n    const storyCategory = this.globalService.categoryService.categories[0]\n    const prompt = this.globalService.promptService.generateCharacterPrompt(storyCategory?.name);\n    this.globalService.aiService.geminiSenderComponent\n      .send(prompt)\n      .subscribe({\n        next: (text) => {\n          const result = text?.parts?.[0]?.text.replace(/\\n/g, '');\n          console.log('result', result);\n          const jsonResult = this.globalService.geminiService.parseJsonFromDelimitedString(result, /```json{/, /}```/, false);\n          console.log('createCharacter result', jsonResult);\n           this.bindCurrentCategoryData(jsonResult, 'character');\n        },\n        error: (error) => {\n        },\n      });\n  }\n\n  private createStory() {\n    this.globalService.httpService.snackBar('AI is creating a story...');\n    const prompt = this.globalService.promptService.generateNovelPrompt();\n    this.globalService.aiService.geminiSenderComponent\n      .send(prompt)\n      .subscribe({\n        next: (text) => {\n          const result = text?.parts?.[0]?.text.replace(/\\n/g, '');\n          console.log('result', result);\n          const jsonResult = this.globalService.geminiService.parseJsonFromDelimitedString(result, /```json{/, /}```/, false);\n          console.log('jsonResult', jsonResult);\n          this.bindCurrentCategoryData(jsonResult, 'categories');\n        },\n        error: (error) => {\n        },\n      });\n  }\n\n\n  private bindCurrentCategoryData(jsonResult: any, type:string) {\n\n    //this.globalService.categoryService.rename(jsonResult.title);\n\n    this.globalService.currentCategoryService.categories = [\n      {\n        id: 1, // 루트 카테고리의 ID는 1로 설정\n        name: `${jsonResult.title} [${jsonResult.genre}]`,\n        rootId: 1, // 루트 카테고리의 rootId는 자기 자신\n        depth: 0, // 루트 카테고리의 depth는 0\n        type: 'title',\n        children: [], \n        data : {\n          contentValue : jsonResult.summary\n        }\n      },\n    ];\n  \n    let nextId = 2; // 다음에 할당할 ID (루트 카테고리 다음부터)\n\n    const processStory = (contents: any[], parentId: number, depth: number) => {\n      for (const item of contents) {\n        const newCategory = {\n          id: nextId++,\n          name: item.name,\n          rootId: 1, // 모든 카테고리의 rootId는 1 (루트 카테고리 ID)\n          depth: depth,\n          type: item.type,\n          children: [],\n          data : {\n            contentValue : item.content\n          }\n        };\n  \n        // 부모 카테고리에 자식 카테고리 ID 추가\n        this.globalService.currentCategoryService.categories.find(c => c.id === parentId)?.children.push(newCategory.id);\n  \n        // 새로운 카테고리 추가\n        this.globalService.currentCategoryService.categories.push(newCategory);\n  \n        // 하위 스토리 처리 (재귀 호출)\n        if (item.children && item.children.length > 0) {\n          processStory(item.children, newCategory.id, depth + 1);\n        }\n      }\n    };\n  \n    // 최상위 스토리부터 처리 시작\n    processStory(jsonResult.content, 1, 1); // 루트 카테고리의 ID는 1, depth는 1부터 시작\n    localStorage.setItem(type, JSON.stringify(this.globalService.currentCategoryService.categories)); \n    this.globalService.slotService.dockingService.linkComponent('body');\n    this.loadBodySlot();\n  }\n\n  private updateNavigation() {\n    const existingSlotData = localStorage.getItem('slot');\n\n    if (existingSlotData) {\n      const parsedExistingData = JSON.parse(existingSlotData);\n\n      const targetSlot = parsedExistingData.find((item: any) => {\n        return (\n          item.selectedIndices &&\n          item.selectedIndices.length > 0 &&\n          item.title === '네비게이션'\n        );\n      });\n\n      if (targetSlot) {\n        // customData가 없으면 생성\n        if (!targetSlot.customData) {\n          targetSlot.customData = {\n            menu: [],\n            title: this.highestSimilarity.name,\n          };\n        }\n\n        // actionType에 따라 동작 분기 처리\n        const commandData = this.commandList[this.highestSimilarity.command];\n        if (\n          commandData &&\n          commandData.actionType === 'addMenuItem' &&\n          targetSlot.customData.menu\n        ) {\n          targetSlot.customData.menu.push({\n            title: this.highestSimilarity.name,\n            components: [],\n          });\n          this.globalService.slotService.currentBodyKey =\n            this.highestSimilarity.name;\n        }\n\n        localStorage.setItem('slot', JSON.stringify(parsedExistingData));\n        this.loadSlot();\n      } else {\n        console.log(\n          \"selectedIndices를 가진 '네비게이션' 슬롯을 찾을 수 없습니다.\"\n        );\n      }\n    } else {\n      console.log(\"로컬 스토리지에 'slot' 데이터가 없습니다.\");\n    }\n  }\n\n  private handleCommand(commandData: CommandData, data?: any) {\n    if (commandData.filePath) {\n      this.createMenu(\n        commandData.filePath,\n        commandData.type!,\n        commandData.callback\n      );\n    } else if (commandData.action) {\n      commandData.action();\n    }\n  }\n\n  private createMenu(filePath: string, type: SlotType, callback?: () => void) {\n    this.getLocalJsonData(filePath).subscribe((data) => {\n      this.processMenuData(data, type);\n      // 메뉴 생성 완료 후 콜백 함수 실행\n      if (callback) {\n        callback();\n      }\n    });\n  }\n\n  private getLocalJsonData(filePath: string): Observable<any> {\n    return this.globalService.httpService.GetJson(filePath);\n  }\n\n  private processMenuData(data: any, type: SlotType) {\n    // actionType 추가\n    const existingSlotBody = localStorage.getItem(type) || '[]';\n\n    let parsedExistingData = JSON.parse(existingSlotBody);\n    const actionType =\n      this.commandList[this.highestSimilarity.command].actionType;\n    if (actionType === 'replaceData') {\n      // actionType 확인\n      parsedExistingData = []; // 기존 데이터 초기화\n    }\n\n    if (Array.isArray(data)) {\n      data.forEach((item: any) => {\n        this.addItemIfNotDuplicate(parsedExistingData, item, type);\n      });\n    } else {\n      this.addItemIfNotDuplicate(parsedExistingData, data, type);\n    }\n\n    localStorage.setItem(type, JSON.stringify(parsedExistingData));\n\n    if (type === 'slot') {\n      this.loadSlot();\n    } else {\n      this.globalService.slotService.dockingService.linkComponent('body');\n      this.loadBodySlot();\n    }\n  }\n\n  private addItemIfNotDuplicate(\n    parsedExistingData: any[],\n    item: any,\n    type: SlotType\n  ) {\n    Object.keys(item).forEach((key) => {\n      item.key = this.globalService.slotService.currentBodyKey;\n    });\n\n    const isDuplicate = parsedExistingData.some(\n      (existingItem: any) =>\n        JSON.stringify(existingItem) === JSON.stringify(item)\n    );\n\n    if (!isDuplicate) {\n      if (type === 'slotBody') {\n        parsedExistingData.push(item);\n      } else {\n        parsedExistingData.push(item);\n      }\n    } else {\n      this.globalService.httpService.snackBar(\n        'Identical schema exists on the page : ' + JSON.stringify(item)\n      );\n    }\n  }\n\n  private sortBySimilarity(commands: Command[]): Command[] {\n    return commands.sort((a, b) => b.similarity - a.similarity);\n  }\n\n  async getAnswer(event: KeyboardEvent | event) {\n    if (event.isComposing) return;\n    if (!this.globalService.geminiService.isUse) return;\n\n    const userInput = this.globalService.geminiInput;\n    const prompt = this.buildSimilarityPrompt(userInput);\n    this.isLoading = true;\n\n    this.globalService.geminiService.createAiData(prompt).subscribe({\n      next: (similaritiesText) => {\n        this.similarities = this.parseSimilarities(similaritiesText);\n\n        // 가장 높은 similaritie 값을 가진 command 찾기 (findHighestSimilarity 함수 사용)\n        this.highestSimilarity = this.sortBySimilarity(this.similarities)[0];\n\n        this.globalService.slotService.currentFactoryMessage = JSON.stringify(\n          this.highestSimilarity\n        );\n\n        if (\n          this.highestSimilarity &&\n          this.highestSimilarity.similarity >= 0.7\n        ) {\n          const commandData = this.commandList[this.highestSimilarity.command];\n          if (commandData && (commandData.filePath || commandData.action)) {\n            this.handleCommand(commandData);\n          }\n        } else {\n          // 유사도가 낮거나 값이 없는 경우 처리 (필요에 따라 추가)\n          this.globalService.httpService.snackBar(\n            'Similarity is low or there are no matching commands:' +\n              JSON.stringify(this.highestSimilarity)\n          );\n        }\n\n        this.globalService.geminiInput = '';\n        this.isLoading = false;\n      },\n\n      error: (error) => {\n        console.log('Gemini API 호출 중 오류 발생:', error);\n        this.globalService.httpService.snackBar('Gemini API 호출 중 오류 발생 : ' + error)\n        // 에러 처리 로직 추가 (필요에 따라)\n      },\n    });\n  }\n\n  private buildSimilarityPrompt(userInput: string): string {\n    const commands = Object.keys(this.commandList);\n    // return `다음 입력 문장과 명령어들의 유사도를 0에서 1 사이의 숫자로 평가해주세요. 1은 완전히 일치하고 0은 완전히 다릅니다. 문장에서 메뉴를 추가해달라고 하면 이름을 찾아줘 없으면 이름의 기본값을 \"No Name\"으로 만들어줘\n    //         입력 문장: ${userInput}\n    //         명령어들: ${commands.join(', ')}\n    //         답변: [{ command:명령어, similarity: 유사도, name: 이름 }] \n    //         `;\n    return `Please evaluate the similarity between the following input sentence and the commands, using a number between 0 and 1. 1 indicates a perfect match, and 0 indicates no match at all. If the sentence requests adding a menu, please identify the name; if no name is provided, set the default name to \"No Name\".\n            Input sentence: ${userInput}\n            Commands: ${commands.join(', ')}\n            Answer: [{ command: command, similarity: similarity, name: name }] \n            `;\n  }\n\n  private parseSimilarities(similaritiesText: any) {\n    console.log('parseSimilarities', similaritiesText);\n    const similarities = similaritiesText?.parts?.[0]?.text.replace(/\\n/g, '');\n    return this.globalService.geminiService.parseJsonFromDelimitedString(similarities, /```json\\[/, /]```/, true);\n  }\n}\n", "<div [ngStyle]=\"style\">\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\n    <mat-label>Gemini Factory</mat-label>\n    <input \n      matInput \n      [placeholder]=\"Placeholder\" \n      [(ngModel)]=\"globalService.geminiInput\" \n      (keydown.enter)=\"getAnswer($event)\"\n      class=\"shimmer-loading\" *ngIf=\"isLoading\" /> \n    <input \n      matInput \n      [placeholder]=\"Placeholder\" \n      [(ngModel)]=\"globalService.geminiInput\" \n      (keydown.enter)=\"getAnswer($event)\"\n      *ngIf=\"!isLoading\" /> \n  </mat-form-field>\n</div>", "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport { ICategoryInfo } from '../../../category-manage/interfaces/category/category.interface';\n\ninterface GroundData {\n  position: { x: number; z: number };\n  direction: string;\n  width: number;\n  height: number;\n  title?: string;\n  type?: string;\n  distance?: number;\n  index: number;\n}\n\n@Component({\n  selector: 'app-babylon-vector-game',\n  templateUrl: './babylon-vector-game.component.html',\n  styleUrls: ['./babylon-vector-game.component.scss'],\n})\nexport class SlotVectorBabaylonGameComponent\n  extends SlotAbstract\n  implements OnInit, AfterViewInit\n{\n  // Get a reference to the canvas element where Babylon.js will render\n  @ViewChild('renderCanvas', { static: true })\n  private renderCanvas!: ElementRef<HTMLCanvasElement>;\n\n  // Babylon.js engine and scene instances\n  private engine!: any;\n  private scene!: any;\n\n  yBotPosionX: number = 0;\n  yBotPosionY: number = 0;\n  yBotPosionZ: number = 0;\n  yBotPosionAngle: number = 0;\n  anotherCircle: any; // anotherCircle 메쉬 저장할 변수 추가\n  private isFirstLargeGround = true; // 전역 변수로 선언\n\n  // animationData를 전역 변수로 선언\n  public animationData = [\n    { label: 'YBot_Idle', range: { from: 0, to: 0 } },\n    { label: 'YBot_Walk', range: { from: 0, to: 0 } },\n    { label: 'YBot_Run', range: { from: 0, to: 0 } },\n    { label: 'YBot_LeftStrafeWalk', range: { from: 0, to: 0 } },\n    { label: 'YBot_RightStrafeWalk', range: { from: 0, to: 0 } },\n  ];\n\n  private boxes: any[] = [];\n  private moveInterval: any; // 움직임을 제어할 인터벌 변수 추가\n  private skeleton: any; // skeleton 변수 추가\n  private animationRanges: any; // animationRanges 변수 추가\n  private originalBoxPositions: any[] = []; // 박스들의 원래 위치 저장할 배열 추가\n  private advancedTexture: any; // 텍스쳐 변수 추가\n  public showLabels: boolean = false; // 라벨 표시 여부를 저장하는 변수 추가\n  private ybotMesh: any; // ybot 메쉬 저장할 변수 추가\n  private circle: any; // 원 메쉬 저장할 변수 추가\n\n  private initialBoxPositions: any[] = []; // 전역 변수로 선언\n  private grounds: any[] = []; // 여러 개의 ground 메쉬를 저장할 배열\n  private selectedGround: any = null; // 선택된 ground를 저장할 변수\n  private initialGroundPositions: any[] = []; // ground들의 초기 위치 저장할 배열 추가\n\n  private initialYbotRotation!: any;\n  private initialAlpha!: number;\n  private initialBeta!: number;\n\n  categories: Array<ICategoryInfo> = [];\n\n  private ybotMoveIndex = 0;\n  private ybotMoveState = 1;\n  private isMoving = false; // 박스들이 움직이고 있는지 상태 저장\n\n  ngOnInit(): void {\n    this.globalService.commandService.current3d = this;\n    this.bindInstance(); // Assuming this is a method from the parent class\n    console.log('vector babylon');\n  }\n\n  ngOnDestroy() {\n    this.stopMovingBoxes();\n  }\n\n  getStoryData() {\n    this.categories = this.globalService.categoryService.load();\n    console.log('3d logic categories', this.categories);\n  }\n\n  ngAfterViewInit(): void {\n    // Set canvas size based on data from the parent component\n    this.size = { width: this.data.size.width, height: this.data.size.height };\n    this.renderCanvas.nativeElement.style.width = this.size.width + 'px';\n    this.renderCanvas.nativeElement.style.height = this.size.height + 'px';\n    this.getStoryData();\n\n    this.load(); // Initialize the Babylon.js scene\n\n    this.advancedTexture =\n      BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI('UI');\n\n    this.createGrounds();\n    //this.createGroundControlPanel();\n    // Handle window resize events (currently commented out)\n    window.onresize = () => {\n      this.size = {\n        width: this.data.size.width,\n        height: this.data.size.height,\n      };\n      this.renderCanvas.nativeElement.style.width = this.size.width + 'px';\n      this.renderCanvas.nativeElement.style.height = this.size.height + 'px';\n      // this.engine.resize();\n    };\n  }\n\n  load() {\n    // Create the Babylon.js engine and scene\n    this.engine = new BABYLON.Engine(this.renderCanvas.nativeElement, true);\n    this.scene = this.createScene();\n    this.engine.runRenderLoop(() => this.scene.render()); // Start the render loop\n    this.scene.enablePhysics(\n      new BABYLON.Vector3(0, -9.81, 0),\n      new BABYLON.CannonJSPlugin()\n    );\n  }\n\n  private createScene() {\n    // Babylon.js 설정\n    this.engine.enableOfflineSupport = false;\n    BABYLON.Animation.AllowMatricesInterpolation = true;\n\n    // 씬 생성\n    const scene = new BABYLON.Scene(this.engine);\n    scene.clearColor = new BABYLON.Color4(0, 0, 0, 0); // Red, Green, Blue, Alpha (0은 완전 투명)\n    // 카메라 설정\n    this.setupCamera(scene);\n\n    // 조명 설정\n    this.setupLighting(scene);\n\n    // 그림자 설정\n    const shadowGenerator = this.setupShadows(scene);\n\n    // 로딩 UI 표시\n    this.engine.displayLoadingUI();\n\n    // 모델 로딩 및 애니메이션 설정\n    this.loadModelAndAnimations(scene, shadowGenerator);\n\n    return scene;\n  }\n\n  private setupLighting(scene: any) {\n    const light = new BABYLON.HemisphericLight(\n      'light1',\n      new BABYLON.Vector3(0, 1, 0),\n      scene\n    );\n    light.intensity = 0.6;\n    light.specular = BABYLON.Color3.Black();\n    const light2 = new BABYLON.DirectionalLight(\n      'dir01',\n      new BABYLON.Vector3(0, -0.5, -1.0),\n      scene\n    );\n    light2.intensity = 0.6;\n    light2.position = new BABYLON.Vector3(0, 5, 5);\n  }\n\n  private setupShadows(scene: any) {\n    const light2 = scene.getLightByName('dir01'); // 이미 생성된 light2 가져오기\n    const shadowGenerator = new BABYLON.ShadowGenerator(1024, light2);\n    shadowGenerator.useBlurExponentialShadowMap = true;\n    shadowGenerator.blurKernel = 32;\n    return shadowGenerator;\n  }\n\n  private loadModelAndAnimations(scene: any, shadowGenerator: any) {\n    BABYLON.SceneLoader.ImportMesh(\n      '',\n      './assets/babylon/scenes/',\n      'dummy3.babylon',\n      scene,\n      (newMeshes: any, particleSystems: any, skeletons: any) => {\n        this.skeleton = skeletons[0];\n\n        // 그림자 및 환경 설정\n        shadowGenerator.addShadowCaster(scene.meshes[0], true);\n        for (let index = 0; index < newMeshes.length; index++) {\n          newMeshes[index].receiveShadows = false;\n        }\n\n        // const helper = scene.createDefaultEnvironment({\n        //   enableGroundShadow: true,\n        // });\n        // helper.setMainColor(BABYLON.Color3.White());\n        // helper.ground.position.y += 0.01;\n\n        this.skeleton.animationPropertiesOverride =\n          new BABYLON.AnimationPropertiesOverride();\n        this.skeleton.animationPropertiesOverride.enableBlending = true;\n        this.skeleton.animationPropertiesOverride.blendingSpeed = 0.05;\n        this.skeleton.animationPropertiesOverride.loopMode = 1;\n\n        this.animationRanges = this.initializeAnimations(scene, skeletons[0]);\n        this.ybotMesh = newMeshes[0];\n        // ybot 메쉬 로딩 후 발밑에 원 생성\n        this.createCircleUnderYbot(scene);\n        this.createAnotherCircleUnderYbot(scene);\n\n        // ybot의 초기 rotation 저장\n        this.initialYbotRotation = this.ybotMesh.rotation.clone();\n\n        // UI 생성 및 버튼 추가\n        this.createUI(scene, this.skeleton, this.animationRanges);\n        //this.boxes = this.createAndArrangeBoxes(scene);\n        //this.createGround()\n        this.engine.hideLoadingUI();\n      }\n    );\n  }\n\n  private createGroundControlPanel() {\n    const panel = new BABYLON.GUI.StackPanel();\n    panel.width = '220px';\n    panel.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\n    panel.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n    this.advancedTexture.addControl(panel);\n\n    let selectedGround: any = null;\n\n    this.grounds.forEach((ground, index) => {\n      this.addButtonToPanel(panel, `Select Ground ${index}`, 'blue', () => {\n        selectedGround = ground;\n      });\n    });\n\n    ['X', 'Y', 'Z'].forEach((axis) => {\n      const slider = new BABYLON.GUI.Slider();\n      slider.minimum = -10;\n      slider.maximum = 10;\n      slider.value = selectedGround\n        ? selectedGround.position[axis.toLowerCase()]\n        : 0;\n      slider.height = '20px';\n      slider.width = '200px';\n      slider.onValueChangedObservable.add((value: any) => {\n        if (selectedGround) {\n          selectedGround.position[axis.toLowerCase()] = value;\n        }\n      });\n\n      const label = new BABYLON.GUI.TextBlock();\n      label.text = `${axis}: `;\n      label.height = '20px';\n      label.width = '40px';\n\n      const container = new BABYLON.GUI.Rectangle();\n      container.height = '40px';\n      container.addControl(label);\n      container.addControl(slider);\n      panel.addControl(container);\n    });\n\n    ['X', 'Z'].forEach((axis) => {\n      const slider = new BABYLON.GUI.Slider();\n      slider.minimum = 0.1;\n      slider.maximum = 5;\n      slider.value = selectedGround\n        ? selectedGround.scaling[axis.toLowerCase()]\n        : 1;\n      slider.height = '20px';\n      slider.width = '200px';\n      slider.onValueChangedObservable.add((value: any) => {\n        if (selectedGround) {\n          selectedGround.scaling[axis.toLowerCase()] = value;\n        }\n      });\n\n      const label = new BABYLON.GUI.TextBlock();\n      label.text = `Scale ${axis}: `;\n      label.height = '20px';\n      label.width = '60px';\n\n      const container = new BABYLON.GUI.Rectangle();\n      container.height = '40px';\n      container.addControl(label);\n      container.addControl(slider);\n      panel.addControl(container);\n    });\n\n    // selectedGround가 변경될 때마다 슬라이더 값 업데이트\n    this.scene.onBeforeRenderObservable.add(() => {\n      ['X', 'Y', 'Z'].forEach((axis) => {\n        const slider = this.advancedTexture.getControlByName(`slider-${axis}`);\n        if (slider) {\n          slider.value = this.selectedGround\n            ? this.selectedGround.position[axis.toLowerCase()]\n            : 0;\n        }\n      });\n      ['X', 'Z'].forEach((axis) => {\n        const slider = this.advancedTexture.getControlByName(\n          `slider-scale-${axis}`\n        );\n        if (slider) {\n          slider.value = this.selectedGround\n            ? this.selectedGround.scaling[axis.toLowerCase()]\n            : 1;\n        }\n      });\n    });\n  }\n\n  generateRandomGroundData(): GroundData[] {\n    // 초기 데이터 리스트 생성 (10번째 데이터는 'large' 타입)\n    const data: GroundData[] = [\n      {\n        position: { x: 0, z: 0 },\n        direction: 'forward',\n        width: 2,\n        height: 5,\n        distance: 5.5,\n        index: 0,\n      },\n      ...Array.from({ length: 4 }, () => ({\n        position: { x: 0, z: 0 },\n        direction: '',\n        width: 2,\n        height: 5,\n        distance: 3.5,\n        index: 1,\n      })),\n      {\n        position: { x: 0, z: 0 },\n        direction: 'forward',\n        width: 2,\n        height: 5,\n        distance: 5.5,\n        index: 5,\n      },\n      {\n        position: { x: 0, z: 0 },\n        direction: 'forward',\n        width: 20,\n        height: 20,\n        distance: 20,\n        type: 'large',\n        title: 'Large Ground',\n        index: 6,\n      },\n    ];\n    const directions: { direction: string; distance: number }[] = [\n      { direction: 'forward', distance: 5.5 },\n      { direction: 'left', distance: 3 },\n      { direction: 'right', distance: 3 },\n    ];\n\n    for (let i = 1; i < 5; i++) {\n      const prevDirection = data[i - 1].direction;\n      let chosenDirection;\n\n      if (prevDirection === 'left' || prevDirection === 'right') {\n        const options = directions\n          .map((d) => (d.direction === 'forward' ? { ...d, distance: 7 } : d))\n          .filter(\n            (d) => d.direction === prevDirection || d.direction === 'forward'\n          );\n\n        chosenDirection = this.randomChoice(options);\n      } else {\n        chosenDirection = this.randomChoice(directions);\n      }\n\n      // Adjust distance if the chosen direction is the same as the previous one\n      if (chosenDirection.direction === prevDirection) {\n        chosenDirection.distance = 5;\n      }\n\n      data[i].direction = chosenDirection.direction;\n      data[i].distance = chosenDirection.distance;\n      data[i].index = i;\n    }\n\n    // console.log('ground data', data);\n\n    return data;\n  }\n\n  randomChoice<T>(arr: T[]): T {\n    const randomIndex = Math.floor(Math.random() * arr.length);\n    return arr[randomIndex];\n  }\n\n  private createGrounds() {\n    this.isFirstLargeGround = true; // 첫 번째 large type ground 플래그 추가\n    const names = this.categories.map((item) => item.name);\n    // 각 name에 대해 10개의 GroundData 배열 생성\n    const result: GroundData[][] = names.map((name, index) => {\n      const groundDataArray: GroundData[] = [];\n      const randomData = this.generateRandomGroundData();\n      // large type의 title에 name 삽입\n      const largeTypeIndex = randomData.findIndex(\n        (item) => item.type === 'large'\n      );\n      if (largeTypeIndex !== -1) {\n        randomData[largeTypeIndex].title = name;\n        randomData[largeTypeIndex].index = index;\n      }\n\n      groundDataArray.push(...randomData);\n      return groundDataArray;\n    });\n\n    // const groundsData = this.generateRandomGroundData();\n\n    let previousGround: any = null;\n    let currentPosition: { x: number; z: number } = { x: 0, z: 0 }; // 시작 위치\n\n    result.forEach((groundsData, i) => {\n      groundsData.forEach((groundData, index) => {\n        const ground = BABYLON.MeshBuilder.CreateGround(\n          'ground' + index,\n          {\n            width: groundData.width,\n            height: groundData.height,\n            subdivisions: 4,\n          },\n          this.scene\n        );\n        ground.material = new BABYLON.StandardMaterial(\n          'groundMaterial' + index,\n          this.scene\n        );\n        ground.material.diffuseColor = new BABYLON.Color3(0.5, 0.5, 0.5);\n        ground.material.alpha = 0.4;\n        ground.isPickable = true;\n        ground.type = groundData.type;\n        ground.width = groundData.width;\n        ground.height = groundData.height;\n        ground.direction = groundData.direction;\n        ground.index = groundData.index;\n        ground.distance = groundData.distance;\n\n\n        ground.onPointerDown = () => {\n          this.selectGround(ground);\n        };\n\n        if (previousGround == null) {\n          previousGround = groundData;\n        }\n\n        this.offsetGround(groundData, currentPosition, previousGround, ground);\n        // 좌표 정보 표시 레이블 생성 및 부착\n        this.createGroundLabel(i, groundData, ground);\n        this.grounds.push(ground);\n        previousGround = groundData;\n\n        // ground 메쉬에 PhysicsImpostor 추가 (각 ground에 대해 개별적으로 추가)\n        ground.physicsImpostor = new BABYLON.PhysicsImpostor(\n          ground,\n          BABYLON.PhysicsImpostor.BoxImpostor,\n          { mass: 0, restitution: 0.9 }, // ground는 움직이지 않도록 질량 0 설정\n          this.scene\n        );\n      });\n    });\n\n    this.initialGroundPositions = this.grounds.map((ground) =>\n      ground.position.clone()\n    );\n  }\n\n  private offsetGround(\n    groundData: GroundData,\n    currentPosition: { x: number; z: number },\n    previousGround: any,\n    ground: any\n  ) {\n    let xOffset = 0;\n    let zOffset = 0;\n\n    switch (groundData.direction) {\n      case 'forward':\n        zOffset = groundData.height - (groundData.height === 20 ? 7.5 : 0);\n        if (previousGround.direction === 'right') {\n          zOffset -= 1.5;\n        }\n        break;\n      case 'right':\n        ground.rotation.y = Math.PI / 2;\n        xOffset =\n          groundData.height -\n          (previousGround.direction === 'forward' ? 3.5 : 1.5);\n        if (previousGround.direction === 'forward') {\n          zOffset = groundData.width + 1.5;\n        }\n        break;\n      case 'left':\n        ground.rotation.y = -Math.PI / 2;\n        xOffset = -(\n          groundData.height -\n          (previousGround.direction === 'forward' ? 3.5 : 1.5)\n        );\n        zOffset =\n          previousGround.direction === 'forward' ? groundData.width + 1.5 : 1.5;\n        break;\n    }\n\n    currentPosition.x += xOffset;\n    currentPosition.z += zOffset;\n\n    ground.position.z = currentPosition.z - 3;\n    ground.position.x = currentPosition.x;\n\n    switch (groundData.direction) {\n      case 'forward':\n        if(groundData.type === 'large') {\n          currentPosition.z += 7.5;\n        }\n        break;\n      case 'right':\n        currentPosition.x += 1.5;\n        break;\n      case 'left':\n        currentPosition.x -= 1.5;\n        currentPosition.z -= 1.5;\n        break;\n    }\n  }\n\n  private createGroundLabel(\n    index: number,\n    groundData: GroundData,\n    ground: any\n  ) {\n    // if (!groundData.title || !this.isFirstLargeGround) return; // large type이고 첫 번째가 아니면 return\n    if (!groundData.title) return; // large type이고 첫 번째가 아니면 return\n\n    const label = new BABYLON.GUI.TextBlock(`ground${index}`);\n    label.text = `(${groundData.title})`;\n    label.color = 'black';\n    label.fontSize = 12;\n    label.isVisible = index === 0 ? true : false;\n\n    // 레이블을 박스에 연결\n    const plane = BABYLON.MeshBuilder.CreatePlane(\n      'plane',\n      { size: 1 },\n      this.scene\n    );\n    plane.parent = ground;\n    plane.position.y = 0.5 / 2 + 0.2;\n    plane.billboardMode = BABYLON.AbstractMesh.BILLBOARDMODE_ALL;\n\n    // plane을 투명하게 설정\n    const planeMaterial = new BABYLON.StandardMaterial(\n      'planeMaterial',\n      this.scene\n    );\n    planeMaterial.alpha = 0; // 완전 투명\n    plane.material = planeMaterial;\n\n    this.advancedTexture.addControl(label);\n    label.linkWithMesh(plane);\n    label.linkOffsetY = -30;\n\n    this.isFirstLargeGround = false; // 첫 번째 large type ground 처리 후 플래그 변경\n  }\n\n  private getCurrentGround(): any {\n    for (const ground of this.grounds) {\n      if (this.ybotMesh.intersectsMesh(ground, false)) {\n        return ground;\n      }\n    }\n    return null; // 어떤 ground 위에도 없을 경우 null 반환\n  }\n\n  private selectGround(ground: any) {\n    this.selectedGround = ground;\n\n    // 선택된 ground를 강조하는 효과 추가 (예시)\n    if (this.selectedGround) {\n      this.selectedGround.material.emissiveColor = new BABYLON.Color3(\n        0.2,\n        0.2,\n        0.2\n      );\n    }\n\n    // 이전에 선택된 ground가 있다면 강조 효과 제거\n    if (this.selectedGround !== ground && this.grounds.includes(ground)) {\n      ground.material.emissiveColor = new BABYLON.Color3(0, 0, 0);\n    }\n  }\n\n  private createAnotherCircleUnderYbot(scene: any) {\n    const radius = 0.5; // 새로운 원의 반지름 설정 (기존 원과 구분하기 위해 약간 작게 설정)\n    const circle = BABYLON.MeshBuilder.CreateDisc(\n      'anotherCircle', // 메쉬 이름을 다르게 설정\n      { radius: radius, tessellation: 32 },\n      scene\n    );\n    this.anotherCircle = circle;\n    circle.position = this.ybotMesh.position.clone();\n    circle.position.y = 0;\n    circle.rotation.x = Math.PI / 2;\n\n    const circleMaterial = new BABYLON.StandardMaterial(\n      'anotherCircleMaterial',\n      scene\n    );\n    circleMaterial.diffuseColor = new BABYLON.Color3(0, 1, 0); // 빨간색 설정\n    circleMaterial.alpha = 0.5; // 투명도 설정\n    circle.material = circleMaterial;\n  }\n\n  private createCircleUnderYbot(scene: any) {\n    const radius = 2; // 반지름을 2로 증가시켜 원의 넓이를 넓힘\n    this.circle = BABYLON.MeshBuilder.CreateDisc(\n      'circle',\n      { radius: radius, tessellation: 32 },\n      scene\n    );\n\n    this.circle.position = this.ybotMesh.position.clone();\n    this.circle.position.y = 0;\n    this.circle.rotation.x = Math.PI / 2;\n\n    const circleMaterial = new BABYLON.StandardMaterial(\n      'circleMaterial',\n      scene\n    );\n    circleMaterial.diffuseColor = new BABYLON.Color3(0.5, 0.5, 0.5);\n    circleMaterial.alpha = 0.5;\n    this.circle.material = circleMaterial;\n  }\n\n  private createAndArrangeBoxes(scene: any) {\n    const numBoxes = 50;\n    const boxSize = 0.5;\n    const areaSize = 10;\n    const minDistanceFromYbot = 3;\n    const minDistanceBetweenBoxes = boxSize * 2;\n    const boxes: any[] = [];\n\n    for (let i = 0; i < numBoxes; i++) {\n      // 무작위 위치 및 높이 생성\n      let x, z, y, isOverlapping;\n      do {\n        x = (Math.random() - 0.5) * areaSize;\n        z = (Math.random() - 0.5) * areaSize;\n        y = Math.random() * 10 + 5;\n\n        isOverlapping = false;\n\n        // ybot과의 거리 체크\n        if (\n          BABYLON.Vector3.Distance(\n            new BABYLON.Vector3(x, 0, z),\n            this.ybotMesh.position\n          ) < minDistanceFromYbot\n        ) {\n          isOverlapping = true;\n          continue;\n        }\n\n        // 다른 박스들과의 거리 체크\n        for (let j = 0; j < i; j++) {\n          if (\n            BABYLON.Vector3.Distance(\n              new BABYLON.Vector3(x, y, z),\n              boxes[j].position\n            ) < minDistanceBetweenBoxes\n          ) {\n            isOverlapping = true;\n            break;\n          }\n        }\n      } while (isOverlapping);\n\n      const box = BABYLON.MeshBuilder.CreateBox(\n        `box${i}`,\n        { size: boxSize },\n        scene\n      );\n      box.position = new BABYLON.Vector3(x, y, z);\n      box.receiveShadows = true;\n\n      const material = new BABYLON.StandardMaterial(`boxMaterial${i}`, scene);\n      material.diffuseColor = new BABYLON.Color3.Random();\n      material.alpha = 0.8;\n      box.material = material;\n\n      // 박스에 물리 효과 추가\n      box.physicsImpostor = new BABYLON.PhysicsImpostor(\n        box,\n        BABYLON.PhysicsImpostor.BoxImpostor,\n        { mass: 1, restitution: 0.2 },\n        scene\n      );\n\n      // 좌표 정보 표시 레이블 생성 및 부착\n      const label = new BABYLON.GUI.TextBlock(`label${i}`);\n      label.text = `(${box.position.x.toFixed(2)}, ${box.position.y.toFixed(\n        2\n      )}, ${box.position.z.toFixed(2)})`;\n      label.color = 'black'; // 레이블 색상을 검은색으로 변경\n      label.fontSize = 12;\n      label.isVisible = this.showLabels; // 초기 레이블 표시 여부 설정\n\n      // 레이블을 박스에 연결\n      const plane = BABYLON.MeshBuilder.CreatePlane(\n        'plane',\n        { size: 1 },\n        scene\n      );\n      plane.parent = box;\n      plane.position.y = boxSize / 2 + 0.2;\n      plane.billboardMode = BABYLON.AbstractMesh.BILLBOARDMODE_ALL;\n\n      // plane의 배경을 투명하게 설정\n      const planeMaterial = new BABYLON.StandardMaterial(\n        'planeMaterial',\n        scene\n      );\n      planeMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0); // 검은색으로 설정하여 텍스트가 잘 보이도록 함\n      planeMaterial.alpha = 0; // 투명하게 설정\n      plane.material = planeMaterial;\n\n      this.advancedTexture.addControl(label);\n      label.linkWithMesh(plane);\n      label.linkOffsetY = -30;\n\n      boxes.push(box);\n      this.originalBoxPositions.push(box.position.clone());\n    }\n\n    // 새로 생성된 박스들을 this.boxes 배열에 추가\n    this.boxes = this.boxes.concat(boxes);\n\n    return boxes;\n  }\n\n  private createUI(scene: any, skeleton: any, animationRanges: any) {\n    // const advancedTexture =\n    //   BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI('UI');\n    // const uiPanel = new BABYLON.GUI.StackPanel();\n    // uiPanel.width = '220px';\n    // uiPanel.fontSize = '14px';\n    // uiPanel.horizontalAlignment =\n    //   BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\n    // uiPanel.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;\n    // advancedTexture.addControl(uiPanel);\n\n    //this.addAnimationControlButtons(uiPanel, scene, skeleton, animationRanges);\n\n    // this.addButtonToPanel(uiPanel, 'Move/Stop Boxes', 'green', () => {\n    //   if (this.isMoving) {\n    //     this.stopMovingBoxes();\n    //   } else {\n    //     this.startMovingBoxes();\n    //   }\n    // });\n\n    // // 박스 원위치 버튼 추가\n    // this.addButtonToPanel(uiPanel, 'Reset Boxes', 'blue', () => {\n    //   this.resetBoxes();\n    // });\n\n    // // 라벨 표시/숨김 버튼 추가\n    // this.addButtonToPanel(uiPanel, 'Toggle Labels', 'orange', () => {\n    //   this.toggleLabels();\n    // });\n\n    // // ybot 오른쪽 회전 버튼 추가\n    // this.addButtonToPanel(uiPanel, 'Rotate Ybot Right', 'purple', () => {\n    //   this.rotateYbotRight();\n    // });\n\n    // // ybot 왼쪽 회전 버튼 추가\n    // this.addButtonToPanel(uiPanel, 'Rotate Ybot Left', 'orange', () => {\n    //   this.rotateYbotLeft();\n    // });\n\n    // // 박스 떨어뜨리기 버튼 추가\n    // this.addButtonToPanel(uiPanel, 'Drop Boxes', 'red', () => {\n    //   this.createAndArrangeBoxes(this.scene);\n    // });\n  }\n\n  // ybot을 왼쪽으로 15도 회전시키는 함수 추가\n  private rotateYbotLeft() {\n    this.ybotMesh.rotation.y -= BABYLON.Tools.ToRadians(15);\n    this.yBotPosionAngle = this.ybotMesh.rotation.y;\n\n    // ybot의 회전에 따라 원도 함께 회전시킵니다.\n    this.circle.rotation.y = this.ybotMesh.rotation.y;\n  }\n\n  private rotateYbotRight() {\n    // ybot을 15도 오른쪽으로 회전시킵니다.\n    this.ybotMesh.rotation.y += BABYLON.Tools.ToRadians(15);\n    this.yBotPosionAngle = this.ybotMesh.rotation.y;\n    // ybot의 회전에 따라 원도 함께 회전시킵니다.\n    this.circle.rotation.y = this.ybotMesh.rotation.y;\n  }\n\n  // 라벨 표시/숨김 토글 함수\n  private toggleLabels() {\n    this.showLabels = !this.showLabels;\n    this.boxes.forEach((_, index) => {\n      const label = this.advancedTexture.getControlByName(`label${index}`);\n      if (label) {\n        label.isVisible = this.showLabels;\n      }\n    });\n  }\n\n  private resetBoxes() {\n    this.stopMovingBoxes(); // 움직임 멈춤\n\n    for (let i = 0; i < this.boxes.length; i++) {\n      this.boxes[i].position = this.originalBoxPositions[i].clone();\n    }\n\n    this.anotherCircle.position.x = 0;\n    this.anotherCircle.position.z = 0;\n    this.anotherCircle.position.y = 0;\n    // ground들도 최초 위치로 이동\n    this.grounds.forEach((ground, index) => {\n      ground.position = this.initialGroundPositions[index].clone();\n    });\n    // ybot의 rotation 초기화\n    this.ybotMesh.rotation = this.initialYbotRotation.clone();\n  }\n\n  // };\n  alternateRotation = true; // 90도 또는 -90도 회전을 번갈아 적용하기 위한 변수\n  totalMovedDistance = 0;\n  moveBoxes() {\n    // ybot의 회전 각도를 라디안 단위로 가져옵니다.\n    const ybotRotationRadians = -this.ybotMesh.rotation.y;\n\n    // ybot의 회전 각도를 기준으로 박스 이동 방향 벡터를 계산합니다.\n    // ybot의 진행 방향과 반대 방향으로 움직이도록 벡터의 방향을 반대로 뒤집습니다.\n    const moveDirection = new BABYLON.Vector3(\n      Math.sin(ybotRotationRadians), // x 방향 이동량 (sin 함수 사용, 부호 반전)\n      0, // y 방향 이동량 (변경 없음)\n      -Math.cos(ybotRotationRadians) // z 방향 이동량 (cos 함수 사용, 부호 반전)\n    ).normalize(); // 벡터의 길이를 1로 정규화하여 이동 속도를 일정하게 유지\n\n    this.ybotMove(this.grounds[this.ybotMoveIndex]);\n\n    this.anotherCircle.position.addInPlace(moveDirection.scale(0.2));\n    this.grounds.forEach((d) => {\n      d?.position?.addInPlace(moveDirection.scale(0.2));\n    });\n\n    this.yBotPosionX = this.anotherCircle.position.x;\n    this.yBotPosionY = this.anotherCircle.position.y;\n    this.yBotPosionZ = this.anotherCircle.position.z;\n\n    this.boxes.forEach((object, index) => {\n      object.position.addInPlace(moveDirection.scale(0.2));\n      // 원과의 충돌 감지\n      if (object.intersectsMesh(this.circle, false)) {\n        const material = object.material;\n        if (material && material instanceof BABYLON.StandardMaterial) {\n          material.diffuseColor = new BABYLON.Color3(0.5, 0.5, 0.5);\n        }\n      }\n    });\n  }\n\n  private ybotMove(currentGround: any) {\n    const currentGroundLength = currentGround.height; // 예시: width를 길이로 사용\n    this.totalMovedDistance += 0.2; // 매 프레임 0.1만큼 이동\n    // console.log(this.grounds[this.ybotMoveIndex].direction, this.grounds[this.ybotMoveIndex].type, this.totalMovedDistance,  this.grounds[this.ybotMoveIndex].distance);\n    if(this.ybotMoveState -1 ===  this.grounds[this.ybotMoveIndex].index &&  this.grounds[this.ybotMoveIndex].type === 'large' && this.totalMovedDistance > 8) {\n      this.stopMovingBoxes();\n      const label = this.advancedTexture.getControlByName(`ground${this.ybotMoveState}`);\n      if (label) {\n        label.isVisible = true;\n        this.ybotMoveState++;\n        this.createAndArrangeBoxes(this.scene);\n      }\n      return;\n    }\n\n    if (this.totalMovedDistance > this.grounds[this.ybotMoveIndex].distance) {\n\n      this.ybotMoveIndex += 1;\n      this.totalMovedDistance = 0;\n      if (this.grounds[this.ybotMoveIndex] == null) {\n        this.stopMovingBoxes();\n        return;\n      }\n      // console.log('this.totalMovedDistance1', this.totalMovedDistance,  this.grounds[this.ybotMoveIndex].type, this.grounds[this.ybotMoveIndex].distance);\n      this.ybotMesh.rotation.y = this.getDirectionFromGroundData(\n        this.grounds[this.ybotMoveIndex].direction\n      );\n\n      this.yBotPosionAngle = this.ybotMesh.rotation.y;\n    }\n  }\n\n  // GroundData의 direction 정보를 기반으로 ybot의 회전 각도를 반환하는 함수\n  getDirectionFromGroundData(groundDirection: string): number {\n    if (groundDirection === 'forward') {\n      return 0; // 0도 (앞으로 이동)\n    } else if (groundDirection === 'right') {\n      return Math.PI / 2; // 90도 (왼쪽으로 회전)\n    } else if (groundDirection === 'left') {\n      return -Math.PI / 2; // -90도 (오른쪽으로 회전)\n    } else {\n      return 0; // 기본값으로 앞으로 이동\n    }\n  }\n\n  startMovingBoxes() {\n    // 박스들의 초기 위치를 저장합니다.\n    this.initialBoxPositions = this.boxes.map((box) => box.position.clone());\n\n    this.moveInterval = setInterval(this.moveBoxes.bind(this), 30);\n\n    // ybot을 run 애니메이션으로 변경\n    if (this.animationRanges && this.animationRanges.runRange) {\n      this.scene.beginAnimation(\n        this.skeleton,\n        this.animationRanges.runRange.from,\n        this.animationRanges.runRange.to,\n        true\n      );\n    }\n    this.isMoving = true;\n  }\n\n  // 박스 움직임 멈추는 함수\n stopMovingBoxes() {\n    clearInterval(this.moveInterval);\n\n    // ybot을 idle 애니메이션으로 변경\n    if (this.animationRanges && this.animationRanges.idleRange) {\n      this.scene.beginAnimation(\n        this.skeleton,\n        this.animationRanges.idleRange.from,\n        this.animationRanges.idleRange.to,\n        true\n      );\n    }\n    this.isMoving = false;\n  }\n\n  private setupCamera(scene: any) {\n    this.initialAlpha = Math.PI / 4; // 초기 alpha 값 설정 (위에서 바라보는 각도)\n    this.initialBeta = Math.PI / 4; // 초기 beta 값 설정 (수평 회전 각도)\n\n    const camera = new BABYLON.ArcRotateCamera(\n      'camera1',\n      this.initialAlpha,\n      this.initialBeta,\n      8,\n      new BABYLON.Vector3(0, 1, 0),\n      scene\n    );\n    camera.attachControl(this.renderCanvas.nativeElement, true);\n    camera.lowerRadiusLimit = 2;\n    camera.upperRadiusLimit = 10;\n    camera.wheelDeltaPercentage = 0.01;\n  }\n\n  private initializeAnimations(scene: any, skeleton: any) {\n    // ... (애니메이션 속성 설정 코드)\n    this.animationData.forEach((data) => {\n      data.range = skeleton.getAnimationRange(data.label);\n    });\n\n    // 기본 애니메이션 재생\n    if (this.animationData[0].range) {\n      scene.beginAnimation(\n        skeleton,\n        this.animationData[0].range.from,\n        this.animationData[0].range.to,\n        true\n      );\n    }\n\n    // animationRanges 객체 생성 및 반환\n    const animationRanges = this.animationData.reduce((acc, data) => {\n      acc[data.label.replace('YBot_', '').toLowerCase() + 'Range'] = data.range;\n      return acc;\n    }, {} as any);\n\n    return animationRanges;\n  }\n\n  private addAnimationControlButtons(\n    panel: any,\n    scene: any,\n    skeleton: any,\n    animationRanges: any // 애니메이션 범위 객체 전달\n  ) {\n    this.animationData.forEach((data) => {\n      this.addButtonToPanel(panel, data.label, 'gray', () => {\n        if (data.range) {\n          scene.beginAnimation(skeleton, data.range.from, data.range.to, true);\n        }\n      });\n    });\n\n    this.addButtonToPanel(panel, 'Play Blend', 'gray', () => {\n      if (animationRanges.walkRange && animationRanges.leftRange) {\n        scene.stopAnimation(skeleton);\n        const walkAnim = scene.beginWeightedAnimation(\n          skeleton,\n          animationRanges.walkRange.from,\n          animationRanges.walkRange.to,\n          0.5,\n          true\n        );\n        const leftAnim = scene.beginWeightedAnimation(\n          skeleton,\n          animationRanges.leftRange.from,\n          animationRanges.leftRange.to,\n          0.5,\n          true\n        );\n\n        walkAnim.syncWith(null);\n        leftAnim.syncWith(walkAnim);\n      }\n    });\n  }\n\n  // Helper function to add buttons to the UI panel\n  private addButtonToPanel(\n    panel: any,\n    label: string,\n    color: string,\n    onClick: () => void\n  ) {\n    const button = BABYLON.GUI.Button.CreateSimpleButton(`but-${label}`, label);\n    button.paddingTop = '10px';\n    button.width = '100px';\n    button.height = '50px';\n    button.color = 'white';\n    button.background = color;\n    button.onPointerDownObservable.add(onClick);\n    panel.addControl(button);\n  }\n}\n", "<div [ngStyle]=\"parentStyle\"> \n  <!-- <div class=\"info-panel\">\n   <h3>3D Logic </h3>\n    X: {{ yBotPosionX | number: '1.2-2' }}<br>\n    Y: {{ yBotPosionY | number: '1.2-2' }}<br>\n    Z: {{ yBotPosionZ | number: '1.2-2' }}<br>\n    Angle: {{ yBotPosionAngle | number: '1.2-2' }}<br>\n  </div> -->\n</div>\n<div [ngStyle]=\"style\">\n  <canvas #renderCanvas></canvas>\n</div>", "import { ComponentRef, Injectable, inject } from \"@angular/core\";\nimport { FighterComponent } from \"../components/fighter/fighter.component\";\nimport { SelectCalculateService } from \"./select-calculate.service\";\nimport { SlotComponent } from \"../slot/slot.component\";\nimport { SlotDefaultComponent } from \"../components/default/default.component\";\nimport { SlotAbstract } from \"../slot.abstract\";\nimport { SlotZoneBodyComponent } from \"../components/zone-body/zone-body.component\";\nimport { SlotNavigationBarComponent } from \"../components/bar-navigation/navigation-bar.component\";\nimport { SlotMenuBarComponent } from \"../components/bar-menu/menu-bar.component\";\nimport { SlotContentListBarComponent } from \"../components/bar-content-list/content-list-bar.component\";\nimport { SlotContentViewBarComponent } from \"../components/bar-content-view/content-view-bar.component\";\nimport { SlotMenuMatComponent } from \"../components/mat-menu/menu-mat.component\";\nimport { SlotAppChatbotComponent } from \"../components/app-chatbot/app-chatbot.component\";\nimport { CharacterMpComponent } from \"../components/character-mp/character-mp.component\";\nimport { CharacterHpComponent } from \"../components/character-hp/character-hp.component\";\nimport { CharacterProfileComponent } from \"../components/character-profile/character-profile.component\";\nimport { FlowListComponent } from \"../components/flow-list/flow-list.component\";\nimport { FlowViewComponent } from \"../components/flow-view/flow-view.component\";\nimport { SlotZoneBodyLineComponent } from \"../components/zone-body-line/zone-body-line.component\";\nimport { SlotSimulatorComponent } from \"../components/simulator/simulator.component\";\nimport { SlotListDragComponent } from \"../items/slot-list-drag/slot-list-drag.component\";\nimport { SlotItemAddComponent } from \"../items/slot-item-add/slot-item-add.component\";\nimport { SlotItemPlayComponent } from \"../items/slot-item-play/slot-item-play.component\";\nimport { FlowItemComponent } from \"../components/flow-item/flow-item.component\";\nimport { SlotItemPinLineComponent } from \"../items/slot-item-pin-line/slot-item-pin-line.component\";\nimport { SlotItemInputComponent } from \"../items/slot-item-input/slot-item-input.component\";\nimport { SlotItemSenderComponent } from \"../items/slot-item-sender/slot-item-sender.component\";\nimport { SlotItemConversationComponent } from \"../items/slot-item-conversation/slot-item-conversation.component\";\nimport { SlotItemPromptComponent } from \"../items/slot-item-prompt/slot-item-prompt.component\";\nimport { SlotVectorBabaylonComponent } from \"../components/babylon-vector/babylon-vector.component\";\nimport { SlotItemCategoryComponent } from \"../items/slot-item-category/slot-item-category.component\";\nimport { SlotStoryInputComponent } from \"../items/slot-story-input/slot-story-input.component\";\nimport { SlotStoryViewerComponent } from \"../items/slot-story-viewer/slot-story-viewer.component\";\nimport { SlotFormInputComponent } from \"../items/forms/slot-form-input/slot-form-input.component\";\nimport { SlotFormTextAreaComponent } from \"../items/forms/slot-form-textarea/slot-form-textarea.component\";\nimport { SlotStoryAiSenderComponent } from \"../items/slot-story-ai-sender/slot-story-ai-sender.component\";\nimport { SlotStorySaveSenderComponent } from \"../items/slot-story-save-sender/slot-story-save-sender.component\";\nimport { SlotItemCharacterComponent } from \"../items/slot-item-character/slot-item-character.component\";\nimport { SlotCharacterInputComponent } from \"../items/slot-character-input/slot-character-input.component\";\nimport { SlotGeminiInputComponent } from \"../items/forms/slot-gemini-input/slot-gemini-input.component\";\nimport { SlotVectorBabaylonGameComponent } from \"../components/babylon-vector-game/babylon-vector-game.component\";\nexport interface State {\n  flag: string;\n  name: string;\n  type: string;\n  component?: any;\n  visible?:boolean;\n}\n@Injectable({ providedIn: 'root' })\nexport class DockingService extends SlotAbstract {\n  protected readonly selectService = inject(SelectCalculateService);\n\n  public allComponents: any[] = [];\n  public slots!: SlotComponent;\n  public slotData: any[] = [];\n  public bodySlotData: any[] = [];\n  // public currentBodyKey = \"TEST 1\";\n\n  states: State[] = [\n    {\n      name: 'AI 소설 + 게임 만들기',\n      type: 'bar',\n      flag: './assets/svg/component1.svg',\n      component : SlotNavigationBarComponent\n    },\n    {\n      name: 'AI Factory',\n      type: 'bar',\n      flag: './assets/svg/component1.svg',\n      component : SlotGeminiInputComponent,\n      visible : true,\n    },\n    {\n      name: 'Menu Bar',\n      type: 'bar',\n      flag: './assets/svg/component2.svg',\n      component : SlotMenuBarComponent\n    },\n    {\n      name: 'Content List',\n      type: 'body',\n      flag: './assets/svg/component3.svg',\n      component : SlotContentListBarComponent\n    },\n    {\n      name: 'Content View',\n      type: 'body',\n      flag: './assets/svg/component4.svg',\n      component : SlotContentViewBarComponent\n    },\n    {\n      name: 'Menu Mat',\n      type: 'menu',\n      flag: './assets/svg/component2.svg',\n      component : SlotMenuMatComponent\n    },\n    {\n      name: 'AI Automated Workspace',\n      type: 'Zone',\n      flag: './assets/svg/component1.svg',\n      component : SlotZoneBodyComponent\n    },\n    {\n      name: 'Body Line Zone',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotZoneBodyLineComponent\n    },\n    {\n      name: 'ChatBot',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotAppChatbotComponent\n    },\n    {\n      name: 'CharacterMP',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : CharacterMpComponent\n    },\n    {\n      name: 'CharacterHP',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : CharacterHpComponent\n    },\n    {\n      name: 'CharacterProfile',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : CharacterProfileComponent\n    },\n    {\n      name: 'FlowList',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : FlowListComponent\n    },\n    {\n      name: 'AI 로직 생성 툴',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : FlowViewComponent\n    },\n    {\n      name: 'Simulator',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotSimulatorComponent\n    },\n    {\n      name: 'item_list_drag',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotListDragComponent\n    },\n    {\n      name: 'item_add',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotItemAddComponent\n    },\n    {\n      name: 'item_play',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotItemPlayComponent\n    },\n    {\n      name: 'flow_item',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : FlowItemComponent\n    },\n    {\n      name: 'flow_item_line_pin',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotItemPinLineComponent\n    }\n    ,\n    {\n      name: '시물레이터 INPUT',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotItemInputComponent\n    },\n    {\n      name: 'AI 소설 수동 입력',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotStoryInputComponent\n    },\n    {\n      name: 'AI 오브젝트 입력',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotCharacterInputComponent\n    },\n    {\n      name: 'AI 소설 타이틀',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotFormInputComponent\n    },\n    {\n      name: 'AI 소설 오브젝트 상세 설정',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotFormTextAreaComponent\n    },\n    {\n      name: 'AI Text Area',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotFormTextAreaComponent,\n      visible : true\n    },\n    {\n      name: 'story_viewer',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotStoryViewerComponent\n    },\n    {\n      name: '시물레이터 AI 버튼',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotItemSenderComponent\n    },\n    {\n      name: 'AI Sender',\n      type: 'bar',\n      flag: './assets/svg/component1.svg',\n      component : SlotStoryAiSenderComponent,\n      visible : true\n    },\n    {\n      name: 'story_save_sender',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotStorySaveSenderComponent\n    },\n    {\n      name: 'flow_item_conversation',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotItemConversationComponent\n    },\n    {\n      name: 'AI 소설 생성 툴',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotItemCategoryComponent\n    },\n    {\n      name: 'AI 오브젝트 생성 툴',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotItemCharacterComponent\n    },\n    {\n      name: 'flow_item_prompt',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotItemPromptComponent\n    }\n    ,\n    {\n      name: '3d-logic',\n      type: 'body',\n      flag: './assets/svg/component1.svg',\n      component : SlotVectorBabaylonGameComponent,\n      visible : true\n    }\n  ];\n\n  setDefault(componetName: string) {\n    const data = this.slots.selectService.sizeInfo;\n    data.title = componetName;\n    data.isBodyBind = this.globalService.slotService.isBodyBind;\n    data.id = this.globalService.logicService.getGUID();\n    data.customData = {};\n    this.createComponent('default', SlotDefaultComponent, data);\n    this.setSlot(data);\n  }\n\n  slotUseGemini() {\n    this.states = this.states.map(state => {\n      if (state.name.toLowerCase().includes('gemini')) {\n        return { ...state, visible: true };\n      } else {\n        return state;\n      }\n    });\n  }\n\n  async forEachAsync<T>(array: T[], callback: (item: T) => Promise<boolean>) {\n    for (const item of array) {\n      const result = await callback(item);\n      if (!result) {\n        break;\n      }\n    }\n  }\n\n  selectedSlot() {\n    this.slots.selectService.sizeInfo.selectedIndices?.forEach(async (d: number) => {\n      const components = this.slots.selectService.squares[d].instance.components;\n      if (components?.length > 0) {\n        await this.flowClicks(components);\n      } else {\n        this.globalService.slotService.openSlotBottomSheet();\n      }\n    });\n  }\n\n  private async flowClicks(components: any) {\n    for (const component of components.toReversed()) {\n      if (!await component.click()) {\n        break;\n      }\n    }\n  }\n\n  clearAllComponent() {\n    this.allComponents.forEach(d => {\n      this.globalService.factoryService.destroyComponent(d.value);\n    });\n    this.slots.selectService.squares.forEach(d => {\n      if (d.instance?.components?.first() instanceof SlotZoneBodyComponent) {\n        d.instance.components.splice(1);\n      }\n    });\n  }\n\n  linkComponent(key:string) {\n    this.allComponents.filter(d => d.key === key).forEach(d => {\n      this.globalService.factoryService.destroyComponent(d.value);\n    });\n    this.slots.selectService.squares.forEach(d => {\n      if (d.instance.components?.first() instanceof SlotZoneBodyComponent) {\n        d.instance.components.splice(1);\n      }\n    });\n  }\n\n  destroyComponent(key:string) {\n    const dialogRef = this.globalService.httpService.openDeleteConfirmDialog();\n    dialogRef.afterClosed().subscribe(result => {\n      if(result) {\n        this.destroyByIndex(key);\n      }\n    })\n  }\n\n  private destroyByIndex(key: string) {\n    this.allComponents.filter(d => d.key === key).forEach(d => {\n      this.globalService.factoryService.destroyComponent(d.value);\n    });\n    this.slots.selectService.squares.forEach(d => {\n      if (d.instance.components?.first() instanceof SlotZoneBodyComponent) {\n        d.instance.components.splice(1);\n      }\n    });\n    this.clearBodySlotByIndex(this.globalService.slotService.currentBodyKey);\n  }\n\n  destroyAllComponent() { \n    this.allComponents.forEach(d => {\n      this.globalService.factoryService.destroyComponent(d.value);\n    });\n    this.slots.selectService.squares.forEach(d => {\n      d.instance.components = [];\n    });\n    //this.clearSlot();\n  }\n\n  createComponent(key:string, component: any, data: any) {\n    this.allComponents.push({\n      key : key,\n      value : this.globalService.factoryService.createComponent(component, this.container, data)\n    });\n  }\n}", "\nimport { Injectable, inject } from \"@angular/core\";\nimport { SelectCalculateService, Square } from \"./select-calculate.service\";\nimport { SlotComponent } from \"../slot/slot.component\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { GlobalService } from \"../../../core/services/global.service\";\n\nexport interface SquareState {\n  squares: any[];\n  moveDirection: string | null; // Stores the current move direction (up, down, left, right)\n}\n\n\n@Injectable({ providedIn: 'root' })\nexport class MoveService {\n  public container: any;\n  public slots!: SlotComponent;\n\n  constructor(\n    public globalService: GlobalService,\n  ) {\n  }\n\n  init(){\n  }\n\n  tset() {\n    const initialState: SquareState = {\n      squares: [],\n      moveDirection: null,\n    };\n    const squareStateSubject = new BehaviorSubject<SquareState>(initialState);\n    squareStateSubject.subscribe(state => {\n      const newSquares = state.squares.map(square => {\n        if (state.moveDirection) {\n          switch (state.moveDirection) {\n            case 'up':\n              if (square.size.y > 0) {\n                return { ...square, y: square.size.y - 1 };\n              } else {\n                return square;\n              }\n            case 'down':\n              if (square.size.y < 17) {\n                return { ...square, y: square.size.y + 1 };\n              } else {\n                return square;\n              }\n            case 'left':\n              if (square.size.x > 0) {\n                return { ...square, x: square.size.x - 1 };\n              } else {\n                return square;\n              }\n            case 'right':\n              if (square.size.x < 14) {\n                return { ...square, x: square.size.x + 1 };\n              } else {\n                return square;\n              }\n          }\n        } else {\n          return square;\n        }\n      });\n    \n      // Update square state with new positions\n      squareStateSubject.next({ ...state, squares: newSquares });\n    });\n  }\n}", "import { Injectable } from \"@angular/core\";\nimport { SlotComponent } from \"../slot/slot.component\";\nimport { GlobalService } from \"../../../core/services/global.service\";\n\n@Injectable({ providedIn: 'root' })\nexport class LinkService {\n  public container: any;\n  public slots!: SlotComponent;\n\n  public navigationData = [\n    {\n      title : \"Please add a menu item\",\n      components : []\n    }\n  ]\n\n  constructor(\n    public globalService: GlobalService,\n  ) {\n     this.globalService.slotService.currentBodyKey =  localStorage.getItem('bodyLink') ?? this.navigationData.first().title;\n  }\n\n  link(title:string) {\n    this.globalService.httpService.snackBar(\"link : \" + title);\n    /**\n     * 1. 등록된 컴포넌트 제거하고 새로운 컴포넌트 배치한다.\n     * 2. 컴포넌트 들은 Array로 배치가 가능하며 좌표 정보를 가지고 있어야 한다. \n     * 3. BODY 영역을 정의 해야 한다. 그래야 바디영역에 포함된 내용을 삭제 할 수 있다.\n     * 4. BOdy 영역에서는 추가 선택이 되어야 한다. 그리고 바디 영역에서도 자녀 컴포넌트가 계산 되어야 한다. \n     */\n  }\n\n}", "import {\n  Component,\n  ElementRef,\n  HostListener,\n  ViewChild,\n  inject,\n} from '@angular/core';\nimport { DockingService } from '../service/docking.service';\nimport { SelectCalculateService } from '../service/select-calculate.service';\nimport { MoveService } from '../service/move.service';\nimport { SlotAbstract } from '../slot.abstract';\nimport { LinkService } from '../service/link.service';\nimport { MatDrawer } from '@angular/material/sidenav';\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\nimport { GlobalService } from '../../../core/services/global.service';\nimport { NullCheckParameters } from '../../../../src/app/app.component';\nimport { timer } from 'rxjs';\n@Component({\n  selector: 'app-slot',\n  templateUrl: './slot.component.html',\n  styleUrl: './slot.component.scss',\n})\nexport class SlotComponent extends SlotAbstract {\n  @ViewChild('slotDrawer', { static: true }) public slotDrawer!: MatDrawer;\n  @ViewChild('squreContainer', { static: true })\n  public squreContainer!: ElementRef;\n\n  public readonly selectService = inject(SelectCalculateService);\n  protected readonly dockingtService = inject(DockingService);\n  protected readonly moveService = inject(MoveService);\n  public readonly linkService = inject(LinkService);\n\n  public width = 1090;\n\n  public innerStyle = {\n    width: `${window.innerWidth - 20}px`,\n  };\n\n  constructor(public override globalService: GlobalService) {\n    super(globalService);\n  }\n\n  ngOnInit(): void {\n    super.reduxData();\n    this.selectService.calculateSquares();\n\n    timer(1000).subscribe((d) => {\n      // // this.startWidth 계산\n      const contentWidth = (document.querySelector('mat-drawer-content') as any)\n        .offsetWidth;\n\n      const startWidth = (window.innerWidth - contentWidth) / 2;\n\n      console.log(contentWidth, startWidth);\n\n      this.selectService.startWidth = startWidth;\n    });\n\n    //this.dockingtService.slotUseGemini();\n    // this.selectService.generateTicks();\n    this.dockingtService.container = this.container;\n    this.globalService.slotService.dockingService = this.dockingtService;\n    this.dockingtService.slots = this;\n    this.moveService.slots = this;\n    this.globalService.slotService.slot = this;\n    this.loadSlot();\n    this.width = this.selectService.containerWidth;\n    // this.geminiTest();\n  }\n\n  onWhiteChange(event: MatSlideToggleChange) {\n    this.globalService.isWhite = event.checked;\n    this.globalService.isWhite = event.checked;\n  }\n\n  onToggleChange(event: MatSlideToggleChange) {\n    this.globalService.slotService.isSlotWork = event.checked;\n    this.globalService.slotService.isBodyMatch = event.checked;\n  }\n\n  onGeminiChange(event: MatSlideToggleChange) {\n    this.globalService.geminiService.isUse = event.checked;\n  }\n\n  onPlayChange(event: MatSlideToggleChange) {\n    this.globalService.geminiService.isPlay = event.checked;\n    this.globalService.categoryService.currentSimulator.reload();\n  }\n\n  close() {\n    this.slotDrawer.toggle();\n  }\n\n  @HostListener('window:resize', ['$event'])\n  onResize(event: event) {\n    // this.selectService.horizontalTicks = [];\n    // this.selectService.verticalTicks = [];\n    // this.selectService.calculateSquares();\n    // this.selectService.generateTicks();\n  }\n\n  zoomIn() {\n    this.selectService.zoomLevel *= 1.1; // 줌 인 시 줌 수준 증가\n    this.selectService.calculateSquares();\n  }\n\n  zoomOut() {\n    this.selectService.zoomLevel *= 0.9; // 줌 아웃 시 줌 수준 감소\n    this.selectService.calculateSquares();\n  }\n\n  calculateEvent(event: MouseEvent) {\n    const { clientX, clientY } = event;\n    this.selectService.mouseX = clientX;\n    this.selectService.mouseY = clientY;\n    this.selectService.calculateCurrentSquareIndex(clientX, clientY);\n    this.globalService.slotService.flowViewComponent?.onLineEvent(\n      this.globalService.slotService.isDrawLine,\n      clientX,\n      clientY\n    );\n\n    if (!this.selectService.dragging) return;\n    this.selectService.dragEnd = {\n      x: event.clientX,\n      y: event.clientY - this.selectService.squareSize,\n    };\n  }\n\n  //@HostListener('mousedown', ['$event'])\n  @NullCheckParameters\n  onMouseDown(\n    event: MouseEvent,\n    isPossibleSlotDrag: boolean,\n    isSlotWork: boolean\n  ): void {\n    const target = event.target as HTMLElement;\n    this.selectService.dragging = true;\n    this.selectService.dragStart = {\n      x: event.clientX,\n      y: event.clientY - this.selectService.startHeight,\n    };\n    this.selectService.dragEnd = null; // 드래그 시작 시 종료 지점을 초기화\n    this.selectService.squares.forEach((square) => {\n      square.isSelected = false;\n    });\n  }\n\n  // @HostListener('mousemove', ['$event'])\n  @NullCheckParameters\n  onMouseMove(\n    event: MouseEvent,\n    isPossibleSlotDrag: boolean,\n    isSlotWork: boolean\n  ): void {\n    const selection = window.getSelection();\n    if (selection && !selection.isCollapsed) {\n      selection.removeAllRanges(); // 선택 영역 제거\n    }\n\n    this.calculateEvent(event);\n    event.preventDefault();\n  }\n\n  // @HostListener('mouseup', ['$event'])\n  @NullCheckParameters\n  onMouseUp(\n    event: MouseEvent,\n    isPossibleSlotDrag: boolean,\n    isSlotWork: boolean\n  ): void {\n    const target = event.target as HTMLElement;\n    this.calculateEvent(event);\n    this.selectService.dragging = false;\n\n    // TODO : 개선필요\n\n    if (this.globalService.slotService.isDrawLine) return;\n    this.selectService.selection();\n    this.dockingtService.selectedSlot();\n  }\n}\n", "<!-- <div class=\"ruler-horizontal\">\n    <div *ngFor=\"let tick of selectService.horizontalTicks\" class=\"tick\" [style.left.px]=\"tick\"></div>\n    <span>{{ selectService.mouseY }}px</span>\n</div>\n<div class=\"ruler-vertical\">\n    <div *ngFor=\"let tick of selectService.verticalTicks\" class=\"tick\" [style.top.px]=\"tick\"></div>\n    <span>{{ selectService.mouseX }}px</span>\n</div>\n<div class=\"mouse-line-horizontal\" [style.top.px]=\"selectService.mouseY\"></div>\n<div class=\"mouse-line-vertical\" [style.left.px]=\"selectService.mouseX\"></div> -->\n<!-- <div class=\"info\">Squares: {{ selectService.squares.length }}, {{ selectService.currentSquareIndex }}, {{\n    selectService.draggedColumns }}, {{ selectService.draggedRows }} [{{ selectService.sizeInfo.selectedIndices }}]</div> -->\n<div class=\"info\" [style]=\"innerStyle\">\n    <div class=\"info-text-container\">\n        <span class=\"squares-key\">{{globalService.slotService.currentBodyKey}}</span>\n        <span class=\"squares-message\">{{globalService.slotService.currentFactoryMessage}}</span>\n        <span class=\"squares-length-value\">{{ selectService.squares.length }}</span>,\n        <span class=\"current-square-index\">{{ selectService.currentSquareIndex }}</span>,\n        <span class=\"dragged-columns\">{{ selectService.draggedColumns }}</span>,\n        <span class=\"dragged-rows\">{{ selectService.draggedRows }}</span>\n        <span class=\"selected-indices\"> [{{ selectService.sizeInfo.selectedIndices }}]</span>\n    </div>\n    <div class=\"toggle-container\">\n        <mat-slide-toggle (change)=\"onWhiteChange($event)\"\n        [checked]=\"globalService.isWhite\">white</mat-slide-toggle> \n        <mat-slide-toggle (change)=\"onToggleChange($event)\"\n            [checked]=\"globalService.slotService.isSlotWork\">factory</mat-slide-toggle>\n        <mat-slide-toggle (change)=\"onGeminiChange($event)\"\n            [checked]=\"globalService.geminiService.isUse\">ai</mat-slide-toggle>\n        <mat-slide-toggle (change)=\"onPlayChange($event)\"\n            [checked]=\"globalService.geminiService.isPlay\">play</mat-slide-toggle> \n    </div>    \n</div>\n\n<mat-drawer-container hasBackdrop=\"false\" [style]=\"innerStyle\">\n    <mat-drawer #slotDrawer mode=\"over\" position=\"end\" [style.width.px]=\"300\">\n        <div class=\"mat-drawer-close\">\n            <button mat-icon-button (click)=\"close()\">\n                <mat-icon>close</mat-icon>\n            </button>\n        </div>\n        <div style=\"margin-top: 50px; margin-left: 20px;\">\n            <app-dynamic-form key=\"form-values\" [button]=\"null\"></app-dynamic-form>\n        </div>\n    </mat-drawer>\n    <mat-drawer-content\n        (mousedown)=\"onMouseDown($event, globalService.slotService.isPossibleSlotDrag, globalService.slotService.isSlotWork)\"\n        (mousemove)=\"onMouseMove($event, globalService.slotService.isPossibleSlotDrag, globalService.slotService.isSlotWork)\"\n        (mouseup)=\"onMouseUp($event, globalService.slotService.isPossibleSlotDrag, globalService.slotService.isSlotWork)\">\n        <div *ngIf=\"!globalService.slotService.isDrawLine && selectService.dragStart && selectService.dragEnd\"\n            [ngStyle]=\"selectService.calculateDragBoxStyle()\" class=\"drag-box\"></div>\n        <div #squreContainer class=\"square-container\" [style.width.px]=\"width\">\n            <app-square *ngFor=\"let square of selectService.squares; let index = index\" [index]=\"square.index\"\n                [data]=\"square\" [isSelected]=\"square.isSelected\" [squareSize]=\"selectService.squareSize\"\n                [fontSize]=\"selectService.fontSize\">\n            </app-square>\n        </div>\n        <ng-container #container></ng-container>\n    </mat-drawer-content>\n</mat-drawer-container>", "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SlotComponent } from './slot/slot.component';\n\nexport const routes: Routes = [\n    {\n        path: '',\n        component:SlotComponent\n    }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SlotRoutingModule { }", "import { Component, Input } from '@angular/core';\nimport { DataAbstract } from '../../../core/classes/data.abstract';\n\n@Component({\n  selector: 'app-square',\n  templateUrl: './square.component.html',\n  styleUrl: './square.component.scss'\n})\nexport class SquareComponent extends DataAbstract {\n  @Input() index!: number;\n\n  private _isSelected: boolean = false;\n  @Input()\n  get isSelected(): boolean {\n    return this._isSelected;\n  }\n  set isSelected(value: boolean) {\n    this._isSelected = value;\n  }\n  @Input() squareSize!: number;\n  @Input() fontSize!: number;\n\n  public components:any=[];\n\n  constructor() {\n    super()\n  }\n\n  public override dataInit(): void {\n    this.data.instance = this;\n  }\n\n  public bind(instance:any) {\n    this.components.push(instance)\n  }\n}\n", "<div class=\"square\" \n     [class.selected]=\"isSelected\"\n     [ngStyle]=\"{'width.px': squareSize, 'height.px': squareSize, 'font-size.px': fontSize}\">\n     <span>{{ index }}</span>\n</div>", "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-linear-algebra',\n  templateUrl: './linear-algebra.component.html',\n  styleUrl: './linear-algebra.component.scss'\n})\nexport class LinearAlgebraComponent {\n  problem: string = '';\n\n\n  constructor() { \n    this.problem = this.generateProblem();\n  }\n\n  generateMatrix(): number[][] {\n    return [\n      [Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)],\n      [Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)]\n    ];\n  }\n\n  generateProblem(): string {\n    const matrixA = this.generateMatrix();\n    const matrixB = this.generateMatrix();\n    const operation = Math.random() > 0.5 ? 'add' : 'multiply';\n    \n    let problem = `Solve the following matrix ${operation}: \\nMatrix A: ${JSON.stringify(matrixA)} \\nMatrix B: ${JSON.stringify(matrixB)}`;\n    return problem;\n  }\n}\n", "<div>\n    <h2>Linear Algebra Problem</h2>\n    <p>{{problem}}</p>\n    <button (click)=\"generateProblem()\">Generate New Problem</button>\n  </div>", "import { Component } from '@angular/core';\nimport { timer } from 'rxjs';\nimport { SvgAbstract } from '../../svg/svg.abstract';\n\n@Component({\n  selector: 'app-fighter',\n  templateUrl: './fighter.component.html',\n  styleUrl: './fighter.component.scss'\n})\nexport class FighterComponent extends SvgAbstract {\n\n  public style = {\n    width: '100px',\n    height: '100px',\n    backgroundColor: this.getRandomColor(),\n    position: 'absolute',\n    overflow: 'hidden',\n    textOverflow : 'ellipsis',\n    whiteSpace: 'nowrap',\n    top: '10px',\n    left: '40px',\n    opacity: '0.5'\n  }\n\n  public override dataInit(): void {\n    \n    this.data.instance.bind(this);\n\n    this.title = `${this.data.character?.name ?? 'NONE'}`;\n    this.style.width = `${this.data.size.width}px`;\n    this.style.height = `${this.data.size.height}px`;\n    this.style.left =  `${this.data.size.position.x}px`;\n    this.style.top =  `${this.data.size.position.y}px`;\n  }\n}\n", "<div [ngStyle]=\"style\">\n    {{title}}\n</div>", "import { ValidatorFn, AbstractControl, ValidationErrors } from \"@angular/forms\";\n\n// Define type and use as literal type\nexport const EMAIL_DOMAIN_TYPE = {\n  SM: 'sm.ac.kr',\n  SOOKMYUNG: 'sookmyung.ac.kr'\n} as const;\nexport type EMAIL_DOMAIN_TYPE = typeof EMAIL_DOMAIN_TYPE[keyof typeof EMAIL_DOMAIN_TYPE];\n\nexport class CustomValidator {\n\n  public emailDomain(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (control.value && control.value.indexOf('@') !== -1) {\n        const [_, domain] = control.value.split('@');\n\n        if (!Object.values(EMAIL_DOMAIN_TYPE).includes(domain as EMAIL_DOMAIN_TYPE)) {\n          return { domain: true };\n        }\n      }\n      return null;\n    }\n  }\n\n  public maxLength(maxLength: string): ValidatorFn {\n    let [_, stringNum] = maxLength.split('-');\n    let length = parseInt(stringNum, 10);\n\n    return (control: AbstractControl): ValidationErrors | null => {\n      return control.value.length > length ? { maxLength: length } : null;\n    }\n  }\n\n  public minLength(minLength: string) {\n    let [_, stringNum] = minLength.split('-');\n    let length = parseInt(stringNum, 10);\n\n    return (control: AbstractControl): ValidationErrors | null => {\n      return control.value.length < length ? { minLength: length } : null;\n    }\n  }\n\n  /**\n   * \n   * @returns \n      최소 영어 대소문자, 숫자, 특수문자를 각각 하나 이상 포함한 8자 이상 16자 이하\n      (0-9 하나이상 포함, a-zA-Z 하나 이상 포함, !@#$%^&* 하나 이상 포함)\n      - minLength-8\n      - maxLength-16\n   */\n  public password(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const value = control.value;\n\n      const hasUpperCase = /[A-Z]/.test(value);\n      const hasLowerCase = /[a-z]/.test(value);\n      const hasNumeric = /[0-9]/.test(value);\n      const hasSpecialChar = /[!@#$%^&*]/.test(value);\n\n      const passwordValid = (hasUpperCase || hasLowerCase) && hasNumeric && hasSpecialChar;\n      return !passwordValid ? { password: true } : null;\n    }\n  }\n\n  public passwordMatch(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const password = control.parent?.get('password')?.value;\n      const confirmPassword = control.value;\n\n      return password === confirmPassword ? null : { confirmPassword: true };\n    }\n  }\n\n  public koreanEnglish(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const koreanEnglishPattern = /^[ㄱ-ㅎ가-힣a-zA-Z]+$/;\n      const isValid = koreanEnglishPattern.test(control.value);\n      return !isValid ? { koreanEnglish: true } : null;\n    }\n  }\n\n  /**\n   * \n   * 특수문자를 제외한 (ㄱ-ㅎ가-힣a-zA-Z0-9-_)\n   */\n  public textPattern(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const nicknamePattern = /^[ㄱ-ㅎ가-힣a-zA-Z0-9-_]+$/;\n      const isValid = nicknamePattern.test(control.value);\n      return !isValid ? { textPattern: true } : null;\n    }\n  }\n\n  /** 숫자인지를 확인하는 */\n  public isStudentNumber(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const isNumber = !isNaN(Number(control.value));\n      const isSeven = /^\\d{7}$/.test(control.value);\n      return !(isNumber && isSeven) ? { studentNumber: true } : null;\n    }\n  }\n\n  public isNumber(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const isNumber = !isNaN(Number(control.value));\n      return !isNumber ? { studentNumber: true } : null;\n    }\n  }\n\n}", "import {\n  Component,\n  EventEmitter,\n  Injectable,\n  Input,\n  OnInit,\n  Output,\n  inject,\n} from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { CustomValidator } from './custom-validator';\nimport { Observable, map, startWith } from 'rxjs';\nimport { HttpService } from '../../../../core/services/http.service';\nimport { GlobalService } from '../../../../core/services/global.service';\n\nexport const BLUE1 = '#00368E';\nexport const BLUE2 = '#5F86BF';\nexport const BLUE3 = '#BFD7EC';\nexport const BLUE4 = '#DDEBF6';\n\nexport const GRAY1 = '#C7C7C7';\nexport const GRAY2 = '#F0F0F0';\nexport const GRAY3 = '#F8F8F8';\n\nexport const PINK1 = '#FF0000';\nexport const PINK2 = '#FFE8E8';\n\nexport interface IGroup {\n  main: string;\n  sub: string[];\n}\n\nexport interface IControl {\n  category: string;\n  type: string;\n  label?: string;\n  name: string;\n  value?: any;\n  group?: IGroup[]; // select type을 위한 group\n  placeholder?: string;\n  validations?: IValidation[];\n  styles?: IStyle;\n}\n\nexport interface IValidation {\n  name: string;\n  validator: string;\n  message: string;\n}\n\nexport interface IStyle {\n  layout?: any;\n  label?: any;\n  input?: any;\n  textarea?: any;\n  password?: any;\n  radioButton?: any;\n  datepicker?: any;\n}\n\nexport interface IFormGroup extends IControl {\n  controls: IControl[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormService {\n  private readonly httpService = inject(HttpService);\n\n  public getFormStructure() {\n    return this.httpService.GetJson('./assets/json/form.json');\n  }\n}\n\nexport interface IKeyValue {\n  key: string;\n  value: any;\n}\n\nexport const _filter = (opt: string[], value: string) => {\n  const filterValue = value.toLowerCase();\n  return opt.filter((item) => item.toLowerCase().includes(filterValue));\n};\n\n@Component({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  styleUrl: './dynamic-form.component.scss',\n})\nexport class DynamicFormComponent implements OnInit {\n  @Input() key: string = 'sign-up';\n  @Input() button: string | null = 'Submit';\n\n  @Output() submit = new EventEmitter<any>();\n  @Output() enter = new EventEmitter<any>();\n\n  public BLUE1 = BLUE1;\n  public isLoading: boolean = true;\n  public formData: (IControl | IFormGroup)[] = [];\n  public dynamicForm!: FormGroup;\n  private customValidator = new CustomValidator();\n  public groupOptions: Observable<IGroup[]>[] = [];\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public formService: FormService,\n    public globalService: GlobalService\n  ) {}\n\n  onLoadForm(d:IKeyValue[]) {\n      this.formData = d.find((item: IKeyValue) => item.key === this.key)?.value;\n\n      let entireGroup: { [key: string]: any } = {};\n      this.formData.forEach((control: IControl | IFormGroup) => {\n        // 그룹 폼일 때,\n        if (control.category === 'group') {\n          let formGroup: { [key: string]: any } = {};\n\n          (control as IFormGroup).controls.forEach((groupControl) => {\n            let validators: ValidatorFn[] = [];\n            if (groupControl.validations != null) {\n              validators = this.addValidation(groupControl.validations);\n            }\n            formGroup[groupControl.name] = [\n              groupControl.value || '',\n              validators,\n            ];\n          });\n\n          entireGroup[control.name] = this.formBuilder.group(formGroup);\n        }\n        // 단일 폼일 때,\n        else {\n          let validators: ValidatorFn[] = [];\n          if (control.validations != null) {\n            validators = this.addValidation(control.validations);\n          }\n          entireGroup[control.name] = [control.value || '', validators];\n        }\n      });\n\n      this.dynamicForm = this.formBuilder.group(entireGroup);\n\n      this.formData.forEach((control: IControl | IFormGroup) => {\n        if (control.category === 'select') {\n          this.groupOptions.push(\n            this.dynamicForm.get(control.name)!.valueChanges.pipe(\n              startWith(''),\n              map((value) =>\n                this.filterGroup(control.group as IGroup[], value || '')\n              )\n            )\n          );\n        }\n      });\n\n      this.isLoading = false;\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.globalService.slotService.dynamicForm = this;\n  }\n\n  private filterGroup(currentGroup: IGroup[], value: string): IGroup[] {\n    if (value) {\n      return currentGroup\n        .map((group) => ({ main: group.main, sub: _filter(group.sub, value) }))\n        .filter((group) => group.sub.length > 0);\n    }\n    return currentGroup;\n  }\n\n  private addValidation(validations: IValidation[]): ValidatorFn[] {\n    let controlValidators: ValidatorFn[] = [];\n    if (validations) {\n      validations.forEach((validation: IValidation) => {\n        if (validation.validator === 'required')\n          controlValidators.push(Validators.required);\n        if (validation.validator === 'email')\n          controlValidators.push(Validators.email);\n        if (validation.validator == 'email-domain')\n          controlValidators.push(this.customValidator.emailDomain());\n        if (validation.validator.startsWith('maxLength'))\n          controlValidators.push(\n            this.customValidator.maxLength(validation.validator)\n          );\n        if (validation.validator.startsWith('minLength'))\n          controlValidators.push(\n            this.customValidator.minLength(validation.validator)\n          );\n        if (validation.validator === 'password')\n          controlValidators.push(this.customValidator.password());\n        if (validation.validator === 'password-match')\n          controlValidators.push(this.customValidator.passwordMatch());\n        if (validation.validator === 'koreanEnglish')\n          controlValidators.push(this.customValidator.koreanEnglish());\n        if (validation.validator === 'textPattern')\n          controlValidators.push(this.customValidator.textPattern());\n        if (validation.validator === 'isStudentNumber')\n          controlValidators.push(this.customValidator.isStudentNumber());\n        if (validation.validator === 'isNumber')\n          controlValidators.push(this.customValidator.isNumber());\n      });\n    }\n    return controlValidators;\n  }\n\n  public onSubmit(event: any) {\n    event.stopPropagation();\n\n    if (this.dynamicForm.valid) {\n      this.submit.emit({ value: this.dynamicForm.value });\n    }\n  }\n\n  public onEnterSubmit(event: any) {\n    event.stopPropagation();\n\n    if (this.dynamicForm.valid) {\n      this.enter.emit({ value: this.dynamicForm.value });\n    }\n  }\n\n  public isIFormGroup(control: IControl): control is IFormGroup {\n    return (control as IFormGroup).controls !== undefined;\n  }\n}\n", "@if(!isLoading) {\n    <form [formGroup]=\"dynamicForm\" (keydown.enter)=\"onEnterSubmit($event)\" (ngSubmit)=\"onSubmit($event)\" class=\"form-full-layout hide-scrollbar\">\n      @for (control of formData; track $index) {\n      @if (control.category === 'group' && isIFormGroup(control)) {\n      <div [formGroupName]=\"control.name\">\n        @for (groupControl of control.controls; track $index) {\n        <mat-form-field appearance=\"outline\">\n          <mat-label>{{ groupControl.label }}</mat-label>\n          <input matInput [type]=\"groupControl.type\" [placeholder]=\"groupControl.placeholder || ''\"\n            [formControlName]=\"groupControl.name\">\n        </mat-form-field>\n        <!-- @if (dynamicMultiForm.get(control.name)?.get(groupControl.name)?.invalid && dynamicMultiForm.get(control.name)?.get(groupControl.name)?.touched) {\n                  <mat-error style=\"margin-bottom: 10px;\">{{ getErrorMessage(control, groupControl) }}</mat-error>\n                } -->\n        }\n      </div>\n      }\n      @if (control.category === 'textarea') {\n      <app-textarea [control]=\"control\" [dynamicForm]=\"dynamicForm\"></app-textarea>\n      }\n      @if (control.category === 'input') {\n      <app-input [control]=\"control\" [dynamicForm]=\"dynamicForm\"></app-input>\n      }\n      @if (control.category === 'password') {\n      <app-password [control]=\"control\" [dynamicForm]=\"dynamicForm\"></app-password>\n      }\n      @if (control.category === 'select') {\n      <app-select [control]=\"control\" [dynamicForm]=\"dynamicForm\" [formStructure]=\"formData\"\n        [groupOptions]=\"groupOptions\"></app-select>\n      }\n      @if (control.category === 'radio-button') {\n      <app-radio-button [control]=\"control\" [dynamicForm]=\"dynamicForm\"></app-radio-button>\n      }\n      @if (control.category === 'datepicker') {\n      <app-date-picker [control]=\"control\" [dynamicForm]=\"dynamicForm\"></app-date-picker>\n      }\n      }\n      @if (button != null) {\n      <button mat-flat-button [ngStyle]=\"{ 'background-color': BLUE1, 'color': 'white' }\" type=\"submit\">{{ button }}</button>\n      }\n    </form>\n    }", "import { Directive, inject, Input } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { FormService, IControl, IFormGroup } from \"./dynamic-form/dynamic-form.component\";\n\n@Directive()\nexport abstract class FormAbstract {\n\n  public readonly formService = inject(FormService);\n\n  @Input() control!: IControl | IFormGroup;\n  @Input() dynamicForm!: FormGroup;\n\n  public getErrorMessage(control: IControl | IFormGroup, groupControl: IControl | null) {\n    if (groupControl == null) {\n      const formControl = this.dynamicForm.get(control.name);\n      if (control.validations == null) return '';\n\n      for (let validation of control.validations) {\n        if (formControl?.hasError(validation.name)) {\n          return validation.message;\n        }\n      }\n      return '';\n    }\n    else {\n      const formGroupControl = this.dynamicForm.get(control.name)?.get(groupControl.name);\n      if (groupControl.validations == null) return '';\n\n      for (let validation of groupControl.validations) {\n        if (formGroupControl?.hasError(validation.name)) {\n          return validation.message;\n        }\n      }\n      return '';\n    }\n  }\n\n}", "import { Component } from '@angular/core';\nimport { FormAbstract } from '../form.abstract';\n\n@Component({\n  selector: 'app-textarea',\n  templateUrl: './textarea.component.html',\n  styleUrl: './textarea.component.scss'\n})\nexport class TextareaComponent extends FormAbstract {\n\n}", "<div [formGroup]=\"dynamicForm\" [ngStyle]=\"control.styles?.layout\">\n    @if (control.label) {\n    <div [ngStyle]=\"control.styles?.label\">{{ control.label }}</div>\n    }\n    @if (control.styles?.textarea) {\n    <textarea [ngStyle]=\"control.styles?.textarea\" [placeholder]=\"control.placeholder\"\n      [formControlName]=\"control.name\"></textarea>\n    }\n    @else {\n    <textarea [placeholder]=\"control.placeholder\" [formControlName]=\"control.name\"></textarea>\n    }\n    @if (dynamicForm.get(control.name)?.invalid && dynamicForm.get(control.name)?.touched) {\n    <mat-error style=\"color: #BA1A1A;\">{{ getErrorMessage(control, null) }}</mat-error>\n    }\n  </div>", "import { Component } from '@angular/core';\nimport { FormAbstract } from '../form.abstract';\nimport { GlobalService } from '../../../../core/services/global.service';\n\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrl: './input.component.scss'\n})\nexport class InputComponent extends FormAbstract {\n  \n  constructor(public globalService:GlobalService) {\n    super()\n  }\n\n  keydown(event:Event) {\n    const controlValue = this.dynamicForm.get(this.control.name)?.value;\n    this.globalService.slotService.setCurrentFormValue(controlValue);\n  }\n}\n", "<div [formGroup]=\"dynamicForm\" [ngStyle]=\"control.styles?.layout\">\n    @if (control.label) {\n    <div [ngStyle]=\"control.styles?.label\">{{ control.label }}</div>\n    }\n    <div style=\"width: 100%;\">\n      <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\n        <input (keydown.enter)=\"keydown($event)\" matInput [type]=\"control.type\" [placeholder]=\"control.placeholder || ''\" [formControlName]=\"control.name\"\n          [ngStyle]=\"control.styles?.input\">\n      </mat-form-field>\n      @if (dynamicForm.get(control.name)?.invalid && dynamicForm.get(control.name)?.touched) {\n      <mat-error style=\"color: #BA1A1A;\">\n        {{ getErrorMessage(control, null) }}\n      </mat-error>\n      }\n    </div>\n  </div>", "import { Component } from '@angular/core';\nimport { FormAbstract } from '../form.abstract';\n\n@Component({\n  selector: 'app-password',\n  templateUrl: './password.component.html',\n  styleUrl: './password.component.scss'\n})\nexport class PasswordComponent extends FormAbstract {\n\n  public hide: boolean = true;\n\n}\n", "<div [formGroup]=\"dynamicForm\" [ngStyle]=\"control.styles?.layout\">\n    @if (control.label) {\n    <div [ngStyle]=\"control.styles?.label\">{{ control.label }}</div>\n    }\n    <div style=\"width: 100%;\">\n      @if (control.styles?.password) {\n      <div style=\"display: flex; width: 100%;\">\n        <input matInput [type]=\"hide ? 'password' : 'text'\" [placeholder]=\"control.placeholder || ''\"\n          [formControlName]=\"control.name\" [ngStyle]=\"control.styles?.password\">\n        <button mat-icon-button (click)=\"hide = !hide\">\n          <mat-icon>{{ hide ? 'visibility_off' : 'visibility' }}</mat-icon>\n        </button>\n      </div>\n      }\n      @else {\n      <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\n        <input matInput [type]=\"hide ? 'password' : 'text'\" [placeholder]=\"control.placeholder || ''\"\n          [formControlName]=\"control.name\">\n        <button mat-icon-button matSuffix (click)=\"hide = !hide\">\n          <mat-icon>{{ hide ? 'visibility_off' : 'visibility' }}</mat-icon>\n        </button>\n      </mat-form-field>\n      }\n    </div>\n    @if (dynamicForm.get(control.name)?.invalid && dynamicForm.get(control.name)?.touched) {\n    <mat-error style=\"margin-top: -10px;\">{{ getErrorMessage(control, null) }}</mat-error>\n    }\n  </div>", "import { Component, Input } from '@angular/core';\nimport { FormAbstract } from '../form.abstract';\nimport { Observable } from 'rxjs';\nimport { IControl, IFormGroup, IGroup } from '../dynamic-form/dynamic-form.component';\n\n@Component({\n  selector: 'app-select',\n  templateUrl: './select.component.html',\n  styleUrl: './select.component.scss'\n})\nexport class SelectComponent extends FormAbstract {\n\n  @Input() groupOptions: Observable<IGroup[]>[] = [];\n  @Input() formStructure: (IControl | IFormGroup)[] = [];\n\n  public getSelectIndex(name: string): number {\n    const selects = this.formStructure.reduce((indices, item, index) => {\n      if (item.category === 'select') {\n        indices.push({\n          name: item.name,\n          index\n        });\n      }\n      return indices;\n    }, [] as { name: string; index: number; }[]);\n\n    return selects.findIndex(item => item.name === name);\n  }\n\n}\n\n", "<div [formGroup]=\"dynamicForm\" [ngStyle]=\"control.styles?.layout\">\n    @if (control.label) {\n    <div [ngStyle]=\"control.styles?.label\">{{ control.label }}</div>\n    }\n    <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\n      <input matInput [type]=\"control.type\" [placeholder]=\"control.placeholder || ''\" [formControlName]=\"control.name\"\n        [matAutocomplete]=\"autoGroup\" [ngStyle]=\"control.styles?.input\">\n      <mat-autocomplete #autoGroup=\"matAutocomplete\">\n        @for (group of groupOptions[getSelectIndex(control.name)] | async; track $index) {\n        @if (group.main === '') {\n        @for (element of group.sub; track element) {\n        <mat-option [value]=\"element\">{{ element }}</mat-option>\n        }\n        }\n        @else {\n        <mat-optgroup [label]=\"group.main\">\n          @for (element of group.sub; track $index) {\n          <mat-option [value]=\"element\">{{ element }}</mat-option>\n          }\n        </mat-optgroup>\n        }\n        }\n      </mat-autocomplete>\n    </mat-form-field>\n  </div>\n  @if (dynamicForm.get(control.name)?.invalid && dynamicForm.get(control.name)?.touched) {\n  <mat-error>{{ getErrorMessage(control, null) }}</mat-error>\n  }", "import { Component } from '@angular/core';\nimport { FormAbstract } from '../form.abstract';\n\n@Component({\n  selector: 'app-radio-button',\n  templateUrl: './radio-button.component.html',\n  styleUrl: './radio-button.component.scss'\n})\nexport class RadioButtonComponent extends FormAbstract {\n\n}\n\n", "<div [formGroup]=\"dynamicForm\" [ngStyle]=\"control.styles?.layout\">\n    @if (control.label) {\n    <div [ngStyle]=\"control.styles?.label\">{{ control.label }}</div>\n    }\n    @if (control.styles?.radioButton) {\n    <mat-radio-group [ngStyle]=\"control.styles?.radioButton\" [formControlName]=\"control.name\">\n      @for (item of control.group; track $index) {\n      <mat-radio-button [value]=\"item.main\">{{ item.sub.first() }}</mat-radio-button>\n      }\n    </mat-radio-group>\n    }\n    @else {\n    <mat-radio-group [formControlName]=\"control.name\">\n      @for (item of control.group; track $index) {\n      <mat-radio-button [value]=\"item.main\">{{ item.sub.first() }}</mat-radio-button>\n      }\n    </mat-radio-group>\n    }\n    @if (dynamicForm.get(control.name)?.invalid && dynamicForm.get(control.name)?.touched) {\n    <mat-error style=\"margin-top: -10px;\">{{ getErrorMessage(control, null) }}</mat-error>\n    }\n  </div>", "import { Component } from '@angular/core';\nimport { FormAbstract } from '../form.abstract';\n\n@Component({\n  selector: 'app-date-picker',\n  templateUrl: './date-picker.component.html',\n  styleUrl: './date-picker.component.scss'\n})\nexport class DatePickerComponent extends FormAbstract {\n\n}\n\n", "<div [formGroup]=\"dynamicForm\" [ngStyle]=\"control.styles?.layout\">\n    @if (control.label) {\n    <div [ngStyle]=\"control.styles?.label\">{{ control.label }}</div>\n    }\n    <div style=\"width: 100%;\">\n        @if (control.styles?.datepicker) {\n        <input matInput [matDatepicker]=\"picker\" [placeholder]=\"control.placeholder || ''\"\n            [formControlName]=\"control.name\">\n        <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n        }\n        @else {\n        <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\n            <input matInput [matDatepicker]=\"picker\" [placeholder]=\"control.placeholder || ''\"\n                [formControlName]=\"control.name\">\n            <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\n            <mat-datepicker #picker></mat-datepicker>\n        </mat-form-field>\n        }\n        @if (dynamicForm.get(control.name)?.invalid && dynamicForm.get(control.name)?.touched) {\n        <mat-error style=\"color: #BA1A1A;\">\n            {{ getErrorMessage(control, null) }}\n        </mat-error>\n        }\n    </div>\n</div>", "import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';\n// import { ArcRotateCamera, Color3, Color4, DynamicTexture, Engine, HemisphericLight, LinesMesh, Mesh, MeshBuilder, Scene, StandardMaterial, Vector3 } from '@babylonjs/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport { timer } from 'rxjs';\nimport { DrawColor } from '../../svg/svg.enum';\n\n@Component({\n  selector: 'app-babylon-vector',\n  templateUrl: './babylon-vector.component.html',\n  styleUrl: './babylon-vector.component.scss'\n})\nexport class SlotVectorBabaylonComponent extends SlotAbstract implements OnInit, AfterViewInit {\n  ngAfterViewInit(): void {\n   \n     // this.style.backgroundColor = 'white';\n      //this.style.opacity = '0.7';\n      this.size = { width: this.data.size.width, height: this.data.size.height };\n      this.canvasRef.nativeElement.style.width = this.size.width + 'px';\n      this.canvasRef.nativeElement.style.height = this.size.height + 'px';\n      //this.load();\n      window.onresize = () => {\n        this.size = { width: this.data.size.width, height: this.data.size.height };\n        this.canvasRef.nativeElement.style.width = this.size.width + 'px';\n        this.canvasRef.nativeElement.style.height = this.size.height + 'px';\n      //  this.engine.resize();\n      }\n  }\n  @ViewChild('canvas', { static: true })\n  private canvasRef!: ElementRef<HTMLCanvasElement>;\n\n\n  // private engine!: Engine;\n  // private scene!: Scene;\n  // private labels: Mesh[] = []; // 라벨을 저장할 배열\n\n  // cameraAlpha: number = 0;\n  // cameraBeta: number = 0;\n  // cameraRadius: number = 0;\n  // private camera!: ArcRotateCamera;\n  // private alphaLine!: LinesMesh;\n  // private betaLine!: LinesMesh;\n\n  ngOnInit(): void {\n    this.bindInstance();\n    console.log('vector babylon');\n  }\n\n\n  // private updateCameraInfo() {\n  //   this.cameraAlpha = this.camera.alpha;\n  //   this.cameraBeta = this.camera.beta;\n  //   this.cameraRadius = this.camera.radius;\n  // }\n\n\n  // public DrawColor4(drawÇolor: DrawColor) {\n  //   const hex = drawÇolor;\n  //   const r = parseInt(hex.substring(1, 3), 16) / 255;\n  //   const g = parseInt(hex.substring(3, 5), 16) / 255;\n  //   const b = parseInt(hex.substring(5, 7), 16) / 255;\n  //   return new Color4(r, g, b);\n  // }\n\n\n  // load(): void {\n  //   this.engine = new Engine(this.canvasRef.nativeElement, true);\n  //   this.scene = new Scene(this.engine);\n\n  //   const color = this.DrawColor4(DrawColor.gray3);\n\n  //   this.scene.clearColor = new Color4(0, 0, 0, 0); //\n\n  //   this.camera = new ArcRotateCamera(\"camera\", 0.95, 0.88, 216, Vector3.Zero(), this.scene);\n  //   this.camera.attachControl(this.canvasRef.nativeElement, true);\n\n  //   this.camera.lowerRadiusLimit = 10;  // 최소 반지름\n  //   this.camera.upperRadiusLimit = 280; // 최대 반지름\n\n  //   this.addMultipleLightsToScene();\n  //   const axisLength = 100; // 축의 길이\n\n  //   const spheres = [];\n  //   for (let i = 0; i < 10; i++) {\n  //     const vectorPosition = { x: Math.random() * 100, y: Math.random() * 100, z: Math.random() * 100 }\n  //     const sphere = this.createSphere(`sphere${i}`, new Vector3(vectorPosition.x, vectorPosition.y, vectorPosition.z));\n  //     this.createLabelAtPosition(sphere.position, `노드 ${i + 1}`);\n  //     spheres.push(sphere);\n  //   }\n  //   const sphereRadius = 2.5; // 예시 반지름\n  //   for (let i = 0; i < spheres.length - 1; i++) {\n  //     this.connectSpheresWithArrow(spheres[i], spheres[i + 1], sphereRadius);\n  //     this.labelAngleAtLineCenter(spheres[i], spheres[i + 1])\n  //   }\n\n  //   this.drawAxesWithLines();\n\n  //   this.makeLabelsFaceCamera(this.labels, this.camera);\n\n\n  //   this.engine.runRenderLoop(() => {\n  //     this.scene.render();\n  //     this.updateCameraInfo();\n  //   });\n  // }\n\n  // private updateLines() {\n  //   const cameraTarget = this.camera.getTarget();\n  //   const alphaVec = new Vector3(Math.sin(this.camera.alpha), 0, Math.cos(this.camera.alpha)).scale(5);\n  //   const betaVec = new Vector3(0, 5 * Math.sin(this.camera.beta), 0);\n  //   const radiusVec = cameraTarget.subtract(this.camera.position).normalize().scale(5);\n\n  //   MeshBuilder.CreateLines(\"alphaLine\", { points: [cameraTarget, cameraTarget.add(alphaVec)], instance: this.alphaLine });\n  //   MeshBuilder.CreateLines(\"betaLine\", { points: [cameraTarget, cameraTarget.add(betaVec)], instance: this.betaLine });\n  // }\n\n  // private initializeLines() {\n  //   this.alphaLine = MeshBuilder.CreateLines(\"alphaLine\", { points: [Vector3.Zero(), Vector3.Zero()], updatable: true }, this.scene);\n  //   this.betaLine = MeshBuilder.CreateLines(\"betaLine\", { points: [Vector3.Zero(), Vector3.Zero()], updatable: true }, this.scene);\n\n  //   this.alphaLine.color = Color3.Red();\n  //   this.betaLine.color = Color3.Green();\n  // }\n\n  // private addMultipleLightsToScene(): void {\n  //   // 상단 조명\n  //   const light1 = new HemisphericLight(\"light1\", new Vector3(0, 1, 0), this.scene);\n  //   light1.intensity = 0.7;\n\n  //   // // 전방 조명\n  //   // const light2 = new HemisphericLight(\"light2\", new Vector3(0, 0, 1), this.scene);\n  //   // light2.intensity = 0.7;\n\n  //   // // 후방 조명\n  //   // const light3 = new HemisphericLight(\"light3\", new Vector3(0, 0, -1), this.scene);\n  //   // light3.intensity = 0.7;\n\n  //   // // 좌측 조명\n  //   // const light4 = new HemisphericLight(\"light4\", new Vector3(-1, 0, 0), this.scene);\n  //   // light4.intensity = 0.7;\n\n  //   // // 우측 조명\n  //   // const light5 = new HemisphericLight(\"light5\", new Vector3(1, 0, 0), this.scene);\n  //   // light5.intensity = 0.7;\n  // }\n\n  // private createSphere(name: string, position: Vector3): Mesh {\n  //   const sphere = MeshBuilder.CreateSphere(name, { diameter: 2 }, this.scene);\n  //   sphere.position = position;\n\n  //   const material = new StandardMaterial(name + \"Material\", this.scene);\n  //   material.diffuseColor = new Color3(Math.random(), Math.random(), Math.random());\n  //   sphere.material = material;\n\n  //   // // 투명한 재질 생성\n  //   // const transparentMaterial = new StandardMaterial(\"transparentMaterial\", this.scene);\n  //   // transparentMaterial.alpha = 0; // 완전 투명\n\n  //   // // 와이어프레임 재질 생성\n  //   // const wireframeMaterial = new StandardMaterial(\"wireframeMaterial\", this.scene);\n  //   // wireframeMaterial.wireframe = true;\n\n  //   // // 구에 재질 적용\n  //   // sphere.material = transparentMaterial;\n  //   // const wireframeSphere = sphere.clone(\"wireframeSphere\");\n  //   // wireframeSphere.material = wireframeMaterial;\n\n  //   return sphere;\n  // }\n\n  // private connectSpheresWithArrow(sphere1: Mesh, sphere2: Mesh, sphereRadius: number): void {\n  //   // 구의 중심에서 표면까지의 방향 벡터 계산\n  //   const direction = sphere2.position.subtract(sphere1.position).normalize();\n\n  //   // 구의 표면에서 시작점 계산\n  //   const start = sphere1.position;\n  //   const end = sphere2.position.subtract(direction.scale(sphereRadius));\n\n  //   // 선 그리기\n  //   const lines = MeshBuilder.CreateLines(\"lines\", {\n  //     points: [start, end],\n  //     updatable: false,\n  //   }, this.scene);\n\n  //   // const linePath = [start, end];\n  //   // const lineThickness = 0.2; // 라인의 두께 설정\n  //   // const lines = MeshBuilder.CreateTube(\"tube\", { path: linePath, radius: lineThickness, updatable: false }, this.scene);\n\n\n\n  //   const linesMaterial = new StandardMaterial(\"linesMaterial\", this.scene);\n  //   linesMaterial.diffuseColor = new Color3(Math.random(), Math.random(), Math.random());\n  //   lines.material = linesMaterial; // 화살표에 재질 적용\n\n  //   // 화살표 머리 생성\n  //   const arrowHead = MeshBuilder.CreateCylinder(\"arrowHead\", {\n  //     diameterTop: 0,\n  //     diameterBottom: 0.5,\n  //     height: 1,\n  //     subdivisions: 4\n  //   }, this.scene);\n\n  //   // 120도를 라디안으로 변환\n  //   // const rotationInRadians = 200 * Math.PI / 180;\n  //   // arrowHead.rotation.y = rotationInRadians;\n\n  //   // 화살표 머리 위치 및 방향 조정\n  //   arrowHead.position = end; // 선의 끝점에 화살표 머리 배치\n  //   arrowHead.lookAt(sphere2.position); // 화살표 머리가 두 번째 구를 향하도록 조정\n  //   arrowHead.rotate(new Vector3(1, 0, 0), Math.PI / 2);\n\n  //   const arrowMaterial = new StandardMaterial(\"arrowMaterial\", this.scene);\n  //   arrowMaterial.diffuseColor = new Color3(1, 0, 0); // 빨간색 설정\n  //   arrowHead.material = arrowMaterial; // 화살표에 재질 적용\n\n  //   // 화살표 머리의 크기 조정\n  //   arrowHead.scaling = new Vector3(2, 2, 2);\n\n  // }\n\n  // private createAxisLabel(position: Vector3, text: string): void {\n  //   const planeSize = 1;\n\n\n  //   const dynamicTexture = new DynamicTexture(\"DynamicTexture\", { width: 1024, height: 1024 }, this.scene, true);\n  //   dynamicTexture.hasAlpha = true;\n\n  //   // 텍스트 그리기 (텍스트 위치와 크기를 조정하여 패널 크기에 맞게 조정)\n  //   dynamicTexture.drawText(text, 75, 512, \"bold 140px Arial\", \"white\", \"transparent\", true);\n\n\n  //   const plane = MeshBuilder.CreatePlane('TextPlane', { size: planeSize, sideOrientation: Mesh.DOUBLESIDE }, this.scene);\n  //   plane.position = position;\n\n  //   const material = new StandardMaterial('TextPlaneMaterial', this.scene);\n  //   material.diffuseColor = new Color3(1, 1, 1); // 재질 색상을 백색으로 설정\n  //   material.alpha = 1; // 재질의 투명도를 0으로 설정하여 평면을 투명하게 만듬\n  //   material.backFaceCulling = false;\n  //   material.diffuseTexture = dynamicTexture;\n\n  //   plane.material = material;\n\n  //   this.labels.push(plane);\n\n  // }\n\n  // private drawAxesWithLines(): void {\n  //   const axisLength = 100; // 축의 길이\n  //   const lineLength = 100; // 각 선의 길이\n  //   const halfLine = lineLength / 2;\n\n  //   // X축 선 그리기\n  //   for (let i = 1; i <= axisLength; i++) {\n  //     const lines =  MeshBuilder.CreateLines(`xLine${i}`, {\n  //       points: [\n  //         new Vector3(i, 0, 0),\n  //         new Vector3(i, 0, lineLength)\n  //       ],\n  //       colors: [this.DrawColor4(DrawColor.gray5), this.DrawColor4(DrawColor.white)]\n  //     }, this.scene);\n\n  //       const lineMaterial = new StandardMaterial(`xLineMaterial${i}`, this.scene);\n  //       lineMaterial.alpha = 0.3; // 투명도 설정 (0: 완전 투명, 1: 완전 불투명)\n  //       lines.material = lineMaterial;\n  //   }\n\n  //   // Y축 선 그리기\n  //   for (let i = 1; i <= axisLength; i++) {\n  //     const lines =  MeshBuilder.CreateLines(`yLine${i}`, {\n  //       points: [\n  //         new Vector3(0, i, 0),\n  //         new Vector3(lineLength, i, 0)\n  //       ],\n  //       colors: [this.DrawColor4(DrawColor.gray5), this.DrawColor4(DrawColor.white)]\n  //     }, this.scene);\n\n  //     const lineMaterial = new StandardMaterial(`xLineMaterial${i}`, this.scene);\n  //     lineMaterial.alpha = 0.3; // 투명도 설정 (0: 완전 투명, 1: 완전 불투명)\n  //     lines.material = lineMaterial;\n  //   }\n\n  //   // Z축 선 그리기\n  //   for (let i = 1; i <= axisLength; i++) {\n  //     const lines =  MeshBuilder.CreateLines(`zLine${i}`, {\n  //       points: [\n  //         new Vector3(0, 0, i),\n  //         new Vector3(0, lineLength, i)\n  //       ],\n  //       colors: [this.DrawColor4(DrawColor.gray5), this.DrawColor4(DrawColor.white)]\n  //     }, this.scene);\n\n  //     const lineMaterial = new StandardMaterial(`xLineMaterial${i}`, this.scene);\n  //     lineMaterial.alpha = 0.3; // 투명도 설정 (0: 완전 투명, 1: 완전 불투명)\n  //     lines.material = lineMaterial;\n  //   }\n  // }\n  // private labelAngleAtLineCenter(sphere1: Mesh, sphere2: Mesh): void {\n  //   // 두 구 사이의 중간 지점 계산\n  //   const midPoint = Vector3.Center(sphere1.position, sphere2.position);\n\n  //   const direction = sphere2.position.subtract(sphere1.position);\n  //   // 두 벡터 사이의 각도 계산 (라디안)\n  //   const angleRadians = Math.acos(Vector3.Dot(sphere1.position.normalizeToNew(), sphere2.position.normalizeToNew()));\n  //   const angleDegrees = angleRadians * 180 / Math.PI; // 라디안을 도(degree)로 변환\n\n  //   // 각도를 문자열로 표현\n  //   const angleText = `${angleDegrees.toFixed(2)}° / ${direction.length().toFixed(2)}`;\n\n  //   // 중간 지점에 라벨 생성 및 표시\n  //   this.createLabelAtPosition(midPoint, angleText, midPoint);\n  // }\n\n  // private createLabelAtPosition(position: Vector3, text: string, midPoint?: any): void {\n  //   const labelSize = 1; // 라벨 크기\n  //   const panelSize = 10; // 라벨 크기\n\n  //   const dynamicTexture = new DynamicTexture(\"DynamicTexture\", { width: 1500, height: 1024 }, this.scene, true);\n  //   dynamicTexture.hasAlpha = true;\n\n  //   // 텍스트 그리기 (텍스트 위치와 크기를 조정하여 패널 크기에 맞게 조정)\n  //   //dynamicTexture.drawText(text, 75, 512, \"bold 140px Arial\", \"black\",  \"transparent\", true);\n\n  //   const ctx = dynamicTexture.getContext();\n  //   ctx.fillStyle = \"white\";\n  //   ctx.font = \"bold 140px Arial\";\n  //   // ctx.text = \"center\";\n  //   // ctx.textBaseline = \"middle\";\n  //   ctx.fillText(text, 256, 128);\n  //   dynamicTexture.update();\n\n  //   // 패널 크기에 맞는 평면 생성\n  //   const labelPlane = MeshBuilder.CreatePlane(\"label\", { width: panelSize, height: panelSize }, this.scene);\n  //   if (midPoint) {\n  //     labelPlane.position = midPoint;\n  //   } else {\n  //     labelPlane.position = position;\n  //   }\n\n  //   // 패널 재질 설정\n  //   const material = new StandardMaterial(\"labelMaterial\", this.scene);\n  //   material.diffuseTexture = dynamicTexture;\n  //   material.backFaceCulling = false;\n  //   labelPlane.material = material;\n\n  //   this.labels.push(labelPlane);\n  // }\n\n  // private makeLabelsFaceCamera(labels: Mesh[], camera: ArcRotateCamera): void {\n  //   this.scene.registerBeforeRender(() => {\n  //     labels.forEach(label => {\n  //       label.lookAt(camera.position);\n  //     });\n  //   });\n  // }\n}\n", "<div [ngStyle]=\"parentStyle\"> \n  <div class=\"info-panel\">\n   <h3>Vector Embedding </h3>\n   <p> 128 dimensions to 3 dimensions </p>\n    <!-- Alpha: {{ cameraAlpha | number: '1.2-2' }}<br>\n    Beta: {{ cameraBeta | number: '1.2-2' }}<br>\n    Radius: {{ cameraRadius | number: '1.2-2' }} -->\n  </div>\n</div>\n<div [ngStyle]=\"style\">\n  <canvas #canvas></canvas>\n</div>", "import { Component } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\n\n@Component({\n  selector: 'app-slot-item-sketch-sender',\n  templateUrl: './slot-item-sketch-sender.component.html',\n  styleUrl: './slot-item-sender.component.scss'\n})\nexport class SlotItemSketchSenderComponent extends SlotAbstract {\n\n  userInput = '나는 오늘 복수를 하러 갈거야';\n  isShimmer = false;\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    this.bindInstance();\n    this.globalService.aiService.senderComponent = this;\n  }\n\n  async send() {\n    alert('sketch Sender');\n  }\n}\n", "<div [ngStyle]=\"style\">\n    <button mat-icon-button (click)=\"send()\">\n        <mat-icon>send</mat-icon>\n    </button>\n</div>", "import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport { timer } from 'rxjs';\nimport Swiper from 'swiper';\nimport { Autoplay, EffectCoverflow, EffectCube } from 'swiper/modules';\n\n@Component({\n  selector: 'app-slot-story-swiper',\n  templateUrl: './slot-story-swiper.component.html',\n  styleUrl: './slot-story-swiper.component.scss'\n})\nexport class SlotStorySwieprComponent extends SlotAbstract {\n\n  @ViewChild('swiper', {static: true}) swiper!: ElementRef;\n  public $swiper!:any;\n\n  public selectedValue = '';\n  public selectedDesc = '';\n\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    //this.bindInstance();\n  }\n\n  ngAfterViewInit(): void {\n    timer(100).subscribe(d => {\n      this.make()\n    })\n  }\n\n  make() {\n    this.selectedValue = this.data.items[1].title;\n    this.selectedDesc = this.data.items[1].desc;\n    this.$swiper = new Swiper(this.swiper.nativeElement, {\n      slidesPerView: 3,\n      initialSlide : 0,\n      effect: 'coverflow',\n      grabCursor: true,\n\n      autoplay: {\n        delay: 2000, // 1초마다 슬라이드 변경\n        disableOnInteraction: true, // 사용자 조작 후에도 자동 재생\n      },\n      modules: [EffectCoverflow, Autoplay],\n      on: {\n        slideChange: (d) => {\n          this.slideChange(d);\n        }\n      },\n    });\n  }\n\n  private slideChange(d:any) {\n    this.selectedValue = this.data.items[d.realIndex+1].title;\n    this.selectedDesc = this.data.items[d.realIndex+1].desc;\n    // if(d.realIndex === this.currentIndex || d.realIndex === 1 || this.things.tasks.length === 0) return;\n    //     this.currentIndex > d.realIndex ? this.slideToWrong()  : this.slideToRight();\n    //     this.data[d.realIndex -1].title ='WRONG';\n    //     this.data[d.realIndex -1].desc ='Ignorance is bliss.';\n    //     this.data[d.realIndex].title =  this.things.tasks[0]?.name ?? 'GREAT !!';\n    //     this.data[d.realIndex].desc = this.things.tasks[0]?.desc ?? 'Congrats on acing your studies!' ;\n    //     this.data[d.realIndex + 1].title ='RIGHT';\n    //     this.data[d.realIndex + 1].desc ='I know it well.';\n    //     if(!this.things.tasks[0]) {\n    //       this.currentImage = 'aaa.png'\n    //       //this.$swiper.allowTouchMove = false;\n    //     }\n    //   console.log('this.things.tasks.length2', this.things.tasks[0], this.things.tasks.length)\n    //   this.currentIndex = d.realIndex;\n    //   this.currentTask++;\n  }\n\n  async send() {\n\n  }\n\n}\n", "<div class=\"swiper-title\">{{ data.desc }}</div>\n<div #swiper class=\"swiper\">\n    <div class=\"swiper-wrapper\">\n        <div class=\"swiper-slide\" *ngFor=\"let item of data.items\">\n            <div>{{item.title}}</div>\n        </div>\n    </div>\n</div>\n<div class=\"swiper-desc\">당신의 직업은 <span>{{selectedValue}}</span> 입니다.</div>\n<div class=\"swiper-desc1\">{{selectedDesc}}</div>\n", "import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { SlotAbstract } from '../../slot.abstract';\nimport { timer } from 'rxjs';\nimport Swiper from 'swiper';\nimport { Autoplay, EffectCoverflow, EffectCube } from 'swiper/modules';\n\n@Component({\n  selector: 'app-slot-story-swiper-cube',\n  templateUrl: './slot-story-swiper-cube.component.html',\n  styleUrl: './slot-story-swiper-cube.component.scss',\n})\nexport class SlotStorySwieprCubeComponent extends SlotAbstract {\n  @ViewChild('swiper', { static: true }) swiper!: ElementRef;\n  @ViewChild('swiperTitle', { static: false }) swiperTitle?: ElementRef;\n\n  public $swiper!: any;\n\n  public selectedValue = '';\n  public selectedDesc = '';\n\n  public override async click(): Promise<boolean> {\n    return false;\n  }\n\n  ngOnInit() {\n    //this.bindInstance();\n  }\n\n  ngAfterViewInit(): void {\n    timer(1000).subscribe((d) => {\n      this.make();\n    });\n  }\n\n  make() {\n    this.selectedValue = this.data.items[0].title;\n    this.selectedDesc = this.data.items[0].desc;\n    this.$swiper = new Swiper(this.swiper.nativeElement, {\n      slidesPerView: 2,\n      initialSlide: 0, // 첫 번째 슬라이드부터 시작\n      effect: 'cube',\n      cubeEffect: {\n        // cubeEffect 속성 추가\n        shadow: true, // 그림자 활성화\n        slideShadows: true, // 슬라이드 그림자 활성화\n        shadowOffset: 20, // 그림자 offset 조절\n        shadowScale: 0.94, // 그림자 크기 조절\n      },\n      allowTouchMove: false,\n      modules: [EffectCube],\n      on: {\n        slideChange: (swiper) => {\n          this.slideChange(swiper);\n        },\n      },\n    });\n\n    timer(1000).subscribe((d) => {\n      this.startSlideShow(); // 슬라이드쇼 시작\n    });\n  }\n\n  async startSlideShow() {\n    const delay = 300;\n    const selectionProbability = 0.2;\n  \n    let forward = true;\n    let firstRound = true; // 첫 번째 라운드 플래그\n  \n    while (true) {\n      const indices = forward\n        ? Array.from(Array(this.data.items.length).keys())\n        : Array.from(Array(this.data.items.length).keys()).reverse();\n  \n      for (const i of indices) {\n        await new Promise((resolve) => setTimeout(resolve, delay));\n        this.$swiper.slideTo(i);\n  \n        if (!firstRound && Math.random() < selectionProbability) { // 첫 번째 라운드가 아닐 때만 확률 적용\n          const randomIndex = this.getRandomSlideIndex();\n          this.$swiper.slideTo(randomIndex);\n          this.applyCongratsEffect(); \n          return;\n        }\n      }\n  \n      forward = !forward;\n      firstRound = false; // 첫 번째 라운드 완료 표시\n    }\n  }\n\n  getRandomSlideIndex() {\n    return Math.floor(Math.random() * this.data.items.length);\n  }\n\n  private slideChange(swiper: any) {\n    const activeIndex = swiper.activeIndex;\n    this.selectedValue = this.data.items[activeIndex].title;\n    this.selectedDesc = this.data.items[activeIndex].desc;\n  }\n\n  applyCongratsEffect() {\n    // if (this.swiperTitle) {\n    //   const titleElement = this.swiperTitle.nativeElement;\n    //   titleElement.classList.add('congrats'); // 축하 클래스 추가\n    // }\n  }\n\n  async send() {}\n}\n", "<div #swiperTitle class=\"swiper-title\">{{ data.desc }}</div>\n<div #swiper class=\"swiper\">\n    <div class=\"swiper-wrapper\">\n        <div class=\"swiper-slide\" *ngFor=\"let item of data.items\">\n            <div>{{item.title}}</div>\n        </div>\n    </div>\n</div>\n<div class=\"swiper-desc\">선택된 아이템 : <span>{{selectedValue}}</span></div>\n<div class=\"swiper-desc1\">{{selectedDesc}}</div>\n", "import { Component, Input, OnInit } from '@angular/core';\nimport { SlotAbstract } from '../../../slot.abstract';\nimport { Buff, ClanMember, Debuff, Skill, SkillLog } from '../story.model';\n\n\ntype NonNegativeNumber = number & {\n  readonly __nonNegativeNumber: unique symbol;\n}; // NonNegativeNumber 타입 정의\n\n@Component({\n  selector: 'app-clan-battle-visual',\n  templateUrl: './clan-battle-visual.component.html',\n  styleUrls: ['./clan-battle-visual.component.scss'],\n})\nexport class ClanBattleVisualComponent extends SlotAbstract implements OnInit {\n  @Input() clan1Members: ClanMember[] = [];\n  @Input() clan2Members: ClanMember[] = [];\n  currentTurn: number = 0; // 현재 턴 (0부터 시작)\n  battleInterval: any; // battleInterval 변수 선언\n  timerPaused: boolean = false;\n  remainingTime: number = 100; // 예시: 120초 타이머\n  turnInterval: number = 50; // 턴 간격 (밀리초)\n\n  @Input() clan1Name: string = '문파 1';\n  @Input() clan2Name: string = '문파 2';\n\n  currentAttackerUsedSkill: boolean = false; // 공격자가 스킬을 사용했는지 여부\n  currentAttackerClan: ClanMember[] | null = null;\n  currentDefenderClan: ClanMember[] | null = null;\n\n  battleEnded: boolean = false;\n  winner: string = '';\n  winningClan: ClanMember[] = [];\n  allMembers: { clan: number; member: ClanMember }[] = []; // 새로운 배열 선언\n\n  ngOnInit() {\n    // 기존 clan1Members와 clan2Members를 합쳐서 allMembers에 저장\n    this.allMembers = this.clan1Members.map((member) => ({ clan: 1, member }));\n    this.allMembers = this.allMembers.concat(\n      this.clan2Members.map((member) => ({ clan: 2, member }))\n    );\n\n    this.startBattle();\n  }\n\n  startBattle() {\n    this.battleInterval = setInterval(() => {\n      if (!this.timerPaused) {\n        this.remainingTime--;\n        if (this.remainingTime <= 0) {\n          this.endBattle();\n        }\n      }\n    }, 100); // 1초마다 타이머 업데이트\n\n    this.nextTurn(); // 첫 번째 턴 바로 시작\n  }\n\n  pauseTimerAndScheduleNextTurn(delay: number) {\n    this.timerPaused = true;\n    clearInterval(this.battleInterval);\n    setTimeout(() => this.resumeTimerAndNextTurn(), delay);\n  }\n\n  resumeTimerAndNextTurn() {\n    this.timerPaused = false;\n    this.battleInterval = setInterval(() => {\n      if (!this.timerPaused) {\n        this.remainingTime--;\n        if (this.remainingTime <= 0) {\n          this.endBattle();\n        }\n      }\n    }, 100);\n    this.nextTurn();\n  }\n\n  scheduleNextTurn(delay: number) {\n    setTimeout(() => this.nextTurn(), delay);\n  }\n\n  currentSkillLog: SkillLog | null = null; // 현재 스킬 로그 정보\n  currentAttackerDialogue: string = '';\n  currentAttackerDialogueOutName: string = '';\n  currentDefenderDialogue: string = '';\n\n  attackerDialogues = [\n    'Kneel before my sword!',\n    'This is the true power of a martial arts master!',\n    'Your shallow tricks won\\'t work on me!',\n    'This strike will end it all!',\n    'How dare you face me, you are reckless!',\n    'Your fate is already sealed!',\n    'Can you withstand my wrath?',\n    'I cannot lose to the likes of you!',\n    'You cannot escape my attacks!',\n    'It\\'s your turn now. Come at me!',\n    'My sword dances for justice!',\n    'Pay for your sins with your life!',\n    'This place will be your grave!',\n    'I will prove my strength!',\n    'Congratulations on your defeat!',\n    'My victory was already foreseen!',\n    'How brave of you to challenge me!',\n    'Remember my name!',\n    'I will watch your demise!',\n    'Surrender to my power!'\n];\n\ndefenderDialogues = [\n    'Ugh! It\\'s not over yet!',\n    'I won\\'t yield to such an attack!',\n    'My will is unbreakable!',\n    'I will endure!',\n    'I cannot retreat for the sake of my comrades!',\n    'I cannot lose like this!',\n    'Take my counterattack!',\n    'I haven\\'t shown my true power yet!',\n    'Is that all you\\'ve got?',\n    'You cannot pierce my shield!',\n    'My body is like steel!',\n    'My spirit is unyielding!',\n    'My comrades will protect me!',\n    'My faith is unwavering!',\n    'I cannot abandon my pride!',\n    'I will fight for my honor!',\n    'I will fight with my life on the line!',\n    'My sacrifice will not be in vain!',\n    'My defeat is a new beginning!',\n    'Await my revenge!'\n];\n\nwinnerMessages = [\n    '\\'s overwhelming victory!',\n    '\\'s glorious victory!',\n    'has seized victory!',\n    'has become the final victor!',\n    'has knelt before \\'s mighty power!'\n];\n\nloserMessages = [\n    'has tasted the bitterness of defeat...',\n    'has unfortunately been defeated...',\n    'will have to wait for the next opportunity...',\n    '\\'s challenge has ended in failure...',\n    'had to swallow their tears...'\n];\n  winnerMessage: string = '';\n  loserMessage: string = '';\n\n  skillLogs: SkillLog[] = []; // 스킬 사용 기록 저장\n  getAbsoluteDamage(damage: number): number {\n    return Math.abs(damage);\n  }\n  nextTurn() {\n    const totalMembers = this.clan1Members.length + this.clan2Members.length;\n    const attackerIndex = this.currentTurn % totalMembers;\n    const attackerClan =\n      attackerIndex < this.clan1Members.length\n        ? this.clan1Members\n        : this.clan2Members;\n    const attacker = attackerClan[attackerIndex % attackerClan.length];\n\n    const defenderClan =\n      attackerClan === this.clan1Members\n        ? this.clan2Members\n        : this.clan1Members;\n    const aliveDefenders = defenderClan.filter((member) => member.health > 0);\n\n    if (aliveDefenders.length === 0) {\n      this.endBattle();\n      return;\n    }\n\n    this.reduceSkillCooldowns();\n\n    // 스킬 사용 여부 결정 (예: 랜덤 확률)\n    const useSkill = Math.random() < 0.3; // 30% 확률로 스킬 사용\n    this.currentAttackerUsedSkill = useSkill; // 스킬 사용 여부 저장\n\n    let defender: ClanMember = aliveDefenders[0]; // defender 변수 초기화 (aliveDefenders의 첫 번째 멤버로 초기화)\n\n    if (useSkill) {\n      const skill = this.getRandomSkill(attacker);\n      if (skill) {\n        this.performSkillAttack(attacker, skill, aliveDefenders);\n      } else {\n        defender = this.selectDefender(aliveDefenders); // defender 변수 할당\n        this.performBasicAttack(attacker, defender);\n      }\n\n      this.pauseTimerAndScheduleNextTurn(200); // 5초 후 다음 턴\n    } else {\n      defender = this.selectDefender(aliveDefenders); // defender 변수 할당\n      this.performBasicAttack(attacker, defender);\n      this.scheduleNextTurn(this.turnInterval); // 턴 간격 후 다음 턴\n    }\n\n    if (!useSkill) {\n      this.currentAttackerUsedSkill = false;\n    }\n\n    this.currentTurn++;\n    this.resetAttackAndDefenseStates();\n\n    this.currentAttackerClan = attackerClan;\n    this.currentDefenderClan = defenderClan;\n\n    // 현재 턴의 공격자와 방어자 상태 설정\n    attacker.isAttacking = true;\n    defender.isDefending = true;\n\n    this.currentSkillLog = this.skillLogs[this.skillLogs.length - 1];\n  }\n\n  private selectDefender(aliveDefenders: ClanMember[]): ClanMember {\n    const defenderIndex = Math.floor(Math.random() * aliveDefenders.length);\n    return aliveDefenders[defenderIndex];\n  }\n\n  getMemberSkillLogs(member: ClanMember): SkillLog | undefined {\n    const filteredLogs = this.skillLogs.filter(\n      (log) => log.attacker === member.name || log.targets.includes(member.name)\n    );\n    return filteredLogs[filteredLogs.length - 1]; // 마지막 로그 반환\n  }\n\n  private reduceSkillCooldowns() {\n    this.clan1Members.forEach((member) =>\n      member.skills.forEach(\n        (skill) => (skill.cooldown = Math.max(0, skill.cooldown - 1))\n      )\n    );\n    this.clan2Members.forEach((member) =>\n      member.skills.forEach(\n        (skill) => (skill.cooldown = Math.max(0, skill.cooldown - 1))\n      )\n    );\n  }\n\n  private isAlly(attacker: ClanMember, defender: ClanMember): boolean {\n    const attackerClan = this.clan1Members.includes(attacker)\n      ? this.clan1Members\n      : this.clan2Members;\n    return attackerClan.includes(defender);\n  }\n\n  private getLowestHpAlly(attacker: ClanMember): ClanMember | null {\n    const attackerClan = this.clan1Members.includes(attacker)\n      ? this.clan1Members\n      : this.clan2Members;\n    const aliveAllies = attackerClan.filter(\n      (member) => member.health > 0 && member !== attacker\n    );\n\n    if (aliveAllies.length === 0) {\n      return null; // 살아있는 아군이 없는 경우 null 반환\n    }\n\n    return aliveAllies.reduce((lowestHpMember, currentMember) => {\n      return currentMember.health < lowestHpMember.health\n        ? currentMember\n        : lowestHpMember;\n    });\n  }\n\n  private getRandomDefenderDialogue(): string {\n    const randomIndex = Math.floor(\n      Math.random() * this.defenderDialogues.length\n    );\n    return this.defenderDialogues[randomIndex];\n  }\n\n  private performSkillAttack(\n    attacker: ClanMember,\n    skill: Skill,\n    aliveDefenders: ClanMember[]\n  ) {\n    let targets: ClanMember[] = [];\n    if (skill.isHeal) {\n      const lowestHpAlly = this.getLowestHpAlly(attacker);\n      if (lowestHpAlly) {\n        targets = [lowestHpAlly]; // 체력이 가장 낮은 아군을 타겟으로 설정\n      } else {\n        // 아군이 모두 죽은 경우 스킬 사용 불가 처리 (예: 로그 출력, 턴 넘기기 등)\n        return;\n      }\n    } else {\n      targets = this.getRandomTargets(aliveDefenders, skill.targets);\n    }\n    this.currentAttackerDialogue = `${\n      attacker.name\n    }: ${this.getRandomAttackerDialogue(skill.name)}`;\n\n\n    this.currentAttackerDialogueOutName = `${this.getRandomAttackerDialogue(skill.name)}`;\n\n    const damages: {\n      damage: number;\n      defenseBonusApplied: boolean;\n      originalDamage: number;\n    }[] = [];\n\n    let itemDamageBonus = 0;\n\n    for (const defender of targets) {\n      let damage = skill.damage;\n      let originalDamage = damage; // 원래 데미지 저장\n      let damageOrHeal = skill.damage;\n      let defenseBonusApplied = false; // 방어 보너스 적용 여부 초기화\n\n      // 아이템에 따른 공격력/방어력 보너스 적용\n      attacker.items.forEach((item) => {\n        itemDamageBonus += item.attackPowerBonus || 0;\n        damage += item.attackPowerBonus || 0;\n      });\n      defender.items.forEach((item) => {\n        if (item.defensePowerBonus) {\n          damageOrHeal -= item.defensePowerBonus;\n          defenseBonusApplied = true; // 방어 보너스 적용 표시\n        }\n      });\n\n      if (!skill.isHeal) {\n        let blocked = false;\n        for (const item of defender.items) {\n          if (item.skillBlockCount && item.skillBlockCount > 0) {\n            item.skillBlockCount--;\n            blocked = true;\n            this.currentDefenderDialogue = `${defender.name}: ${item.name}으로 스킬 공격을 막았다!`;\n            damageOrHeal = 0;\n            break;\n          }\n        }\n\n        if (!blocked) {\n          defender.health = Math.max(0, defender.health - damageOrHeal);\n          this.currentDefenderDialogue = `${\n            defender.name\n          }: ${this.getRandomDefenderDialogue()}`;\n        }\n      } else if (\n        skill.isHeal &&\n        defender.health > 0 &&\n        this.isAlly(attacker, defender)\n      ) {\n        defender.health = Math.min(\n          defender.maxHealth,\n          defender.health - damageOrHeal\n        ); // 힐 스킬은 damageOrHeal 값이 음수이므로 빼줍니다.\n      }\n\n      damages.push({\n        damage: damageOrHeal,\n        defenseBonusApplied,\n        originalDamage: defenseBonusApplied ? originalDamage : 0, // 방어 보너스 적용 시 원래 데미지 저장\n      });\n\n      // 디버프 적용\n      if (skill.debuff) {\n        this.applyDebuff(defender, skill.debuff);\n        damage += skill.debuff.health || 0;\n        defender.isDebuffed = true;\n      }\n\n      // 버프 적용\n      if (skill.buff) {\n        this.applyBuff(defender, skill.buff);\n      }\n    }\n\n    const clan1MembersCopy = this.clan1Members.map((member) => ({ ...member }));\n    const clan2MembersCopy = this.clan2Members.map((member) => ({ ...member }));\n\n    // 스킬 사용 기록 저장\n    this.skillLogs.push({\n      attacker: attacker.name,\n      skill: skill,\n      targets: targets.map((t) => t.name),\n      damage: damages, // 데미지와 방어 보너스 적용 여부 함께 저장\n      turn: this.currentTurn,\n      attackerDialogue: this.currentAttackerDialogue,\n      defenderDialogue: this.currentDefenderDialogue,\n      clan1Members: clan1MembersCopy,\n      clan2Members: clan2MembersCopy,\n      isAdditionalSkill: attacker.skills.indexOf(skill) === -1,\n      itemDamageBonus: itemDamageBonus,\n      attackerItems: attacker.items.map((item) => item.name),\n      defenderItems: targets\n        .map((defender) => defender.items.map((item) => item.name))\n        .flat(),\n      prompt: this.generatePrompt(\n        attacker,\n        aliveDefenders,\n        skill,\n        damages,\n        itemDamageBonus\n      ),\n    });\n\n    // 자해 데미지 적용\n    if (skill.selfDamage) {\n      attacker.health = Math.max(0, attacker.health - skill.selfDamage);\n    }\n  }\n\n  private getRandomAttackerDialogue(skillName?: string): string {\n    // 스킬 이름 매개변수 추가\n    const randomIndex = Math.floor(\n      Math.random() * this.attackerDialogues.length\n    );\n    let dialogue = this.attackerDialogues[randomIndex];\n\n    if (skillName) {\n      // 스킬 이름이 제공된 경우\n      dialogue = `${dialogue} ${skillName}!`; // 스킬 이름을 대사 뒤에 추가\n    }\n\n    return dialogue;\n  }\n\n  private performBasicAttack(attacker: ClanMember, defender: ClanMember) {\n    let damage = Math.max(0, attacker.attackPower);\n    let itemDamageBonus = 0; // 아이템 공격력 보너스 변수 추가\n    // 아이템에 따른 공격력 보너스 적용\n    attacker.items.forEach((item) => {\n      itemDamageBonus += item.attackPowerBonus || 0;\n      damage += item.attackPowerBonus || 0;\n    });\n\n    defender.health = Math.max(0, defender.health - damage);\n\n    // 대사 설정\n    this.currentAttackerDialogue = `${\n      attacker.name\n    }: ${this.getRandomAttackerDialogue()}`;\n    this.currentDefenderDialogue = `${\n      defender.name\n    }: ${this.getRandomDefenderDialogue()}`; // 랜덤 대사 설정\n\n    const BASIC_ATTACK_SKILL: Skill = {\n      name: '공격',\n      damage: 0, // 실제 데미지는 attacker.attackPower에서 계산되므로 0으로 설정\n      targets: 1,\n      cooldown: 0,\n      maxCooldown: 0, // 쿨다운 없음\n    };\n    const clan1MembersCopy = this.clan1Members.map((member) => ({ ...member }));\n    const clan2MembersCopy = this.clan2Members.map((member) => ({ ...member }));\n\n    // 공격 기록 저장\n    this.skillLogs.push({\n      attacker: attacker.name,\n      skill: BASIC_ATTACK_SKILL, // 평타 공격은 skill 정보 없음\n      targets: [defender.name],\n      damage: [\n        { damage: damage, defenseBonusApplied: false, originalDamage: 0 },\n      ],\n      turn: this.currentTurn,\n      isBasicAttack: true, // 평타 공격임을 나타내는 플래그\n      attackerDialogue: this.currentAttackerDialogue,\n      defenderDialogue: this.currentDefenderDialogue,\n      clan1Members: clan1MembersCopy,\n      clan2Members: clan2MembersCopy,\n      itemDamageBonus: itemDamageBonus, // 아이템 공격력 보너스 추가\n      attackerItems: attacker.items.map((item) => item.name), // 공격자 아이템 목록 추가\n      prompt: this.generatePrompt(\n        attacker,\n        [defender],\n        BASIC_ATTACK_SKILL,\n        [{ damage: damage, defenseBonusApplied: false, originalDamage: 0 }],\n        itemDamageBonus\n      ),\n    });\n  }\n\n  private generatePrompt(\n    attacker: ClanMember,\n    defenders: ClanMember[],\n    skill: Skill | null, // 스킬 또는 null (공격)\n    damages: {\n      damage: number;\n      defenseBonusApplied: boolean;\n      originalDamage: number;\n    }[], // damages로 변경\n    itemDamageBonus: number\n  ): string {\n    const attackerClanName = this.clan1Members.includes(attacker)\n      ? this.clan1Name\n      : this.clan2Name;\n\n    let prompt = `${attackerClanName}의 ${attacker.name}이(가) `;\n\n    if (skill) {\n      const totalDamage = damages.reduce((sum, d) => sum + d.damage, 0);\n      prompt += `${skill.name} 스킬을 사용하여 `;\n\n      // 각 방어자별 피해 정보 추가\n      defenders.forEach((defender, index) => {\n        const defenderClanName = this.clan1Members.includes(defender)\n          ? this.clan1Name\n          : this.clan2Name;\n        const damageInfo = damages[index]; // damages 배열에서 피해 정보 가져오기\n\n        if (damageInfo) {\n          // 피해 정보가 존재하는 경우\n          prompt += `${defenderClanName}의 ${defender.name}에게 ${damageInfo.damage}의 피해를 입혔습니다.`;\n          if (damageInfo.defenseBonusApplied) {\n            prompt += ` (방어 보너스 적용 전 ${damageInfo.originalDamage})`;\n          }\n        } else {\n          // 피해 정보가 없는 경우\n          prompt += `${defenderClanName}의 ${defender.name}에게 피해를 입히지 못했습니다.`; // 또는 다른 처리\n        }\n\n        if (index < defenders.length - 1) {\n          prompt += ', ';\n        }\n      });\n\n      if (itemDamageBonus > 0) {\n        prompt += ` (아이템 추가 피해: +${itemDamageBonus})`;\n      }\n      // ... (버프, 디버프 정보 추가)\n    } else {\n      const totalDamage = damages.reduce((sum, d) => sum + d.damage, 0);\n      prompt += `공격으로 `;\n\n      // 각 방어자별 피해 정보 추가 (공격)\n      defenders.forEach((defender, index) => {\n        const defenderClanName = this.clan1Members.includes(defender)\n          ? this.clan1Name\n          : this.clan2Name;\n        const damageInfo = damages[index]; // damages 배열에서 피해 정보 가져오기\n\n        if (damageInfo) {\n          // 피해 정보가 존재하는 경우\n          prompt += `${defenderClanName}의 ${defender.name}에게 ${damageInfo.damage}의 피해를 입혔습니다.`;\n        } else {\n          // 피해 정보가 없는 경우\n          prompt += `${defenderClanName}의 ${defender.name}에게 피해를 입히지 못했습니다.`; // 또는 다른 처리\n        }\n\n        if (index < defenders.length - 1) {\n          prompt += ', ';\n        }\n      });\n\n      if (itemDamageBonus > 0) {\n        prompt += ` (아이템 추가 피해: +${itemDamageBonus})`;\n      }\n    }\n\n    return prompt;\n  }\n\n  private getBuffDescription(buff: Buff): string {\n    let description = '';\n    if (buff.health) description += `체력 ${buff.health} 회복, `;\n    if (buff.attackPower) description += `공격력 ${buff.attackPower} 증가, `;\n    if (buff.defensePower) description += `방어력 ${buff.defensePower} 증가, `;\n    if (buff.allDebuffs) description += `모든 디버프 해제, `;\n    return description.slice(0, -2); // 마지막 쉼표 제거\n  }\n\n  private getDebuffDescription(debuff: Debuff): string {\n    let description = '';\n    if (debuff.health) description += `체력 ${debuff.health} 감소, `;\n    if (debuff.attackPower)\n      description += `공격력 ${debuff.attackPower} 감소, `;\n    if (debuff.defensePower)\n      description += `방어력 ${debuff.defensePower} 감소, `;\n    return description.slice(0, -2); // 마지막 쉼표 제거\n  }\n\n  private resetAttackAndDefenseStates() {\n    this.clan1Members.forEach((member) => {\n      member.isAttacking = false;\n      member.isDefending = false;\n      member.isDebuffed = false; // 디버프 상태 초기화\n    });\n    this.clan2Members.forEach((member) => {\n      member.isAttacking = false;\n      member.isDefending = false;\n      member.isDebuffed = false; // 디버프 상태 초기화\n    });\n  }\n\n  applyBuff(target: ClanMember, buff: Buff) {\n    if (buff.health) {\n      const healedAmount = Math.min(\n        target.maxHealth - target.health,\n        buff.health\n      ); // 최대 체력을 넘지 않도록 회복량 제한\n      target.health += healedAmount;\n      this.currentDefenderDialogue += ` (체력 ${healedAmount} 회복!)`; // 회복량 표시\n    }\n    if (buff.attackPower) target.attackPower += buff.attackPower;\n    if (buff.defensePower) target.defensePower += buff.defensePower;\n    if (buff.allDebuffs) {\n      // 모든 디버프 제거 로직 구현 (예: debuff 속성 초기화)\n      target.attackPower = Math.max(0, target.attackPower); // 공격력이 0 미만이 되지 않도록\n      target.defensePower = Math.max(0, target.defensePower); // 방어력이 0 미만이 되지 않도록\n      this.currentDefenderDialogue += ' (디버프 해제!)';\n    }\n  }\n\n  applyDebuff(target: ClanMember, debuff: Debuff) {\n    if (debuff.health)\n      target.health = Math.max(0, target.health - debuff.health);\n    if (debuff.attackPower)\n      target.attackPower = Math.max(0, target.attackPower - debuff.attackPower);\n    if (debuff.defensePower)\n      target.defensePower = Math.max(\n        0,\n        target.defensePower - debuff.defensePower\n      );\n    // 필요에 따라 다른 디버프 효과 적용\n  }\n\n  getRandomSkill(attacker: ClanMember): Skill | null {\n    let availableSkills = attacker.skills.filter(\n      (skill) => skill.cooldown === 0\n    );\n\n    // 아이템에 따른 추가 스킬 추가\n    attacker.items.forEach((item) => {\n      availableSkills = availableSkills.concat(item.additionalSkills || []);\n    });\n\n    if (availableSkills.length === 0) {\n      return null; // 사용 가능한 스킬이 없는 경우 null 반환\n    }\n\n    const randomIndex = Math.floor(Math.random() * availableSkills.length);\n    const selectedSkill = availableSkills[randomIndex];\n\n    // 선택된 스킬의 쿨다운 설정\n    selectedSkill.cooldown = selectedSkill.maxCooldown;\n\n    return selectedSkill;\n  }\n\n  getRandomTargets(defenders: ClanMember[], numTargets: number): ClanMember[] {\n    const shuffledDefenders = defenders.sort(() => Math.random() - 0.5);\n    return shuffledDefenders.slice(0, numTargets);\n  }\n\n  endBattle() {\n    // 전투 종료 로직 (예: 승리 문파 결정, 결과 화면 표시 등)\n    this.battleEnded = true;\n    this.winner = this.clan1Members.some((member) => member.health > 0)\n      ? this.clan1Name\n      : this.clan2Name;\n    this.winningClan = this.clan1Members.some((member) => member.health > 0)\n      ? this.clan1Members\n      : this.clan2Members;\n\n    clearInterval(this.battleInterval); // 턴 진행 setInterval 종료\n    // alert(`${winningClan[0].name} 소속 문파가 승리했습니다!`);\n\n    // 승리 및 패배 메시지 설정\n    this.setWinLoseMessages();\n\n    const prompts = this.skillLogs\n      .map((log) => log.prompt)\n      .filter((prompt) => prompt !== undefined); // prompt만 추출하고 undefined 제거\n    const promptString = prompts.join(' '); // 공백으로 연결하여 한 줄 문자열 생성\n    this.globalService.flowService.currentFighting.endBattle(promptString);\n  }\n\n  private setWinLoseMessages() {\n    const randomWinnerIndex = Math.floor(\n      Math.random() * this.winnerMessages.length\n    );\n    const randomLoserIndex = Math.floor(\n      Math.random() * this.loserMessages.length\n    );\n\n    if (this.winner === this.clan1Name) {\n      this.winnerMessage = `${this.clan1Name}${this.winnerMessages[randomWinnerIndex]}`;\n      this.loserMessage = `${this.clan2Name}${this.loserMessages[randomLoserIndex]}`;\n    } else if (this.winner === this.clan2Name) {\n      this.winnerMessage = `${this.clan2Name}${this.winnerMessages[randomWinnerIndex]}`;\n      this.loserMessage = `${this.clan1Name}${this.loserMessages[randomLoserIndex]}`;\n    } else {\n      this.winnerMessage = '무승부! 팽팽한 접전이었다.';\n      this.loserMessage = '';\n    }\n  }\n\n  getSkillIcon(name: string, damage: number): string {\n    let icon = '';\n    if (name === '공격') {\n      icon = '🗡️';\n    } else if (damage < 0) { // 치료 스킬\n      icon = '❤️';\n    } else { // 강한 공격\n      icon = '🔥';\n    }\n\n    // // 데미지 표기\n    // icon += ` ${Math.abs(damage)}`; // 데미지 절대값 표시\n\n    // // currentSkillLog에서 prompt 정보 가져와서 추가\n    // if (this.currentSkillLog && this.currentSkillLog.prompt) {\n    //   icon += ' - ' + this.currentSkillLog.prompt; \n    // }\n\n  \n    return icon;\n  }\n}\n", "<div class=\"clan-battle-container\">\n  <div class=\"clan-list\">\n    <ul>\n      <li *ngFor=\"let item of allMembers\" class=\"member\"> \n        <span class=\"member-icon\" [ngClass]=\"{'clan1-icon': item.clan === 1, 'clan2-icon': item.clan === 2}\"></span>\n        <div class=\"member-info\" [ngClass]=\"{'shimmer': item.member.isAttacking && currentAttackerUsedSkill}\">\n          <ng-container *ngIf=\"!(item.member.isAttacking && currentAttackerUsedSkill)\"> \n              <span class=\"name\" [ngClass]=\"{'attacker': item.member.isAttacking, 'defender': item.member.isDefending}\">\n                  {{ item.member.name }} \n              </span>\n              <!-- (Lv.{{ item.member.level }})\n              {{ item.member.role }} -->\n              <!-- <span class=\"attack-icon\">⚔️</span> {{ item.member.attackPower }} | {{ item.member.defensePower }}\n              <br> -->\n              <span class=\"member-stats\">\n                  <div class=\"health-bar\">\n                    <div class=\"health\" [style.width]=\"(item.member.health / item.member.maxHealth) * 100 + '%'\"></div>\n                  </div>\n              </span>\n              <span *ngIf=\"item.member.isAttacking || item.member.isDefending\">\n                <ng-container *ngIf=\"getMemberSkillLogs(item.member) as log\">\n                  <ng-container *ngIf=\"log.damage[0]?.damage as damageValue\">\n                    <span [style.color]=\"damageValue < 0 ? 'green' : 'blue'\"> \n                      {{ getSkillIcon(log.skill.name, damageValue) }}: {{ getAbsoluteDamage(damageValue) }} \n                    </span>\n                  </ng-container>\n                </ng-container>\n              </span>\n          </ng-container>\n          <div *ngIf=\"item.member.isAttacking && currentAttackerUsedSkill && currentSkillLog\" class=\"\">\n            <span \n              class=\"skill-name\" \n              [style.color]=\"allMembers[0].member.name === currentSkillLog.attacker ? 'blue' : 'red'\"\n            >\n              {{ currentSkillLog.attacker }}: {{ currentSkillLog.skill.isHeal ? '❤️' : '💫' }} {{ currentSkillLog.skill.name }}\n            </span>\n            <span class=\"dialogue\">{{ currentAttackerDialogueOutName }}</span>\n          </div>\n        </div>\n      </li>\n    </ul>\n  </div>\n</div>", "import { NgModule } from \"@angular/core\";\nimport { SlotRoutingModule } from \"./slot-routing.module\";\nimport { SlotComponent } from './slot/slot.component';\nimport { SquareComponent } from './square/square.component';\nimport { LinearAlgebraComponent } from './components/linear-algebra/linear-algebra.component';\nimport { FighterComponent } from './components/fighter/fighter.component';\nimport { BottomSlotSheetComponent } from \"./slot/bottom-sheet/slot-bottom-sheet.component\";\nimport { SlotDefaultComponent } from \"./components/default/default.component\";\nimport { SlotNavigationBarComponent } from \"./components/bar-navigation/navigation-bar.component\";\nimport { SlotMenuBarComponent } from \"./components/bar-menu/menu-bar.component\";\nimport { SlotContentListBarComponent } from \"./components/bar-content-list/content-list-bar.component\";\nimport { SlotContentViewBarComponent } from \"./components/bar-content-view/content-view-bar.component\";\nimport { SlotMenuMatComponent } from \"./components/mat-menu/menu-mat.component\";\nimport { SlotZoneBodyComponent } from \"./components/zone-body/zone-body.component\";\nimport { SlotAppChatbotComponent } from \"./components/app-chatbot/app-chatbot.component\";\nimport { CharacterMpComponent } from './components/character-mp/character-mp.component';\nimport { CharacterProfileComponent } from './components/character-profile/character-profile.component';\nimport { CharacterHpComponent } from \"./components/character-hp/character-hp.component\";\nimport { FlowListComponent } from \"./components/flow-list/flow-list.component\";\nimport { FlowViewComponent } from \"./components/flow-view/flow-view.component\";\nimport { SlotZoneBodyLineComponent } from \"./components/zone-body-line/zone-body-line.component\";\nimport { SlotSimulatorComponent } from \"./components/simulator/simulator.component\";\nimport { DynamicFormComponent } from './form/dynamic-form/dynamic-form.component';\nimport { TextareaComponent } from './form/textarea/textarea.component';\nimport { InputComponent } from './form/input/input.component';\nimport { PasswordComponent } from './form/password/password.component';\nimport { SelectComponent } from './form/select/select.component';\nimport { RadioButtonComponent } from './form/radio-button/radio-button.component';\nimport { DatePickerComponent } from './form/date-picker/date-picker.component';\nimport { SlotListDragComponent } from './items/slot-list-drag/slot-list-drag.component';\nimport { SlotItemPlayComponent } from './items/slot-item-play/slot-item-play.component';\nimport { SlotItemAddComponent } from './items/slot-item-add/slot-item-add.component';\nimport { FlowItemComponent } from './components/flow-item/flow-item.component';\nimport { SlotItemPinLineComponent } from './items/slot-item-pin-line/slot-item-pin-line.component';\nimport { SlotItemInputComponent } from \"./items/slot-item-input/slot-item-input.component\";\nimport { SlotItemSenderComponent } from \"./items/slot-item-sender/slot-item-sender.component\";\nimport { SlotItemConversationComponent } from \"./items/slot-item-conversation/slot-item-conversation.component\";\nimport { SlotItemPromptComponent } from \"./items/slot-item-prompt/slot-item-prompt.component\";\nimport { SlotVectorBabaylonComponent } from \"./components/babylon-vector/babylon-vector.component\";\nimport { BottomSlotPromptSheetComponent } from \"./slot/prompt-bottom-sheet/slot-prompt-bottom-sheet.component\";\nimport { SlotItemSketchSenderComponent } from \"./items/slot-item-sketch-sender/slot-item-sketch-sender.component\";\nimport { SharedModule } from \"../../shared/shared.module\";\nimport { SlotItemCategoryComponent } from \"./items/slot-item-category/slot-item-category.component\";\nimport { SlotStoryInputComponent } from \"./items/slot-story-input/slot-story-input.component\";\nimport { SlotStoryViewerComponent } from \"./items/slot-story-viewer/slot-story-viewer.component\";\nimport { SlotFormInputComponent } from \"./items/forms/slot-form-input/slot-form-input.component\";\nimport { SlotFormTextAreaComponent } from \"./items/forms/slot-form-textarea/slot-form-textarea.component\";\nimport { SlotStoryAiSenderComponent } from \"./items/slot-story-ai-sender/slot-story-ai-sender.component\";\nimport { SlotStorySaveSenderComponent } from \"./items/slot-story-save-sender/slot-story-save-sender.component\";\nimport { SlotItemCharacterComponent } from \"./items/slot-item-character/slot-item-character.component\";\nimport { SlotCharacterInputComponent } from \"./items/slot-character-input/slot-character-input.component\";\nimport { SlotStorySwieprComponent } from \"./items/slot-story-swiper/slot-story-swiper.component\";\nimport { SlotStoryItemComponent } from \"./items/slot-story-item/slot-story-item.component\";\nimport { SlotGeminiInputComponent } from \"./items/forms/slot-gemini-input/slot-gemini-input.component\";\nimport { SlotStorySwieprCubeComponent } from \"./items/slot-story-swiper-cube/slot-story-swiper-cube.component\";\nimport { SlotStorySwieprCardComponent } from \"./items/slot-story-swiper-card/slot-story-swiper-card.component\";\nimport { SlotStorySwieprFightingComponent } from \"./items/slot-story-swiper-fighting/slot-story-swiper-fighting.component\";\nimport { ClanBattleVisualComponent } from './items/slot-story-swiper-fighting/clan-battle-visual/clan-battle-visual.component';\nimport { SlotVectorBabaylonGameComponent } from \"./components/babylon-vector-game/babylon-vector-game.component\";\n\n@NgModule({\n  declarations: [\n    SlotComponent,\n    SquareComponent,\n    LinearAlgebraComponent,\n    FighterComponent,\n    BottomSlotSheetComponent,\n    BottomSlotPromptSheetComponent,\n    SlotDefaultComponent,\n    SlotNavigationBarComponent,\n    SlotMenuBarComponent,\n    SlotContentListBarComponent,\n    SlotContentViewBarComponent,\n    SlotMenuMatComponent,\n    SlotZoneBodyComponent,\n    SlotAppChatbotComponent,\n    CharacterMpComponent,\n    CharacterProfileComponent,\n    CharacterHpComponent,\n    FlowListComponent,\n    FlowViewComponent,\n    SlotZoneBodyLineComponent,\n    SlotSimulatorComponent,\n    DynamicFormComponent,\n    TextareaComponent,\n    InputComponent,\n    PasswordComponent,\n    SelectComponent,\n    RadioButtonComponent,\n    DatePickerComponent,\n    SlotListDragComponent,\n    SlotItemPlayComponent,\n    SlotItemAddComponent,\n    FlowItemComponent,\n    SlotItemPinLineComponent,\n    SlotItemInputComponent,\n    SlotItemSenderComponent,\n    SlotItemConversationComponent,\n    SlotItemPromptComponent,\n    SlotVectorBabaylonComponent,\n    SlotItemSketchSenderComponent,\n    SlotItemCategoryComponent,\n    SlotStoryInputComponent,\n    SlotStoryViewerComponent,\n    SlotFormInputComponent,\n    SlotFormTextAreaComponent,\n    SlotStoryAiSenderComponent,\n    SlotStorySaveSenderComponent,\n    SlotItemCharacterComponent,\n    SlotCharacterInputComponent,\n    SlotStorySwieprComponent,\n    SlotStoryItemComponent,\n    SlotGeminiInputComponent,\n    SlotStorySwieprCubeComponent,\n    SlotStorySwieprCardComponent,\n    SlotStorySwieprFightingComponent,\n    ClanBattleVisualComponent,\n    SlotVectorBabaylonGameComponent\n  ],\n  imports: [\n    SharedModule,\n    SlotRoutingModule\n  ]\n})\nexport class SlotModule { }"],
  "mappings": "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",
  "names": ["DataType", "DrawColor", "DrawType", "EventType", "_c0", "_c0", "_c0", "_c0", "_c1"]
}
